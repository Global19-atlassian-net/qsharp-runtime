//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

namespace Test
{
    abstract public class SimpleTarget : SimulatorBase
    {
        public override string Name => "SimpleTarget";
        public abstract void DoDumpMachine<T>(T location)
        {
        }

        public abstract void DoDumpRegister<T>(T location, IQArray<Qubit> qbs)
        {
        }

        public abstract Result DoMeasure(IQArray<Pauli> bases, IQArray<Qubit> qubits)
        {
        }

        public abstract void DoS(Qubit q1)
        {
        }

        public abstract void DoSAdj(Qubit q1)
        {
        }

        public abstract void DoSCtl(IQArray<Qubit> __ctrls__, Qubit q1)
        {
        }

        public abstract void DoSCtlAdj(IQArray<Qubit> __ctrls__, Qubit q1)
        {
        }

        public abstract void DoX(Qubit q1)
        {
        }

        public abstract void DoXCtl(IQArray<Qubit> __ctrls__, Qubit q1)
        {
        }

        public class Microsoft_Quantum_Simple__Measure : Operation<(IQArray<Pauli>,IQArray<Qubit>), Result>, ICallable
        {
            public Microsoft_Quantum_Simple__Measure(IOperationFactory m) : base(m)
            {
            }

            String ICallable.Name => "Microsoft_Quantum_Simple__Measure";
            String ICallable.FullName => "Microsoft.Quantum.Simple.Measure";
            public override Func<(IQArray<Pauli>,IQArray<Qubit>), Result> Body => (__in__) =>
            {
                var (bases,qubits) = __in__;
                return (this.Factory as SimpleTarget).DoMeasure(bases, qubits);
            }

            ;
            public override void Init()
            {
            }

            public override IApplyData __dataIn((IQArray<Pauli>,IQArray<Qubit>) data) => new In(data);
            public override IApplyData __dataOut(Result data) => new QTuple<Result>(data);
            public static System.Threading.Tasks.Task<Result> Run(IOperationFactory __m__, IQArray<Pauli> bases, IQArray<Qubit> qubits)
            {
                return __m__.Run<Measure, (IQArray<Pauli>,IQArray<Qubit>), Result>((bases, qubits));
            }
        }

        public class Microsoft_Quantum_Simple__S : Unitary<Qubit>, ICallable
        {
            public Microsoft_Quantum_Simple__S(IOperationFactory m) : base(m)
            {
            }

            String ICallable.Name => "Microsoft_Quantum_Simple__S";
            String ICallable.FullName => "Microsoft.Quantum.Simple.S";
            public override Func<Qubit, QVoid> Body => (q1) =>
            {
                (this.Factory as SimpleTarget).DoS(q1);
                return QVoid.Instance;
            }

            ;
            public override Func<Qubit, QVoid> AdjointBody => (q1) =>
            {
                (this.Factory as SimpleTarget).DoSAdj(q1);
                return QVoid.Instance;
            }

            ;
            public override Func<(IQArray<Qubit>,Qubit), QVoid> ControlledBody => (__in__) =>
            {
                var (__ctrls__,q1) = __in__;
                (this.Factory as SimpleTarget).DoSCtl(__ctrls__, q1);
                return QVoid.Instance;
            }

            ;
            public override Func<(IQArray<Qubit>,Qubit), QVoid> ControlledAdjointBody => (__in__) =>
            {
                var (__ctrls__,q1) = __in__;
                (this.Factory as SimpleTarget).DoSCtlAdj(__ctrls__, q1);
                return QVoid.Instance;
            }

            ;
            public override void Init()
            {
            }

            public override IApplyData __dataIn(Qubit data) => data;
            public override IApplyData __dataOut(QVoid data) => data;
            public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit q1)
            {
                return __m__.Run<S, Qubit, QVoid>(q1);
            }
        }

        public class Microsoft_Quantum_Simple__X : Unitary<Qubit>, ICallable
        {
            public Microsoft_Quantum_Simple__X(IOperationFactory m) : base(m)
            {
            }

            String ICallable.Name => "Microsoft_Quantum_Simple__X";
            String ICallable.FullName => "Microsoft.Quantum.Simple.X";
            public override Func<Qubit, QVoid> Body => (q1) =>
            {
                (this.Factory as SimpleTarget).DoX(q1);
                return QVoid.Instance;
            }

            ;
            public override Func<Qubit, QVoid> AdjointBody => Body;
            public override Func<(IQArray<Qubit>,Qubit), QVoid> ControlledBody => (__in__) =>
            {
                var (__ctrls__,q1) = __in__;
                (this.Factory as SimpleTarget).DoXCtl(__ctrls__, q1);
                return QVoid.Instance;
            }

            ;
            public override Func<(IQArray<Qubit>,Qubit), QVoid> ControlledAdjointBody => ControlledBody;
            public override void Init()
            {
            }

            public override IApplyData __dataIn(Qubit data) => data;
            public override IApplyData __dataOut(QVoid data) => data;
            public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit q1)
            {
                return __m__.Run<X, Qubit, QVoid>(q1);
            }
        }

        public class DumpMachine<T> : Quantum.Diagnostics.DumpMachine<T>
        {
            private SimpleTarget simulator;
            public DumpMachine(SimpleTarget m) : base(m)
            {
                simulator = m;
            }

            public override Func<T, QVoid> Body => (location) =>
            {
                simulator.DoDumpMachine(location);
            }

            ;
        }

        public class DumpRegister<T> : Quantum.Diagnostics.DumpRegister<T>
        {
            private SimpleTarget simulator;
            public DumpRegister(SimpleTarget m) : base(m)
            {
                simulator = m;
            }

            public override Func<(T, IQArray<Qubit>), QVoid> Body => (location) =>
            {
                var (location, qubits) = __in;
                simulator.DoDumpRegister(location, qubits);
            }

            ;
        }
    }
}
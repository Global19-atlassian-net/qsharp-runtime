//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using Microsoft.Quantum.Simulation.Simulators;
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

namespace Test
{
    abstract public class DupNameTarget : Microsoft.Quantum.Simulation.Simulators.QuantumSimulator
    {
        public override string Name => "DupNameTarget";
        public abstract void DoX(Qubit q1)
        {
        }

        public abstract void DoXCtl(IQArray<Qubit> __ctrls__, Qubit q1)
        {
        }

        public abstract void DoMicrosoft_Quantum_B__X(Qubit q1)
        {
        }

        public abstract void DoMicrosoft_Quantum_B__XCtl(IQArray<Qubit> __ctrls__, Qubit q1)
        {
        }

        public class Microsoft_Quantum_A__X : Microsoft.Quantum.A.X, ICallable
        {
            public Microsoft_Quantum_A__X(IOperationFactory m) : base(m)
            {
            }

            String ICallable.Name => "Microsoft_Quantum_A__X";
            String ICallable.FullName => "Microsoft.Quantum.A.X";
            public override Func<Qubit, QVoid> Body => (q1) =>
            {
                (this.Factory as DupNameTarget).DoX(q1);
                return QVoid.Instance;
            }

            ;
            public override Func<Qubit, QVoid> AdjointBody => Body;
            public override Func<(IQArray<Qubit>,Qubit), QVoid> ControlledBody => (__in__) =>
            {
                var (__ctrls__,q1) = __in__;
                (this.Factory as DupNameTarget).DoXCtl(__ctrls__, q1);
                return QVoid.Instance;
            }

            ;
            public override Func<(IQArray<Qubit>,Qubit), QVoid> ControlledAdjointBody => ControlledBody;
            public override void Init()
            {
            }

            public override IApplyData __dataIn(Qubit data) => data;
            public override IApplyData __dataOut(QVoid data) => data;
            public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit q1)
            {
                return __m__.Run<X, Qubit, QVoid>(q1);
            }
        }

        public class Microsoft_Quantum_B__X : Microsoft.Quantum.B.X, ICallable
        {
            public Microsoft_Quantum_B__X(IOperationFactory m) : base(m)
            {
            }

            String ICallable.Name => "Microsoft_Quantum_B__X";
            String ICallable.FullName => "Microsoft.Quantum.B.X";
            public override Func<Qubit, QVoid> Body => (q1) =>
            {
                (this.Factory as DupNameTarget).DoMicrosoft_Quantum_B__X(q1);
                return QVoid.Instance;
            }

            ;
            public override Func<Qubit, QVoid> AdjointBody => Body;
            public override Func<(IQArray<Qubit>,Qubit), QVoid> ControlledBody => (__in__) =>
            {
                var (__ctrls__,q1) = __in__;
                (this.Factory as DupNameTarget).DoMicrosoft_Quantum_B__XCtl(__ctrls__, q1);
                return QVoid.Instance;
            }

            ;
            public override Func<(IQArray<Qubit>,Qubit), QVoid> ControlledAdjointBody => ControlledBody;
            public override void Init()
            {
            }

            public override IApplyData __dataIn(Qubit data) => data;
            public override IApplyData __dataOut(QVoid data) => data;
            public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit q1)
            {
                return __m__.Run<X, Qubit, QVoid>(q1);
            }
        }
    }
}

%Result = type opaque
%Range = type { i64, i64, i64 }
%Tuple = type opaque
%Array = type opaque
%Qubit = type opaque
%Callable = type opaque
%String = type opaque

@ResultZero = external global %Result*
@ResultOne = external global %Result*
@PauliI = constant i2 0
@PauliX = constant i2 1
@PauliY = constant i2 -1
@PauliZ = constant i2 -2
@EmptyRange = internal constant %Range { i64 0, i64 1, i64 -1 }
@Microsoft__Quantum__Math__ComplexPolar = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Math__ComplexPolar__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__1 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Math__AbsD = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Math__AbsD__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__1.1 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__1.2 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__1.3 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Preparation__PrepareArbitraryStateCP = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctladj__wrapper]
@PartialApplication__1.4 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____ctladj__wrapper]
@PartialApplication__1.5 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@PartialApplication__2 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____ctladj__wrapper]
@PartialApplication__3 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____ctladj__wrapper]
@PartialApplication__1.6 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Preparation__PrepareArbitraryStateD = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj__wrapper]
@PartialApplication__1.7 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctladj__wrapper]
@PartialApplication__1.8 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Simulation__TrotterStepImpl = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterStepImpl__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterStepImpl__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterStepImpl__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__TrotterStepImpl__ctladj__wrapper]
@PartialApplication__1.9 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@PartialApplication__2.10 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctladj__wrapper]
@Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____ctladj__wrapper]
@PartialApplication__1.11 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__ctladj__wrapper]
@PartialApplication__1.12 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__ctladj__wrapper]
@PartialApplication__1.13 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____ctladj__wrapper]
@PartialApplication__1.14 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____ctladj__wrapper]
@PartialApplication__2.15 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctladj__wrapper]
@Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctladj__wrapper]
@PartialApplication__3.16 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctladj__wrapper]
@0 = internal constant [11 x i8] c"Odd order \00"
@1 = internal constant [20 x i8] c" not yet supported.\00"
@Microsoft__Quantum__Canon___844e0d33639542558228c58de0107c92___QsRef0__ComposedOutput__ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___844e0d33639542558228c58de0107c92___QsRef0__ComposedOutput____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__1.17 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@2 = internal constant [75 x i8] c"operation ApplyDiagonalUnitary -- Number of qubits must be greater than 0.\00"
@3 = internal constant [75 x i8] c"operation ApplyDiagonalUnitary -- Number of qubits must be greater than 0.\00"
@4 = internal constant [75 x i8] c"operation ApplyDiagonalUnitary -- Number of qubits must be greater than 0.\00"
@5 = internal constant [75 x i8] c"operation ApplyDiagonalUnitary -- Number of qubits must be greater than 0.\00"
@Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__ctladj__wrapper]
@PartialApplication__1.18 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__ctladj__wrapper]
@PartialApplication__1.19 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__ctladj__wrapper]
@PartialApplication__1.20 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@6 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@7 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@8 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@9 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@10 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@11 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@12 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@13 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@Microsoft__Quantum__Canon__ApproximatelyMultiplexZ = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj__wrapper]
@PartialApplication__1.21 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj__wrapper]
@PartialApplication__2.22 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__H = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__ctladj__wrapper]
@PartialApplication__3.23 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__S = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__ctladj__wrapper]
@14 = internal constant [38 x i8] c"MultiplexPauli failed. Invalid pauli \00"
@15 = internal constant [2 x i8] c".\00"
@PartialApplication__1.24 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@PartialApplication__2.25 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctladj__wrapper]
@PartialApplication__3.26 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctladj__wrapper]
@16 = internal constant [38 x i8] c"MultiplexPauli failed. Invalid pauli \00"
@17 = internal constant [2 x i8] c".\00"
@PartialApplication__1.27 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@PartialApplication__2.28 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctladj__wrapper]
@PartialApplication__3.29 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctladj__wrapper]
@18 = internal constant [38 x i8] c"MultiplexPauli failed. Invalid pauli \00"
@19 = internal constant [2 x i8] c".\00"
@PartialApplication__1.30 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@PartialApplication__2.31 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__ctladj__wrapper]
@PartialApplication__3.32 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctladj__wrapper]
@20 = internal constant [38 x i8] c"MultiplexPauli failed. Invalid pauli \00"
@21 = internal constant [2 x i8] c".\00"
@22 = internal constant [22 x i8] c"Index is out of bound\00"
@23 = internal constant [71 x i8] c"Specified output array length must be longer than `inputArray` length.\00"
@24 = internal constant [71 x i8] c"Specified output array length must be longer than `inputArray` length.\00"
@Microsoft__Quantum__Arrays___a04d6d13a1744c96b69fefd7d9333491_ElementAt = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___a04d6d13a1744c96b69fefd7d9333491_ElementAt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__1.33 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@25 = internal constant [33 x i8] c"`bits` must be between 0 and 63 \00"
@26 = internal constant [44 x i8] c"`number` must be between 0 and 2^`bits` - 1\00"
@27 = internal constant [13 x i8] c"\0A\09Expected:\09\00"
@28 = internal constant [11 x i8] c"\0A\09Actual:\09\00"
@Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj__wrapper]
@PartialApplication__1.34 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctladj__wrapper]
@PartialApplication__1.35 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@29 = internal constant [46 x i8] c"Unitary coupled-cluster PQRS failed: indices \00"
@30 = internal constant [3 x i8] c", \00"
@31 = internal constant [3 x i8] c", \00"
@32 = internal constant [3 x i8] c", \00"
@33 = internal constant [18 x i8] c" must be distinct\00"
@34 = internal constant [46 x i8] c"Unitary coupled-cluster PQRS failed: indices \00"
@35 = internal constant [3 x i8] c", \00"
@36 = internal constant [3 x i8] c", \00"
@37 = internal constant [3 x i8] c", \00"
@38 = internal constant [18 x i8] c" must be distinct\00"
@39 = internal constant [46 x i8] c"Unitary coupled-cluster PQRS failed: indices \00"
@40 = internal constant [3 x i8] c", \00"
@41 = internal constant [3 x i8] c", \00"
@42 = internal constant [3 x i8] c", \00"
@43 = internal constant [18 x i8] c" must be distinct\00"
@44 = internal constant [46 x i8] c"Unitary coupled-cluster PQRS failed: indices \00"
@45 = internal constant [3 x i8] c", \00"
@46 = internal constant [3 x i8] c", \00"
@47 = internal constant [3 x i8] c", \00"
@48 = internal constant [18 x i8] c" must be distinct\00"
@49 = internal constant [44 x i8] c"Unitary coupled-cluster PQ failed: indices \00"
@50 = internal constant [3 x i8] c", \00"
@51 = internal constant [18 x i8] c" must be distinct\00"
@52 = internal constant [44 x i8] c"Unitary coupled-cluster PQ failed: indices \00"
@53 = internal constant [3 x i8] c", \00"
@54 = internal constant [18 x i8] c" must be distinct\00"
@55 = internal constant [44 x i8] c"Unitary coupled-cluster PQ failed: indices \00"
@56 = internal constant [3 x i8] c", \00"
@57 = internal constant [18 x i8] c" must be distinct\00"
@58 = internal constant [44 x i8] c"Unitary coupled-cluster PQ failed: indices \00"
@59 = internal constant [3 x i8] c", \00"
@60 = internal constant [18 x i8] c" must be distinct\00"
@Microsoft__Quantum__Intrinsic__X = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__ctladj__wrapper]
@PartialApplication__1.36 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorFunction = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorFunction__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__1.37 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Chemistry__JordanWigner___PrepareSingleConfigurationalStateSingleSiteOccupation = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___PrepareSingleConfigurationalStateSingleSiteOccupation__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorSystemImpl = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorSystemImpl__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__1.38 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@61 = internal constant [47 x i8] c"Completely invalid cluster operator specified.\00"
@Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__1.39 = constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@62 = internal constant [86 x i8] c"ComputeJordanWignerString failed. `idxFermions` must contain an even number of terms.\00"
@63 = internal constant [46 x i8] c"ComputeJordanWignerString failed. fermionIdx \00"
@64 = internal constant [15 x i8] c" out of range.\00"

@Microsoft__Quantum__Samples__Chemistry__SimpleVQE__GetEnergyHydrogenVQE = alias double (), double ()* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__GetEnergyHydrogenVQE__body

define double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__EstimateEnergy__SumTermExpectation__body({ i64, %Array* }* %inputState, %Array* %ops, %Array* %coeffs, i64 %nQubits, i64 %nSamples) {
entry:
  %0 = getelementptr { i64, %Array* }, { i64, %Array* }* %inputState, i64 0, i32 1
  %1 = load %Array*, %Array** %0
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { double, double }*, %Array* }**
  %8 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %7
  %9 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %8, i64 0, i32 0
  %10 = load { double, double }*, { double, double }** %9
  %11 = bitcast { double, double }* %10 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %11)
  %12 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %8, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  call void @__quantum__rt__array_add_access(%Array* %13)
  %14 = bitcast { { double, double }*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %14)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %1)
  %16 = bitcast { i64, %Array* }* %inputState to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %16)
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ops)
  %18 = sub i64 %17, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %19)
  %22 = bitcast i8* %21 to %Array**
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_add_access(%Array* %23)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %24 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %ops)
  call void @__quantum__rt__array_add_access(%Array* %coeffs)
  %jwTermEnergy = alloca double
  store double 0.000000e+00, double* %jwTermEnergy
  %25 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coeffs)
  %26 = sub i64 %25, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %i = phi i64 [ 0, %exit__2 ], [ %42, %exiting__3 ]
  %27 = icmp sge i64 %i, %26
  %28 = icmp sle i64 %i, %26
  %29 = select i1 true, i1 %28, i1 %27
  br i1 %29, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeffs, i64 %i)
  %31 = bitcast i8* %30 to double*
  %coeff = load double, double* %31
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %i)
  %33 = bitcast i8* %32 to %Array**
  %op = load %Array*, %Array** %33
  call void @__quantum__rt__array_add_access(%Array* %op)
  %34 = fcmp oge double %coeff, 1.000000e-10
  %35 = fcmp ole double %coeff, -1.000000e-10
  %36 = or i1 %34, %35
  br i1 %36, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__3
  %termExpectation = call double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__EstimateEnergy__TermExpectation__body({ i64, %Array* }* %inputState, %Array* %op, i64 %nQubits, i64 %nSamples)
  %37 = load double, double* %jwTermEnergy
  %38 = fmul double 2.000000e+00, %termExpectation
  %39 = fsub double %38, 1.000000e+00
  %40 = fmul double %39, %coeff
  %41 = fadd double %37, %40
  store double %41, double* %jwTermEnergy
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__3
  call void @__quantum__rt__array_remove_access(%Array* %op)
  br label %exiting__3

exiting__3:                                       ; preds = %continue__1
  %42 = add i64 %i, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %43 = load double, double* %jwTermEnergy
  %44 = sub i64 %2, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %45 = phi i64 [ 0, %exit__3 ], [ %56, %exiting__4 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %45)
  %48 = bitcast i8* %47 to { { double, double }*, %Array* }**
  %49 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %48
  %50 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %49, i64 0, i32 0
  %51 = load { double, double }*, { double, double }** %50
  %52 = bitcast { double, double }* %51 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %52)
  %53 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %49, i64 0, i32 1
  %54 = load %Array*, %Array** %53
  call void @__quantum__rt__array_remove_access(%Array* %54)
  %55 = bitcast { { double, double }*, %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %55)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %56 = add i64 %45, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %16)
  %57 = sub i64 %17, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %58 = phi i64 [ 0, %exit__4 ], [ %63, %exiting__5 ]
  %59 = icmp sle i64 %58, %57
  br i1 %59, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %58)
  %61 = bitcast i8* %60 to %Array**
  %62 = load %Array*, %Array** %61
  call void @__quantum__rt__array_remove_access(%Array* %62)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %63 = add i64 %58, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_remove_access(%Array* %ops)
  call void @__quantum__rt__array_remove_access(%Array* %coeffs)
  ret double %43
}

declare void @__quantum__rt__tuple_add_access(%Tuple*)

declare void @__quantum__rt__array_add_access(%Array*)

declare i64 @__quantum__rt__array_get_size_1d(%Array*)

declare i8* @__quantum__rt__array_get_element_ptr_1d(%Array*, i64)

define double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__EstimateEnergy__TermExpectation__body({ i64, %Array* }* %inputState, %Array* %measOp, i64 %nQubits, i64 %nSamples) {
entry:
  %0 = getelementptr { i64, %Array* }, { i64, %Array* }* %inputState, i64 0, i32 1
  %1 = load %Array*, %Array** %0
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %4)
  %7 = bitcast i8* %6 to { { double, double }*, %Array* }**
  %8 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %7
  %9 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %8, i64 0, i32 0
  %10 = load { double, double }*, { double, double }** %9
  %11 = bitcast { double, double }* %10 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %11)
  %12 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %8, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  call void @__quantum__rt__array_add_access(%Array* %13)
  %14 = bitcast { { double, double }*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %14)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %1)
  %16 = bitcast { i64, %Array* }* %inputState to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %16)
  call void @__quantum__rt__array_add_access(%Array* %measOp)
  %nUp = alloca i64
  store i64 0, i64* %nUp
  %17 = sub i64 %nSamples, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idxMeasurement = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %18 = icmp sge i64 %idxMeasurement, %17
  %19 = icmp sle i64 %idxMeasurement, %17
  %20 = select i1 true, i1 %19, i1 %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %register = call %Array* @__quantum__rt__qubit_allocate_array(i64 %nQubits)
  call void @__quantum__rt__array_add_access(%Array* %register)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body({ i64, %Array* }* %inputState, %Array* %register)
  %result = call %Result* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__EstimateEnergy__JointMeasure__body(%Array* %measOp, %Array* %register)
  %21 = load %Result*, %Result** @ResultZero
  %22 = call i1 @__quantum__rt__result_equal(%Result* %result, %Result* %21)
  br i1 %22, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %23 = load i64, i64* %nUp
  %24 = add i64 %23, 1
  store i64 %24, i64* %nUp
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__2
  %25 = call i64 @__quantum__rt__array_get_size_1d(%Array* %register)
  %26 = sub i64 %25, 1
  br label %header__3

exiting__2:                                       ; preds = %exit__3
  %27 = add i64 %idxMeasurement, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %a__inline__1 = load i64, i64* %nUp
  %28 = call double @__quantum__qis__intasdouble__body(i64 %a__inline__1)
  %29 = call double @__quantum__qis__intasdouble__body(i64 %nSamples)
  %30 = fdiv double %28, %29
  %31 = sub i64 %2, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %continue__1
  %32 = phi i64 [ 0, %continue__1 ], [ %36, %exiting__3 ]
  %33 = icmp sle i64 %32, %26
  br i1 %33, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %32)
  %35 = bitcast i8* %34 to %Qubit**
  %q = load %Qubit*, %Qubit** %35
  %r = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %q)
  call void @__quantum__rt__result_unreference(%Result* %r)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %36 = add i64 %32, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__qubit_release_array(%Array* %register)
  call void @__quantum__rt__array_remove_access(%Array* %register)
  call void @__quantum__rt__array_unreference(%Array* %register)
  call void @__quantum__rt__result_unreference(%Result* %result)
  br label %exiting__2

header__4:                                        ; preds = %exiting__4, %exit__2
  %37 = phi i64 [ 0, %exit__2 ], [ %48, %exiting__4 ]
  %38 = icmp sle i64 %37, %31
  br i1 %38, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %37)
  %40 = bitcast i8* %39 to { { double, double }*, %Array* }**
  %41 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %40
  %42 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %41, i64 0, i32 0
  %43 = load { double, double }*, { double, double }** %42
  %44 = bitcast { double, double }* %43 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %44)
  %45 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %41, i64 0, i32 1
  %46 = load %Array*, %Array** %45
  call void @__quantum__rt__array_remove_access(%Array* %46)
  %47 = bitcast { { double, double }*, %Array* }* %41 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %47)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %48 = add i64 %37, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %16)
  call void @__quantum__rt__array_remove_access(%Array* %measOp)
  ret double %30
}

declare void @__quantum__rt__array_remove_access(%Array*)

declare void @__quantum__rt__tuple_remove_access(%Tuple*)

define %Result* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__EstimateEnergy__JointMeasure__body(%Array* %ops, %Array* %qbs) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %ops)
  call void @__quantum__rt__array_add_access(%Array* %qbs)
  %aux = call %Qubit* @__quantum__rt__qubit_allocate()
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qbs)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %i = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %2 = icmp sge i64 %i, %1
  %3 = icmp sle i64 %i, %1
  %4 = select i1 true, i1 %3, i1 %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %i)
  %6 = bitcast i8* %5 to i2*
  %op = load i2, i2* %6
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qbs, i64 %i)
  %8 = bitcast i8* %7 to %Qubit**
  %qb = load %Qubit*, %Qubit** %8
  %9 = load i2, i2* @PauliX
  %10 = icmp eq i2 %op, %9
  br i1 %10, label %then0__1, label %test1__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__qis__h__body(%Qubit* %qb)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %qb, %Qubit* %aux)
  call void @__quantum__qis__h__body(%Qubit* %qb)
  br label %continue__1

test1__1:                                         ; preds = %body__1
  %11 = load i2, i2* @PauliY
  %12 = icmp eq i2 %op, %11
  br i1 %12, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__qis__s__body(%Qubit* %qb)
  call void @__quantum__qis__h__body(%Qubit* %qb)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %qb, %Qubit* %aux)
  call void @__quantum__qis__h__body(%Qubit* %qb)
  call void @__quantum__qis__s__body(%Qubit* %qb)
  call void @__quantum__qis__z__body(%Qubit* %qb)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %13 = load i2, i2* @PauliZ
  %14 = icmp eq i2 %op, %13
  br i1 %14, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %qb, %Qubit* %aux)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %15 = add i64 %i, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %16 = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %aux)
  call void @__quantum__rt__qubit_release(%Qubit* %aux)
  call void @__quantum__rt__array_remove_access(%Array* %ops)
  call void @__quantum__rt__array_remove_access(%Array* %qbs)
  ret %Result* %16
}

declare %Qubit* @__quantum__rt__qubit_allocate()

declare %Array* @__quantum__rt__qubit_allocate_array(i64)

declare void @__quantum__qis__h__body(%Qubit*)

define void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control, %Qubit* %target) {
entry:
  %__controlQubits____inline__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__controlQubits____inline__1, i64 0)
  %1 = bitcast i8* %0 to %Qubit**
  store %Qubit* %control, %Qubit** %1
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits____inline__1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits____inline__1, %Qubit* %target)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits____inline__1)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits____inline__1)
  ret void
}

declare void @__quantum__qis__s__body(%Qubit*)

declare void @__quantum__qis__z__body(%Qubit*)

define %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %qubit) {
entry:
  %bases__inline__1 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bases__inline__1, i64 0)
  %1 = bitcast i8* %0 to i2*
  %2 = load i2, i2* @PauliZ
  store i2 %2, i2* %1
  call void @__quantum__rt__array_add_access(%Array* %bases__inline__1)
  %qubits__inline__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__inline__1, i64 0)
  %4 = bitcast i8* %3 to %Qubit**
  store %Qubit* %qubit, %Qubit** %4
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__1)
  %5 = call %Result* @__quantum__qis__measure__body(%Array* %bases__inline__1, %Array* %qubits__inline__1)
  call void @__quantum__rt__array_remove_access(%Array* %bases__inline__1)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %bases__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %qubits__inline__1)
  ret %Result* %5
}

declare void @__quantum__rt__qubit_release(%Qubit*)

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body({ i64, %Array* }* %stateData, %Array* %qubits) {
entry:
  %0 = getelementptr { i64, %Array* }, { i64, %Array* }* %stateData, i64 0, i32 1
  %terms = load %Array*, %Array** %0
  %nTerms = call i64 @__quantum__rt__array_get_size_1d(%Array* %terms)
  %1 = sub i64 %nTerms, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5
  %7 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 0
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %9)
  %10 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %11)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %12)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %terms)
  %14 = bitcast { i64, %Array* }* %stateData to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %14)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %15 = getelementptr { i64, %Array* }, { i64, %Array* }* %stateData, i64 0, i32 0
  %stateType = load i64, i64* %15
  %16 = sub i64 %nTerms, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %17)
  %20 = bitcast i8* %19 to { { double, double }*, %Array* }**
  %21 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %20
  %22 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %21, i64 0, i32 0
  %23 = load { double, double }*, { double, double }** %22
  %24 = bitcast { double, double }* %23 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %24)
  %25 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %21, i64 0, i32 1
  %26 = load %Array*, %Array** %25
  call void @__quantum__rt__array_add_access(%Array* %26)
  %27 = bitcast { { double, double }*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %27)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %terms)
  %29 = icmp eq i64 %stateType, 2
  br i1 %29, label %then0__1, label %test1__1

then0__1:                                         ; preds = %exit__2
  %30 = icmp eq i64 %nTerms, 0
  br i1 %30, label %then0__2, label %test1__2

then0__2:                                         ; preds = %then0__1
  br label %continue__2

test1__2:                                         ; preds = %then0__1
  %31 = icmp eq i64 %nTerms, 1
  br i1 %31, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 0)
  %33 = bitcast i8* %32 to { { double, double }*, %Array* }**
  %34 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %33
  %35 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %34, i64 0, i32 0
  %complex = load { double, double }*, { double, double }** %35
  %36 = bitcast { double, double }* %complex to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %36)
  %37 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %34, i64 0, i32 1
  %qubitIndices = load %Array*, %Array** %37
  call void @__quantum__rt__array_add_access(%Array* %qubitIndices)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %qubitIndices, %Array* %qubits)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %36)
  call void @__quantum__rt__array_remove_access(%Array* %qubitIndices)
  br label %continue__2

else__1:                                          ; preds = %test1__2
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp, %Tuple* null)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSparseMultiConfigurationalState__body(%Callable* %38, %Array* %terms, %Array* %qubits)
  call void @__quantum__rt__callable_unreference(%Callable* %38)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %then1__1, %then0__2
  br label %continue__1

test1__1:                                         ; preds = %exit__2
  %39 = icmp eq i64 %stateType, 3
  br i1 %39, label %then1__2, label %continue__1

then1__2:                                         ; preds = %test1__1
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { %Callable*, i64, %Array* }*
  %42 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %41, i64 0, i32 0
  %43 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %41, i64 0, i32 1
  %44 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %41, i64 0, i32 2
  %45 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState, %Tuple* null)
  %46 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 0)
  %48 = bitcast i8* %47 to { { double, double }*, %Array* }**
  %49 = sub i64 %nTerms, 1
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %49)
  %51 = bitcast i8* %50 to { { double, double }*, %Array* }**
  %52 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %51
  %53 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %52, i64 0, i32 0
  %54 = load { double, double }*, { double, double }** %53
  %55 = bitcast { double, double }* %54 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %55)
  %56 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %52, i64 0, i32 1
  %57 = load %Array*, %Array** %56
  call void @__quantum__rt__array_reference(%Array* %57)
  %58 = bitcast { { double, double }*, %Array* }* %52 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %58)
  store { { double, double }*, %Array* }* %52, { { double, double }*, %Array* }** %48
  store %Callable* %45, %Callable** %42
  store i64 2, i64* %43
  store %Array* %46, %Array** %44
  %referenceState = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.39, %Tuple* %40)
  %59 = sub i64 %nTerms, 2
  %60 = load %Range, %Range* @EmptyRange
  %61 = insertvalue %Range %60, i64 0, 0
  %62 = insertvalue %Range %61, i64 1, 1
  %63 = insertvalue %Range %62, i64 %59, 2
  %64 = call %Array* @__quantum__rt__array_slice_1d(%Array* %terms, %Range %63, i1 false)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareUnitaryCoupledClusterState__body(%Callable* %referenceState, %Array* %64, double 1.000000e+00, %Array* %qubits)
  call void @__quantum__rt__callable_unreference(%Callable* %referenceState)
  %65 = call i64 @__quantum__rt__array_get_size_1d(%Array* %64)
  %66 = sub i64 %65, 1
  br label %header__3

continue__1:                                      ; preds = %exit__3, %test1__1, %continue__2
  %67 = sub i64 %nTerms, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %then1__2
  %68 = phi i64 [ 0, %then1__2 ], [ %79, %exiting__3 ]
  %69 = icmp sle i64 %68, %66
  br i1 %69, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %68)
  %71 = bitcast i8* %70 to { { double, double }*, %Array* }**
  %72 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %71
  %73 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %72, i64 0, i32 0
  %74 = load { double, double }*, { double, double }** %73
  %75 = bitcast { double, double }* %74 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %75)
  %76 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %72, i64 0, i32 1
  %77 = load %Array*, %Array** %76
  call void @__quantum__rt__array_unreference(%Array* %77)
  %78 = bitcast { { double, double }*, %Array* }* %72 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %78)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %79 = add i64 %68, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_unreference(%Array* %64)
  br label %continue__1

header__4:                                        ; preds = %exiting__4, %continue__1
  %80 = phi i64 [ 0, %continue__1 ], [ %91, %exiting__4 ]
  %81 = icmp sle i64 %80, %67
  br i1 %81, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %80)
  %83 = bitcast i8* %82 to { { double, double }*, %Array* }**
  %84 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %83
  %85 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %84, i64 0, i32 0
  %86 = load { double, double }*, { double, double }** %85
  %87 = bitcast { double, double }* %86 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %87)
  %88 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %84, i64 0, i32 1
  %89 = load %Array*, %Array** %88
  call void @__quantum__rt__array_remove_access(%Array* %89)
  %90 = bitcast { { double, double }*, %Array* }* %84 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %90)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %91 = add i64 %80, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_remove_access(%Array* %terms)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %14)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  %92 = sub i64 %nTerms, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %93 = phi i64 [ 0, %exit__4 ], [ %104, %exiting__5 ]
  %94 = icmp sle i64 %93, %92
  br i1 %94, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %93)
  %96 = bitcast i8* %95 to { { double, double }*, %Array* }**
  %97 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %96
  %98 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %97, i64 0, i32 0
  %99 = load { double, double }*, { double, double }** %98
  %100 = bitcast { double, double }* %99 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %100)
  %101 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %97, i64 0, i32 1
  %102 = load %Array*, %Array** %101
  call void @__quantum__rt__array_remove_access(%Array* %102)
  %103 = bitcast { { double, double }*, %Array* }* %97 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %103)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %104 = add i64 %93, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_remove_access(%Array* %terms)
  ret void
}

declare i1 @__quantum__rt__result_equal(%Result*, %Result*)

declare void @__quantum__rt__result_unreference(%Result*)

declare void @__quantum__rt__qubit_release_array(%Array*)

declare void @__quantum__rt__array_unreference(%Array*)

declare double @__quantum__qis__intasdouble__body(i64)

define %Array* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__Utils__VQEMeasurementOperators__body(i64 %nQubits, %Array* %indices, i64 %termType) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %indices)
  %nOps = alloca i64
  store i64 0, i64* %nOps
  %0 = icmp eq i64 %termType, 2
  br i1 %0, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  store i64 2, i64* %nOps
  br label %continue__1

test1__1:                                         ; preds = %entry
  %1 = icmp eq i64 %termType, 3
  br i1 %1, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  store i64 8, i64* %nOps
  br label %continue__1

else__1:                                          ; preds = %test1__1
  store i64 1, i64* %nOps
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  %2 = load i64, i64* %nOps
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %2)
  %ops = alloca %Array*
  store %Array* %3, %Array** %ops
  %4 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %5 = phi i64 [ 0, %continue__1 ], [ %10, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %5)
  %8 = bitcast i8* %7 to %Array**
  %9 = load %Array*, %Array** %8
  call void @__quantum__rt__array_add_access(%Array* %9)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %3)
  %11 = icmp eq i64 %termType, 0
  %12 = icmp eq i64 %termType, 1
  %13 = or i1 %11, %12
  br i1 %13, label %then0__2, label %test1__2

then0__2:                                         ; preds = %exit__1
  %14 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nQubits)
  %op = alloca %Array*
  store %Array* %14, %Array** %op
  call void @__quantum__rt__array_add_access(%Array* %14)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %16 = sub i64 %15, 1
  br label %header__2

test1__2:                                         ; preds = %exit__1
  %17 = icmp eq i64 %termType, 3
  br i1 %17, label %then1__2, label %test2__1

then1__2:                                         ; preds = %test1__2
  %compactOps = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 0)
  %19 = bitcast i8* %18 to %Array**
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 1)
  %21 = bitcast i8* %20 to %Array**
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 2)
  %23 = bitcast i8* %22 to %Array**
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 3)
  %25 = bitcast i8* %24 to %Array**
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 4)
  %27 = bitcast i8* %26 to %Array**
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 5)
  %29 = bitcast i8* %28 to %Array**
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 6)
  %31 = bitcast i8* %30 to %Array**
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 7)
  %33 = bitcast i8* %32 to %Array**
  %34 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 0)
  %36 = bitcast i8* %35 to i2*
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 1)
  %38 = bitcast i8* %37 to i2*
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 2)
  %40 = bitcast i8* %39 to i2*
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 3)
  %42 = bitcast i8* %41 to i2*
  %43 = load i2, i2* @PauliX
  %44 = load i2, i2* @PauliX
  %45 = load i2, i2* @PauliX
  %46 = load i2, i2* @PauliX
  store i2 %43, i2* %36
  store i2 %44, i2* %38
  store i2 %45, i2* %40
  store i2 %46, i2* %42
  %47 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 0)
  %49 = bitcast i8* %48 to i2*
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 1)
  %51 = bitcast i8* %50 to i2*
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 2)
  %53 = bitcast i8* %52 to i2*
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 3)
  %55 = bitcast i8* %54 to i2*
  %56 = load i2, i2* @PauliY
  %57 = load i2, i2* @PauliY
  %58 = load i2, i2* @PauliY
  %59 = load i2, i2* @PauliY
  store i2 %56, i2* %49
  store i2 %57, i2* %51
  store i2 %58, i2* %53
  store i2 %59, i2* %55
  %60 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 0)
  %62 = bitcast i8* %61 to i2*
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 1)
  %64 = bitcast i8* %63 to i2*
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 2)
  %66 = bitcast i8* %65 to i2*
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 3)
  %68 = bitcast i8* %67 to i2*
  %69 = load i2, i2* @PauliX
  %70 = load i2, i2* @PauliX
  %71 = load i2, i2* @PauliY
  %72 = load i2, i2* @PauliY
  store i2 %69, i2* %62
  store i2 %70, i2* %64
  store i2 %71, i2* %66
  store i2 %72, i2* %68
  %73 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 0)
  %75 = bitcast i8* %74 to i2*
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 1)
  %77 = bitcast i8* %76 to i2*
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 2)
  %79 = bitcast i8* %78 to i2*
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 3)
  %81 = bitcast i8* %80 to i2*
  %82 = load i2, i2* @PauliY
  %83 = load i2, i2* @PauliY
  %84 = load i2, i2* @PauliX
  %85 = load i2, i2* @PauliX
  store i2 %82, i2* %75
  store i2 %83, i2* %77
  store i2 %84, i2* %79
  store i2 %85, i2* %81
  %86 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 0)
  %88 = bitcast i8* %87 to i2*
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 1)
  %90 = bitcast i8* %89 to i2*
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 2)
  %92 = bitcast i8* %91 to i2*
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 3)
  %94 = bitcast i8* %93 to i2*
  %95 = load i2, i2* @PauliX
  %96 = load i2, i2* @PauliY
  %97 = load i2, i2* @PauliX
  %98 = load i2, i2* @PauliY
  store i2 %95, i2* %88
  store i2 %96, i2* %90
  store i2 %97, i2* %92
  store i2 %98, i2* %94
  %99 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 0)
  %101 = bitcast i8* %100 to i2*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 1)
  %103 = bitcast i8* %102 to i2*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 2)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 3)
  %107 = bitcast i8* %106 to i2*
  %108 = load i2, i2* @PauliY
  %109 = load i2, i2* @PauliX
  %110 = load i2, i2* @PauliY
  %111 = load i2, i2* @PauliX
  store i2 %108, i2* %101
  store i2 %109, i2* %103
  store i2 %110, i2* %105
  store i2 %111, i2* %107
  %112 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 0)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 1)
  %116 = bitcast i8* %115 to i2*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 2)
  %118 = bitcast i8* %117 to i2*
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 3)
  %120 = bitcast i8* %119 to i2*
  %121 = load i2, i2* @PauliY
  %122 = load i2, i2* @PauliX
  %123 = load i2, i2* @PauliX
  %124 = load i2, i2* @PauliY
  store i2 %121, i2* %114
  store i2 %122, i2* %116
  store i2 %123, i2* %118
  store i2 %124, i2* %120
  %125 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %126 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %125, i64 0)
  %127 = bitcast i8* %126 to i2*
  %128 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %125, i64 1)
  %129 = bitcast i8* %128 to i2*
  %130 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %125, i64 2)
  %131 = bitcast i8* %130 to i2*
  %132 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %125, i64 3)
  %133 = bitcast i8* %132 to i2*
  %134 = load i2, i2* @PauliX
  %135 = load i2, i2* @PauliY
  %136 = load i2, i2* @PauliY
  %137 = load i2, i2* @PauliX
  store i2 %134, i2* %127
  store i2 %135, i2* %129
  store i2 %136, i2* %131
  store i2 %137, i2* %133
  store %Array* %34, %Array** %19
  store %Array* %47, %Array** %21
  store %Array* %60, %Array** %23
  store %Array* %73, %Array** %25
  store %Array* %86, %Array** %27
  store %Array* %99, %Array** %29
  store %Array* %112, %Array** %31
  store %Array* %125, %Array** %33
  br label %header__7

test2__1:                                         ; preds = %test1__2
  %138 = icmp eq i64 %termType, 2
  br i1 %138, label %then2__1, label %continue__2

then2__1:                                         ; preds = %test2__1
  %compactOps5 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %139 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps5, i64 0)
  %140 = bitcast i8* %139 to %Array**
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps5, i64 1)
  %142 = bitcast i8* %141 to %Array**
  %143 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %144 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %143, i64 0)
  %145 = bitcast i8* %144 to i2*
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %143, i64 1)
  %147 = bitcast i8* %146 to i2*
  %148 = load i2, i2* @PauliX
  %149 = load i2, i2* @PauliX
  store i2 %148, i2* %145
  store i2 %149, i2* %147
  %150 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %151 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %150, i64 0)
  %152 = bitcast i8* %151 to i2*
  %153 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %150, i64 1)
  %154 = bitcast i8* %153 to i2*
  %155 = load i2, i2* @PauliY
  %156 = load i2, i2* @PauliY
  store i2 %155, i2* %152
  store i2 %156, i2* %154
  store %Array* %143, %Array** %140
  store %Array* %150, %Array** %142
  br label %header__18

continue__2:                                      ; preds = %exit__26, %test2__1, %exit__17, %exit__6
  %157 = load %Array*, %Array** %ops
  %158 = call i64 @__quantum__rt__array_get_size_1d(%Array* %157)
  %159 = sub i64 %158, 1
  br label %header__27

header__2:                                        ; preds = %exiting__2, %then0__2
  %160 = phi i64 [ 0, %then0__2 ], [ %171, %exiting__2 ]
  %161 = icmp sle i64 %160, %16
  br i1 %161, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %162 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %160)
  %163 = bitcast i8* %162 to i64*
  %idx = load i64, i64* %163
  %164 = load %Array*, %Array** %op
  %165 = call %Array* @__quantum__rt__array_copy(%Array* %164, i1 false)
  %166 = load i2, i2* @PauliZ
  %167 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 %idx)
  %168 = bitcast i8* %167 to i2*
  %169 = load i2, i2* %168
  store i2 %166, i2* %168
  %170 = load %Array*, %Array** %op
  call void @__quantum__rt__array_remove_access(%Array* %170)
  store %Array* %165, %Array** %op
  call void @__quantum__rt__array_add_access(%Array* %165)
  call void @__quantum__rt__array_unreference(%Array* %165)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %171 = add i64 %160, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %172 = call %Array* @__quantum__rt__array_copy(%Array* %3, i1 false)
  %173 = call i64 @__quantum__rt__array_get_size_1d(%Array* %172)
  %174 = sub i64 %173, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %175 = phi i64 [ 0, %exit__2 ], [ %180, %exiting__3 ]
  %176 = icmp sle i64 %175, %174
  br i1 %176, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %177 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %172, i64 %175)
  %178 = bitcast i8* %177 to %Array**
  %179 = load %Array*, %Array** %178
  call void @__quantum__rt__array_reference(%Array* %179)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %180 = add i64 %175, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %181 = load %Array*, %Array** %op
  call void @__quantum__rt__array_reference(%Array* %181)
  %182 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %172, i64 0)
  %183 = bitcast i8* %182 to %Array**
  %184 = load %Array*, %Array** %183
  call void @__quantum__rt__array_unreference(%Array* %184)
  store %Array* %181, %Array** %183
  %185 = sub i64 %2, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %186 = phi i64 [ 0, %exit__3 ], [ %191, %exiting__4 ]
  %187 = icmp sle i64 %186, %185
  br i1 %187, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %188 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %186)
  %189 = bitcast i8* %188 to %Array**
  %190 = load %Array*, %Array** %189
  call void @__quantum__rt__array_remove_access(%Array* %190)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %191 = add i64 %186, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_remove_access(%Array* %3)
  store %Array* %172, %Array** %ops
  %192 = sub i64 %173, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %193 = phi i64 [ 0, %exit__4 ], [ %198, %exiting__5 ]
  %194 = icmp sle i64 %193, %192
  br i1 %194, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %195 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %172, i64 %193)
  %196 = bitcast i8* %195 to %Array**
  %197 = load %Array*, %Array** %196
  call void @__quantum__rt__array_add_access(%Array* %197)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %198 = add i64 %193, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_add_access(%Array* %172)
  call void @__quantum__rt__array_remove_access(%Array* %181)
  call void @__quantum__rt__array_unreference(%Array* %14)
  %199 = sub i64 %173, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %200 = phi i64 [ 0, %exit__5 ], [ %205, %exiting__6 ]
  %201 = icmp sle i64 %200, %199
  br i1 %201, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %202 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %172, i64 %200)
  %203 = bitcast i8* %202 to %Array**
  %204 = load %Array*, %Array** %203
  call void @__quantum__rt__array_unreference(%Array* %204)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %205 = add i64 %200, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_unreference(%Array* %172)
  br label %continue__2

header__7:                                        ; preds = %exiting__7, %then1__2
  %206 = phi i64 [ 0, %then1__2 ], [ %211, %exiting__7 ]
  %207 = icmp sle i64 %206, 7
  br i1 %207, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %208 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 %206)
  %209 = bitcast i8* %208 to %Array**
  %210 = load %Array*, %Array** %209
  call void @__quantum__rt__array_add_access(%Array* %210)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %211 = add i64 %206, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_add_access(%Array* %compactOps)
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %iOp = phi i64 [ 0, %exit__7 ], [ %223, %exiting__8 ]
  %212 = icmp sge i64 %iOp, 7
  %213 = icmp sle i64 %iOp, 7
  %214 = select i1 true, i1 %213, i1 %212
  br i1 %214, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %215 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 %iOp)
  %216 = bitcast i8* %215 to %Array**
  %217 = load %Array*, %Array** %216
  %compactOp = alloca %Array*
  store %Array* %217, %Array** %compactOp
  %218 = load %Array*, %Array** %compactOp
  call void @__quantum__rt__array_add_access(%Array* %218)
  %219 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nQubits)
  %op1 = alloca %Array*
  store %Array* %219, %Array** %op1
  %220 = load %Array*, %Array** %op1
  call void @__quantum__rt__array_add_access(%Array* %220)
  %221 = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %222 = sub i64 %221, 1
  br label %header__9

exiting__8:                                       ; preds = %exit__15
  %223 = add i64 %iOp, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  br label %header__16

header__9:                                        ; preds = %exiting__9, %body__8
  %i = phi i64 [ 0, %body__8 ], [ %238, %exiting__9 ]
  %224 = icmp sge i64 %i, %222
  %225 = icmp sle i64 %i, %222
  %226 = select i1 true, i1 %225, i1 %224
  br i1 %226, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %227 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %i)
  %228 = bitcast i8* %227 to i64*
  %idx2 = load i64, i64* %228
  %229 = load %Array*, %Array** %compactOp
  %230 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %229, i64 %i)
  %231 = bitcast i8* %230 to i2*
  %pauli = load i2, i2* %231
  %232 = load %Array*, %Array** %op1
  %233 = call %Array* @__quantum__rt__array_copy(%Array* %232, i1 false)
  %234 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %233, i64 %idx2)
  %235 = bitcast i8* %234 to i2*
  %236 = load i2, i2* %235
  store i2 %pauli, i2* %235
  %237 = load %Array*, %Array** %op1
  call void @__quantum__rt__array_remove_access(%Array* %237)
  store %Array* %233, %Array** %op1
  call void @__quantum__rt__array_add_access(%Array* %233)
  call void @__quantum__rt__array_unreference(%Array* %233)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %238 = add i64 %i, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  %239 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %240 = bitcast i8* %239 to i64*
  %241 = load i64, i64* %240
  %242 = add i64 %241, 1
  %243 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 1)
  %244 = bitcast i8* %243 to i64*
  %245 = load i64, i64* %244
  %246 = sub i64 %245, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %i3 = phi i64 [ %242, %exit__9 ], [ %257, %exiting__10 ]
  %247 = icmp sge i64 %i3, %246
  %248 = icmp sle i64 %i3, %246
  %249 = select i1 true, i1 %248, i1 %247
  br i1 %249, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %250 = load %Array*, %Array** %op1
  %251 = call %Array* @__quantum__rt__array_copy(%Array* %250, i1 false)
  %252 = load i2, i2* @PauliZ
  %253 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %251, i64 %i3)
  %254 = bitcast i8* %253 to i2*
  %255 = load i2, i2* %254
  store i2 %252, i2* %254
  %256 = load %Array*, %Array** %op1
  call void @__quantum__rt__array_remove_access(%Array* %256)
  store %Array* %251, %Array** %op1
  call void @__quantum__rt__array_add_access(%Array* %251)
  call void @__quantum__rt__array_unreference(%Array* %251)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %257 = add i64 %i3, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  %258 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 2)
  %259 = bitcast i8* %258 to i64*
  %260 = load i64, i64* %259
  %261 = add i64 %260, 1
  %262 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 3)
  %263 = bitcast i8* %262 to i64*
  %264 = load i64, i64* %263
  %265 = sub i64 %264, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %i4 = phi i64 [ %261, %exit__10 ], [ %276, %exiting__11 ]
  %266 = icmp sge i64 %i4, %265
  %267 = icmp sle i64 %i4, %265
  %268 = select i1 true, i1 %267, i1 %266
  br i1 %268, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %269 = load %Array*, %Array** %op1
  %270 = call %Array* @__quantum__rt__array_copy(%Array* %269, i1 false)
  %271 = load i2, i2* @PauliZ
  %272 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %270, i64 %i4)
  %273 = bitcast i8* %272 to i2*
  %274 = load i2, i2* %273
  store i2 %271, i2* %273
  %275 = load %Array*, %Array** %op1
  call void @__quantum__rt__array_remove_access(%Array* %275)
  store %Array* %270, %Array** %op1
  call void @__quantum__rt__array_add_access(%Array* %270)
  call void @__quantum__rt__array_unreference(%Array* %270)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %276 = add i64 %i4, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  %277 = load %Array*, %Array** %ops
  %278 = call %Array* @__quantum__rt__array_copy(%Array* %277, i1 false)
  %279 = call i64 @__quantum__rt__array_get_size_1d(%Array* %278)
  %280 = sub i64 %279, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %281 = phi i64 [ 0, %exit__11 ], [ %286, %exiting__12 ]
  %282 = icmp sle i64 %281, %280
  br i1 %282, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %283 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %278, i64 %281)
  %284 = bitcast i8* %283 to %Array**
  %285 = load %Array*, %Array** %284
  call void @__quantum__rt__array_reference(%Array* %285)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %286 = add i64 %281, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  %287 = load %Array*, %Array** %op1
  call void @__quantum__rt__array_reference(%Array* %287)
  %288 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %278, i64 %iOp)
  %289 = bitcast i8* %288 to %Array**
  %290 = load %Array*, %Array** %289
  call void @__quantum__rt__array_unreference(%Array* %290)
  store %Array* %287, %Array** %289
  %291 = load %Array*, %Array** %ops
  %292 = call i64 @__quantum__rt__array_get_size_1d(%Array* %291)
  %293 = sub i64 %292, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %294 = phi i64 [ 0, %exit__12 ], [ %299, %exiting__13 ]
  %295 = icmp sle i64 %294, %293
  br i1 %295, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %296 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %291, i64 %294)
  %297 = bitcast i8* %296 to %Array**
  %298 = load %Array*, %Array** %297
  call void @__quantum__rt__array_remove_access(%Array* %298)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %299 = add i64 %294, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_remove_access(%Array* %291)
  store %Array* %278, %Array** %ops
  %300 = sub i64 %279, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %301 = phi i64 [ 0, %exit__13 ], [ %306, %exiting__14 ]
  %302 = icmp sle i64 %301, %300
  br i1 %302, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %303 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %278, i64 %301)
  %304 = bitcast i8* %303 to %Array**
  %305 = load %Array*, %Array** %304
  call void @__quantum__rt__array_add_access(%Array* %305)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %306 = add i64 %301, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_add_access(%Array* %278)
  %307 = load %Array*, %Array** %compactOp
  call void @__quantum__rt__array_remove_access(%Array* %307)
  %308 = load %Array*, %Array** %op1
  call void @__quantum__rt__array_remove_access(%Array* %308)
  call void @__quantum__rt__array_unreference(%Array* %219)
  %309 = sub i64 %279, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %310 = phi i64 [ 0, %exit__14 ], [ %315, %exiting__15 ]
  %311 = icmp sle i64 %310, %309
  br i1 %311, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %312 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %278, i64 %310)
  %313 = bitcast i8* %312 to %Array**
  %314 = load %Array*, %Array** %313
  call void @__quantum__rt__array_unreference(%Array* %314)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %315 = add i64 %310, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_unreference(%Array* %278)
  br label %exiting__8

header__16:                                       ; preds = %exiting__16, %exit__8
  %316 = phi i64 [ 0, %exit__8 ], [ %321, %exiting__16 ]
  %317 = icmp sle i64 %316, 7
  br i1 %317, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %318 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 %316)
  %319 = bitcast i8* %318 to %Array**
  %320 = load %Array*, %Array** %319
  call void @__quantum__rt__array_remove_access(%Array* %320)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %321 = add i64 %316, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_remove_access(%Array* %compactOps)
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %322 = phi i64 [ 0, %exit__16 ], [ %327, %exiting__17 ]
  %323 = icmp sle i64 %322, 7
  br i1 %323, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %324 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps, i64 %322)
  %325 = bitcast i8* %324 to %Array**
  %326 = load %Array*, %Array** %325
  call void @__quantum__rt__array_unreference(%Array* %326)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %327 = add i64 %322, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_unreference(%Array* %compactOps)
  br label %continue__2

header__18:                                       ; preds = %exiting__18, %then2__1
  %328 = phi i64 [ 0, %then2__1 ], [ %333, %exiting__18 ]
  %329 = icmp sle i64 %328, 1
  br i1 %329, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %330 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps5, i64 %328)
  %331 = bitcast i8* %330 to %Array**
  %332 = load %Array*, %Array** %331
  call void @__quantum__rt__array_add_access(%Array* %332)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %333 = add i64 %328, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_add_access(%Array* %compactOps5)
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %iOp6 = phi i64 [ 0, %exit__18 ], [ %379, %exiting__19 ]
  %334 = icmp sge i64 %iOp6, 1
  %335 = icmp sle i64 %iOp6, 1
  %336 = select i1 true, i1 %335, i1 %334
  br i1 %336, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %337 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps5, i64 %iOp6)
  %338 = bitcast i8* %337 to %Array**
  %339 = load %Array*, %Array** %338
  %compactOp7 = alloca %Array*
  store %Array* %339, %Array** %compactOp7
  %340 = load %Array*, %Array** %compactOp7
  call void @__quantum__rt__array_add_access(%Array* %340)
  %341 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nQubits)
  %op8 = alloca %Array*
  store %Array* %341, %Array** %op8
  %342 = load %Array*, %Array** %op8
  call void @__quantum__rt__array_add_access(%Array* %342)
  %nIndices = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %343 = load %Array*, %Array** %op8
  %344 = call %Array* @__quantum__rt__array_copy(%Array* %343, i1 false)
  %345 = load %Array*, %Array** %compactOp7
  %346 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %345, i64 0)
  %347 = bitcast i8* %346 to i2*
  %348 = load i2, i2* %347
  %349 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %350 = bitcast i8* %349 to i64*
  %351 = load i64, i64* %350
  %352 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %344, i64 %351)
  %353 = bitcast i8* %352 to i2*
  %354 = load i2, i2* %353
  store i2 %348, i2* %353
  %355 = load %Array*, %Array** %op8
  call void @__quantum__rt__array_remove_access(%Array* %355)
  store %Array* %344, %Array** %op8
  call void @__quantum__rt__array_add_access(%Array* %344)
  %356 = load %Array*, %Array** %op8
  %357 = call %Array* @__quantum__rt__array_copy(%Array* %356, i1 false)
  %358 = load %Array*, %Array** %compactOp7
  %359 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %358, i64 1)
  %360 = bitcast i8* %359 to i2*
  %361 = load i2, i2* %360
  %362 = sub i64 %nIndices, 1
  %363 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %362)
  %364 = bitcast i8* %363 to i64*
  %365 = load i64, i64* %364
  %366 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %357, i64 %365)
  %367 = bitcast i8* %366 to i2*
  %368 = load i2, i2* %367
  store i2 %361, i2* %367
  %369 = load %Array*, %Array** %op8
  call void @__quantum__rt__array_remove_access(%Array* %369)
  store %Array* %357, %Array** %op8
  call void @__quantum__rt__array_add_access(%Array* %357)
  %370 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %371 = bitcast i8* %370 to i64*
  %372 = load i64, i64* %371
  %373 = add i64 %372, 1
  %374 = sub i64 %nIndices, 1
  %375 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %374)
  %376 = bitcast i8* %375 to i64*
  %377 = load i64, i64* %376
  %378 = sub i64 %377, 1
  br label %header__20

exiting__19:                                      ; preds = %exit__24
  %379 = add i64 %iOp6, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  br label %header__25

header__20:                                       ; preds = %exiting__20, %body__19
  %i9 = phi i64 [ %373, %body__19 ], [ %390, %exiting__20 ]
  %380 = icmp sge i64 %i9, %378
  %381 = icmp sle i64 %i9, %378
  %382 = select i1 true, i1 %381, i1 %380
  br i1 %382, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %383 = load %Array*, %Array** %op8
  %384 = call %Array* @__quantum__rt__array_copy(%Array* %383, i1 false)
  %385 = load i2, i2* @PauliZ
  %386 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %384, i64 %i9)
  %387 = bitcast i8* %386 to i2*
  %388 = load i2, i2* %387
  store i2 %385, i2* %387
  %389 = load %Array*, %Array** %op8
  call void @__quantum__rt__array_remove_access(%Array* %389)
  store %Array* %384, %Array** %op8
  call void @__quantum__rt__array_add_access(%Array* %384)
  call void @__quantum__rt__array_unreference(%Array* %384)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %390 = add i64 %i9, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  %391 = icmp eq i64 %nIndices, 4
  br i1 %391, label %then0__3, label %continue__3

then0__3:                                         ; preds = %exit__20
  %392 = load %Array*, %Array** %op8
  %393 = call %Array* @__quantum__rt__array_copy(%Array* %392, i1 false)
  %394 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %395 = bitcast i8* %394 to i64*
  %396 = load i64, i64* %395
  %397 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 1)
  %398 = bitcast i8* %397 to i64*
  %399 = load i64, i64* %398
  %400 = icmp slt i64 %396, %399
  %401 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 1)
  %402 = bitcast i8* %401 to i64*
  %403 = load i64, i64* %402
  %404 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 3)
  %405 = bitcast i8* %404 to i64*
  %406 = load i64, i64* %405
  %407 = icmp slt i64 %403, %406
  %408 = and i1 %400, %407
  %409 = load i2, i2* @PauliI
  %410 = load i2, i2* @PauliZ
  %411 = select i1 %408, i2 %409, i2 %410
  %412 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 1)
  %413 = bitcast i8* %412 to i64*
  %414 = load i64, i64* %413
  %415 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %393, i64 %414)
  %416 = bitcast i8* %415 to i2*
  %417 = load i2, i2* %416
  store i2 %411, i2* %416
  %418 = load %Array*, %Array** %op8
  call void @__quantum__rt__array_remove_access(%Array* %418)
  store %Array* %393, %Array** %op8
  call void @__quantum__rt__array_add_access(%Array* %393)
  call void @__quantum__rt__array_unreference(%Array* %393)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %exit__20
  %419 = load %Array*, %Array** %ops
  %420 = call %Array* @__quantum__rt__array_copy(%Array* %419, i1 false)
  %421 = call i64 @__quantum__rt__array_get_size_1d(%Array* %420)
  %422 = sub i64 %421, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %continue__3
  %423 = phi i64 [ 0, %continue__3 ], [ %428, %exiting__21 ]
  %424 = icmp sle i64 %423, %422
  br i1 %424, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %425 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %420, i64 %423)
  %426 = bitcast i8* %425 to %Array**
  %427 = load %Array*, %Array** %426
  call void @__quantum__rt__array_reference(%Array* %427)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %428 = add i64 %423, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  %429 = load %Array*, %Array** %op8
  call void @__quantum__rt__array_reference(%Array* %429)
  %430 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %420, i64 %iOp6)
  %431 = bitcast i8* %430 to %Array**
  %432 = load %Array*, %Array** %431
  call void @__quantum__rt__array_unreference(%Array* %432)
  store %Array* %429, %Array** %431
  %433 = load %Array*, %Array** %ops
  %434 = call i64 @__quantum__rt__array_get_size_1d(%Array* %433)
  %435 = sub i64 %434, 1
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %436 = phi i64 [ 0, %exit__21 ], [ %441, %exiting__22 ]
  %437 = icmp sle i64 %436, %435
  br i1 %437, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %438 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %433, i64 %436)
  %439 = bitcast i8* %438 to %Array**
  %440 = load %Array*, %Array** %439
  call void @__quantum__rt__array_remove_access(%Array* %440)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %441 = add i64 %436, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_remove_access(%Array* %433)
  store %Array* %420, %Array** %ops
  %442 = sub i64 %421, 1
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %443 = phi i64 [ 0, %exit__22 ], [ %448, %exiting__23 ]
  %444 = icmp sle i64 %443, %442
  br i1 %444, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %445 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %420, i64 %443)
  %446 = bitcast i8* %445 to %Array**
  %447 = load %Array*, %Array** %446
  call void @__quantum__rt__array_add_access(%Array* %447)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %448 = add i64 %443, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_add_access(%Array* %420)
  %449 = load %Array*, %Array** %compactOp7
  call void @__quantum__rt__array_remove_access(%Array* %449)
  %450 = load %Array*, %Array** %op8
  call void @__quantum__rt__array_remove_access(%Array* %450)
  call void @__quantum__rt__array_unreference(%Array* %341)
  call void @__quantum__rt__array_unreference(%Array* %344)
  call void @__quantum__rt__array_unreference(%Array* %357)
  %451 = sub i64 %421, 1
  br label %header__24

header__24:                                       ; preds = %exiting__24, %exit__23
  %452 = phi i64 [ 0, %exit__23 ], [ %457, %exiting__24 ]
  %453 = icmp sle i64 %452, %451
  br i1 %453, label %body__24, label %exit__24

body__24:                                         ; preds = %header__24
  %454 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %420, i64 %452)
  %455 = bitcast i8* %454 to %Array**
  %456 = load %Array*, %Array** %455
  call void @__quantum__rt__array_unreference(%Array* %456)
  br label %exiting__24

exiting__24:                                      ; preds = %body__24
  %457 = add i64 %452, 1
  br label %header__24

exit__24:                                         ; preds = %header__24
  call void @__quantum__rt__array_unreference(%Array* %420)
  br label %exiting__19

header__25:                                       ; preds = %exiting__25, %exit__19
  %458 = phi i64 [ 0, %exit__19 ], [ %463, %exiting__25 ]
  %459 = icmp sle i64 %458, 1
  br i1 %459, label %body__25, label %exit__25

body__25:                                         ; preds = %header__25
  %460 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps5, i64 %458)
  %461 = bitcast i8* %460 to %Array**
  %462 = load %Array*, %Array** %461
  call void @__quantum__rt__array_remove_access(%Array* %462)
  br label %exiting__25

exiting__25:                                      ; preds = %body__25
  %463 = add i64 %458, 1
  br label %header__25

exit__25:                                         ; preds = %header__25
  call void @__quantum__rt__array_remove_access(%Array* %compactOps5)
  br label %header__26

header__26:                                       ; preds = %exiting__26, %exit__25
  %464 = phi i64 [ 0, %exit__25 ], [ %469, %exiting__26 ]
  %465 = icmp sle i64 %464, 1
  br i1 %465, label %body__26, label %exit__26

body__26:                                         ; preds = %header__26
  %466 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %compactOps5, i64 %464)
  %467 = bitcast i8* %466 to %Array**
  %468 = load %Array*, %Array** %467
  call void @__quantum__rt__array_unreference(%Array* %468)
  br label %exiting__26

exiting__26:                                      ; preds = %body__26
  %469 = add i64 %464, 1
  br label %header__26

exit__26:                                         ; preds = %header__26
  call void @__quantum__rt__array_unreference(%Array* %compactOps5)
  br label %continue__2

header__27:                                       ; preds = %exiting__27, %continue__2
  %470 = phi i64 [ 0, %continue__2 ], [ %475, %exiting__27 ]
  %471 = icmp sle i64 %470, %159
  br i1 %471, label %body__27, label %exit__27

body__27:                                         ; preds = %header__27
  %472 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %157, i64 %470)
  %473 = bitcast i8* %472 to %Array**
  %474 = load %Array*, %Array** %473
  call void @__quantum__rt__array_reference(%Array* %474)
  br label %exiting__27

exiting__27:                                      ; preds = %body__27
  %475 = add i64 %470, 1
  br label %header__27

exit__27:                                         ; preds = %header__27
  call void @__quantum__rt__array_reference(%Array* %157)
  call void @__quantum__rt__array_remove_access(%Array* %indices)
  %476 = sub i64 %158, 1
  br label %header__28

header__28:                                       ; preds = %exiting__28, %exit__27
  %477 = phi i64 [ 0, %exit__27 ], [ %482, %exiting__28 ]
  %478 = icmp sle i64 %477, %476
  br i1 %478, label %body__28, label %exit__28

body__28:                                         ; preds = %header__28
  %479 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %157, i64 %477)
  %480 = bitcast i8* %479 to %Array**
  %481 = load %Array*, %Array** %480
  call void @__quantum__rt__array_remove_access(%Array* %481)
  br label %exiting__28

exiting__28:                                      ; preds = %body__28
  %482 = add i64 %477, 1
  br label %header__28

exit__28:                                         ; preds = %header__28
  call void @__quantum__rt__array_remove_access(%Array* %157)
  %483 = sub i64 %2, 1
  br label %header__29

header__29:                                       ; preds = %exiting__29, %exit__28
  %484 = phi i64 [ 0, %exit__28 ], [ %489, %exiting__29 ]
  %485 = icmp sle i64 %484, %483
  br i1 %485, label %body__29, label %exit__29

body__29:                                         ; preds = %header__29
  %486 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %484)
  %487 = bitcast i8* %486 to %Array**
  %488 = load %Array*, %Array** %487
  call void @__quantum__rt__array_unreference(%Array* %488)
  br label %exiting__29

exiting__29:                                      ; preds = %body__29
  %489 = add i64 %484, 1
  br label %header__29

exit__29:                                         ; preds = %header__29
  call void @__quantum__rt__array_unreference(%Array* %3)
  ret %Array* %157
}

declare %Array* @__quantum__rt__array_create_1d(i32, i64)

declare %Array* @__quantum__rt__array_copy(%Array*, i1)

declare void @__quantum__rt__array_reference(%Array*)

define %Array* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__Utils__ExpandedCoefficients__body(%Array* %coeff, i64 %termType) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coeff)
  %nCoeffs = alloca i64
  store i64 0, i64* %nCoeffs
  %0 = icmp eq i64 %termType, 2
  br i1 %0, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  store i64 2, i64* %nCoeffs
  br label %continue__1

test1__1:                                         ; preds = %entry
  %1 = icmp eq i64 %termType, 3
  br i1 %1, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  store i64 8, i64* %nCoeffs
  br label %continue__1

else__1:                                          ; preds = %test1__1
  store i64 1, i64* %nCoeffs
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  %2 = load i64, i64* %nCoeffs
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %2)
  %coeffs = alloca %Array*
  store %Array* %3, %Array** %coeffs
  call void @__quantum__rt__array_add_access(%Array* %3)
  %4 = icmp eq i64 %termType, 0
  %5 = icmp eq i64 %termType, 1
  %6 = or i1 %4, %5
  br i1 %6, label %then0__2, label %test1__2

then0__2:                                         ; preds = %continue__1
  %7 = call %Array* @__quantum__rt__array_copy(%Array* %3, i1 false)
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %9 = bitcast i8* %8 to double*
  %10 = load double, double* %9
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12
  store double %10, double* %12
  call void @__quantum__rt__array_remove_access(%Array* %3)
  store %Array* %7, %Array** %coeffs
  call void @__quantum__rt__array_add_access(%Array* %7)
  call void @__quantum__rt__array_unreference(%Array* %7)
  br label %continue__2

test1__2:                                         ; preds = %continue__1
  %14 = icmp eq i64 %termType, 2
  %15 = icmp eq i64 %termType, 3
  %16 = or i1 %14, %15
  br i1 %16, label %then1__2, label %continue__2

then1__2:                                         ; preds = %test1__2
  %17 = sub i64 %2, 1
  br label %header__1

continue__2:                                      ; preds = %exit__1, %test1__2, %then0__2
  %18 = load %Array*, %Array** %coeffs
  call void @__quantum__rt__array_reference(%Array* %18)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__array_remove_access(%Array* %18)
  call void @__quantum__rt__array_unreference(%Array* %3)
  ret %Array* %18

header__1:                                        ; preds = %exiting__1, %then1__2
  %i = phi i64 [ 0, %then1__2 ], [ %32, %exiting__1 ]
  %19 = icmp sge i64 %i, %17
  %20 = icmp sle i64 %i, %17
  %21 = select i1 true, i1 %20, i1 %19
  br i1 %21, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %22 = load %Array*, %Array** %coeffs
  %23 = call %Array* @__quantum__rt__array_copy(%Array* %22, i1 false)
  %24 = udiv i64 %i, 2
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 %24)
  %26 = bitcast i8* %25 to double*
  %27 = load double, double* %26
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %i)
  %29 = bitcast i8* %28 to double*
  %30 = load double, double* %29
  store double %27, double* %29
  %31 = load %Array*, %Array** %coeffs
  call void @__quantum__rt__array_remove_access(%Array* %31)
  store %Array* %23, %Array** %coeffs
  call void @__quantum__rt__array_add_access(%Array* %23)
  call void @__quantum__rt__array_unreference(%Array* %23)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %32 = add i64 %i, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  br label %continue__2
}

define double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__VariationalQuantumEigensolver__EstimateEnergy__body(i64 %nQubits, { %Array*, %Array*, %Array*, %Array* }* %hamiltonianTermList, { i64, %Array* }* %inputState, double %energyOffset, i64 %nSamples) {
entry:
  %0 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonianTermList, i64 0, i32 0
  %ZData = load %Array*, %Array** %0
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ZData)
  %2 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %3)
  %6 = bitcast i8* %5 to { %Array*, %Array* }**
  %7 = load { %Array*, %Array* }*, { %Array*, %Array* }** %6
  %8 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 0
  %9 = load %Array*, %Array** %8
  call void @__quantum__rt__array_add_access(%Array* %9)
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %11)
  %12 = bitcast { %Array*, %Array* }* %7 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %12)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %ZData)
  %14 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonianTermList, i64 0, i32 1
  %ZZData = load %Array*, %Array** %14
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ZZData)
  %16 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %17)
  %20 = bitcast i8* %19 to { %Array*, %Array* }**
  %21 = load { %Array*, %Array* }*, { %Array*, %Array* }** %20
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 0
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_add_access(%Array* %23)
  %24 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 1
  %25 = load %Array*, %Array** %24
  call void @__quantum__rt__array_add_access(%Array* %25)
  %26 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %26)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %ZZData)
  %28 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonianTermList, i64 0, i32 2
  %PQandPQQRData = load %Array*, %Array** %28
  %29 = call i64 @__quantum__rt__array_get_size_1d(%Array* %PQandPQQRData)
  %30 = sub i64 %29, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %31 = phi i64 [ 0, %exit__2 ], [ %41, %exiting__3 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %31)
  %34 = bitcast i8* %33 to { %Array*, %Array* }**
  %35 = load { %Array*, %Array* }*, { %Array*, %Array* }** %34
  %36 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %35, i64 0, i32 0
  %37 = load %Array*, %Array** %36
  call void @__quantum__rt__array_add_access(%Array* %37)
  %38 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %35, i64 0, i32 1
  %39 = load %Array*, %Array** %38
  call void @__quantum__rt__array_add_access(%Array* %39)
  %40 = bitcast { %Array*, %Array* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %40)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %41 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_add_access(%Array* %PQandPQQRData)
  %42 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonianTermList, i64 0, i32 3
  %h0123Data = load %Array*, %Array** %42
  %43 = call i64 @__quantum__rt__array_get_size_1d(%Array* %h0123Data)
  %44 = sub i64 %43, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %45 = phi i64 [ 0, %exit__3 ], [ %55, %exiting__4 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %45)
  %48 = bitcast i8* %47 to { %Array*, %Array* }**
  %49 = load { %Array*, %Array* }*, { %Array*, %Array* }** %48
  %50 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %49, i64 0, i32 0
  %51 = load %Array*, %Array** %50
  call void @__quantum__rt__array_add_access(%Array* %51)
  %52 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %49, i64 0, i32 1
  %53 = load %Array*, %Array** %52
  call void @__quantum__rt__array_add_access(%Array* %53)
  %54 = bitcast { %Array*, %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %54)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %55 = add i64 %45, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_add_access(%Array* %h0123Data)
  %56 = bitcast { %Array*, %Array*, %Array*, %Array* }* %hamiltonianTermList to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %56)
  %57 = getelementptr { i64, %Array* }, { i64, %Array* }* %inputState, i64 0, i32 1
  %inputStateTerms = load %Array*, %Array** %57
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %inputStateTerms)
  %59 = sub i64 %58, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %60 = phi i64 [ 0, %exit__4 ], [ %71, %exiting__5 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputStateTerms, i64 %60)
  %63 = bitcast i8* %62 to { { double, double }*, %Array* }**
  %64 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %63
  %65 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %64, i64 0, i32 0
  %66 = load { double, double }*, { double, double }** %65
  %67 = bitcast { double, double }* %66 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %67)
  %68 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %64, i64 0, i32 1
  %69 = load %Array*, %Array** %68
  call void @__quantum__rt__array_add_access(%Array* %69)
  %70 = bitcast { { double, double }*, %Array* }* %64 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %70)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %71 = add i64 %60, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_add_access(%Array* %inputStateTerms)
  %72 = bitcast { i64, %Array* }* %inputState to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %72)
  %energy = alloca double
  store double 0.000000e+00, double* %energy
  %73 = getelementptr { i64, %Array* }, { i64, %Array* }* %inputState, i64 0, i32 0
  %inputStateType = load i64, i64* %73
  %74 = sub i64 %58, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %75 = phi i64 [ 0, %exit__5 ], [ %86, %exiting__6 ]
  %76 = icmp sle i64 %75, %74
  br i1 %76, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputStateTerms, i64 %75)
  %78 = bitcast i8* %77 to { { double, double }*, %Array* }**
  %79 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %78
  %80 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %79, i64 0, i32 0
  %81 = load { double, double }*, { double, double }** %80
  %82 = bitcast { double, double }* %81 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %82)
  %83 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %79, i64 0, i32 1
  %84 = load %Array*, %Array** %83
  call void @__quantum__rt__array_add_access(%Array* %84)
  %85 = bitcast { { double, double }*, %Array* }* %79 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %85)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %86 = add i64 %75, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_add_access(%Array* %inputStateTerms)
  %87 = sub i64 %1, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %88 = phi i64 [ 0, %exit__6 ], [ %98, %exiting__7 ]
  %89 = icmp sle i64 %88, %87
  br i1 %89, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %88)
  %91 = bitcast i8* %90 to { %Array*, %Array* }**
  %92 = load { %Array*, %Array* }*, { %Array*, %Array* }** %91
  %93 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %92, i64 0, i32 0
  %94 = load %Array*, %Array** %93
  call void @__quantum__rt__array_add_access(%Array* %94)
  %95 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %92, i64 0, i32 1
  %96 = load %Array*, %Array** %95
  call void @__quantum__rt__array_add_access(%Array* %96)
  %97 = bitcast { %Array*, %Array* }* %92 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %97)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %98 = add i64 %88, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_add_access(%Array* %ZData)
  %99 = sub i64 %15, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %100 = phi i64 [ 0, %exit__7 ], [ %110, %exiting__8 ]
  %101 = icmp sle i64 %100, %99
  br i1 %101, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %100)
  %103 = bitcast i8* %102 to { %Array*, %Array* }**
  %104 = load { %Array*, %Array* }*, { %Array*, %Array* }** %103
  %105 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %104, i64 0, i32 0
  %106 = load %Array*, %Array** %105
  call void @__quantum__rt__array_add_access(%Array* %106)
  %107 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %104, i64 0, i32 1
  %108 = load %Array*, %Array** %107
  call void @__quantum__rt__array_add_access(%Array* %108)
  %109 = bitcast { %Array*, %Array* }* %104 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %109)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %110 = add i64 %100, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_add_access(%Array* %ZZData)
  %111 = sub i64 %29, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %112 = phi i64 [ 0, %exit__8 ], [ %122, %exiting__9 ]
  %113 = icmp sle i64 %112, %111
  br i1 %113, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %112)
  %115 = bitcast i8* %114 to { %Array*, %Array* }**
  %116 = load { %Array*, %Array* }*, { %Array*, %Array* }** %115
  %117 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %116, i64 0, i32 0
  %118 = load %Array*, %Array** %117
  call void @__quantum__rt__array_add_access(%Array* %118)
  %119 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %116, i64 0, i32 1
  %120 = load %Array*, %Array** %119
  call void @__quantum__rt__array_add_access(%Array* %120)
  %121 = bitcast { %Array*, %Array* }* %116 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %121)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %122 = add i64 %112, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_add_access(%Array* %PQandPQQRData)
  %123 = sub i64 %43, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %124 = phi i64 [ 0, %exit__9 ], [ %134, %exiting__10 ]
  %125 = icmp sle i64 %124, %123
  br i1 %125, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %126 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %124)
  %127 = bitcast i8* %126 to { %Array*, %Array* }**
  %128 = load { %Array*, %Array* }*, { %Array*, %Array* }** %127
  %129 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %128, i64 0, i32 0
  %130 = load %Array*, %Array** %129
  call void @__quantum__rt__array_add_access(%Array* %130)
  %131 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %128, i64 0, i32 1
  %132 = load %Array*, %Array** %131
  call void @__quantum__rt__array_add_access(%Array* %132)
  %133 = bitcast { %Array*, %Array* }* %128 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %133)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %134 = add i64 %124, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_add_access(%Array* %h0123Data)
  %hamiltonianTermArray = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 0)
  %136 = bitcast i8* %135 to %Array**
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 1)
  %138 = bitcast i8* %137 to %Array**
  %139 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 2)
  %140 = bitcast i8* %139 to %Array**
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 3)
  %142 = bitcast i8* %141 to %Array**
  %143 = sub i64 %1, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %144 = phi i64 [ 0, %exit__10 ], [ %154, %exiting__11 ]
  %145 = icmp sle i64 %144, %143
  br i1 %145, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %144)
  %147 = bitcast i8* %146 to { %Array*, %Array* }**
  %148 = load { %Array*, %Array* }*, { %Array*, %Array* }** %147
  %149 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %148, i64 0, i32 0
  %150 = load %Array*, %Array** %149
  call void @__quantum__rt__array_reference(%Array* %150)
  %151 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %148, i64 0, i32 1
  %152 = load %Array*, %Array** %151
  call void @__quantum__rt__array_reference(%Array* %152)
  %153 = bitcast { %Array*, %Array* }* %148 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %153)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %154 = add i64 %144, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_reference(%Array* %ZData)
  %155 = sub i64 %15, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %156 = phi i64 [ 0, %exit__11 ], [ %166, %exiting__12 ]
  %157 = icmp sle i64 %156, %155
  br i1 %157, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %158 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %156)
  %159 = bitcast i8* %158 to { %Array*, %Array* }**
  %160 = load { %Array*, %Array* }*, { %Array*, %Array* }** %159
  %161 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %160, i64 0, i32 0
  %162 = load %Array*, %Array** %161
  call void @__quantum__rt__array_reference(%Array* %162)
  %163 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %160, i64 0, i32 1
  %164 = load %Array*, %Array** %163
  call void @__quantum__rt__array_reference(%Array* %164)
  %165 = bitcast { %Array*, %Array* }* %160 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %165)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %166 = add i64 %156, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_reference(%Array* %ZZData)
  %167 = sub i64 %29, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %168 = phi i64 [ 0, %exit__12 ], [ %178, %exiting__13 ]
  %169 = icmp sle i64 %168, %167
  br i1 %169, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %170 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %168)
  %171 = bitcast i8* %170 to { %Array*, %Array* }**
  %172 = load { %Array*, %Array* }*, { %Array*, %Array* }** %171
  %173 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %172, i64 0, i32 0
  %174 = load %Array*, %Array** %173
  call void @__quantum__rt__array_reference(%Array* %174)
  %175 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %172, i64 0, i32 1
  %176 = load %Array*, %Array** %175
  call void @__quantum__rt__array_reference(%Array* %176)
  %177 = bitcast { %Array*, %Array* }* %172 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %177)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %178 = add i64 %168, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_reference(%Array* %PQandPQQRData)
  %179 = sub i64 %43, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %180 = phi i64 [ 0, %exit__13 ], [ %190, %exiting__14 ]
  %181 = icmp sle i64 %180, %179
  br i1 %181, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %182 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %180)
  %183 = bitcast i8* %182 to { %Array*, %Array* }**
  %184 = load { %Array*, %Array* }*, { %Array*, %Array* }** %183
  %185 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %184, i64 0, i32 0
  %186 = load %Array*, %Array** %185
  call void @__quantum__rt__array_reference(%Array* %186)
  %187 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %184, i64 0, i32 1
  %188 = load %Array*, %Array** %187
  call void @__quantum__rt__array_reference(%Array* %188)
  %189 = bitcast { %Array*, %Array* }* %184 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %189)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %190 = add i64 %180, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_reference(%Array* %h0123Data)
  store %Array* %ZData, %Array** %136
  store %Array* %ZZData, %Array** %138
  store %Array* %PQandPQQRData, %Array** %140
  store %Array* %h0123Data, %Array** %142
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %191 = phi i64 [ 0, %exit__14 ], [ %198, %exiting__15 ]
  %192 = icmp sle i64 %191, 3
  br i1 %192, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %193 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 %191)
  %194 = bitcast i8* %193 to %Array**
  %195 = load %Array*, %Array** %194
  %196 = call i64 @__quantum__rt__array_get_size_1d(%Array* %195)
  %197 = sub i64 %196, 1
  br label %header__16

exiting__15:                                      ; preds = %exit__16
  %198 = add i64 %191, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_add_access(%Array* %hamiltonianTermArray)
  %199 = add i64 %1, %15
  %200 = add i64 %199, %29
  %nTerms = add i64 %200, %43
  br label %header__17

header__16:                                       ; preds = %exiting__16, %body__15
  %201 = phi i64 [ 0, %body__15 ], [ %211, %exiting__16 ]
  %202 = icmp sle i64 %201, %197
  br i1 %202, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %203 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %195, i64 %201)
  %204 = bitcast i8* %203 to { %Array*, %Array* }**
  %205 = load { %Array*, %Array* }*, { %Array*, %Array* }** %204
  %206 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %205, i64 0, i32 0
  %207 = load %Array*, %Array** %206
  call void @__quantum__rt__array_add_access(%Array* %207)
  %208 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %205, i64 0, i32 1
  %209 = load %Array*, %Array** %208
  call void @__quantum__rt__array_add_access(%Array* %209)
  %210 = bitcast { %Array*, %Array* }* %205 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %210)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %211 = add i64 %201, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_add_access(%Array* %195)
  br label %exiting__15

header__17:                                       ; preds = %exiting__17, %exit__15
  %termType = phi i64 [ 0, %exit__15 ], [ %219, %exiting__17 ]
  %212 = icmp sge i64 %termType, 3
  %213 = icmp sle i64 %termType, 3
  %214 = select i1 true, i1 %213, i1 %212
  br i1 %214, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %215 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 %termType)
  %216 = bitcast i8* %215 to %Array**
  %hamiltonianTerms = load %Array*, %Array** %216
  %217 = call i64 @__quantum__rt__array_get_size_1d(%Array* %hamiltonianTerms)
  %218 = sub i64 %217, 1
  br label %header__18

exiting__17:                                      ; preds = %exit__23
  %219 = add i64 %termType, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  %220 = load double, double* %energy
  %221 = sub i64 %1, 1
  br label %header__24

header__18:                                       ; preds = %exiting__18, %body__17
  %222 = phi i64 [ 0, %body__17 ], [ %232, %exiting__18 ]
  %223 = icmp sle i64 %222, %218
  br i1 %223, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %224 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTerms, i64 %222)
  %225 = bitcast i8* %224 to { %Array*, %Array* }**
  %226 = load { %Array*, %Array* }*, { %Array*, %Array* }** %225
  %227 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %226, i64 0, i32 0
  %228 = load %Array*, %Array** %227
  call void @__quantum__rt__array_add_access(%Array* %228)
  %229 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %226, i64 0, i32 1
  %230 = load %Array*, %Array** %229
  call void @__quantum__rt__array_add_access(%Array* %230)
  %231 = bitcast { %Array*, %Array* }* %226 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %231)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %232 = add i64 %222, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_add_access(%Array* %hamiltonianTerms)
  %233 = sub i64 %217, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %234 = phi i64 [ 0, %exit__18 ], [ %245, %exiting__19 ]
  %235 = icmp sle i64 %234, %233
  br i1 %235, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %236 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTerms, i64 %234)
  %237 = bitcast i8* %236 to { %Array*, %Array* }**
  %hamiltonianTerm = load { %Array*, %Array* }*, { %Array*, %Array* }** %237
  %238 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %hamiltonianTerm, i64 0, i32 0
  %239 = load %Array*, %Array** %238
  call void @__quantum__rt__array_add_access(%Array* %239)
  %240 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %hamiltonianTerm, i64 0, i32 1
  %241 = load %Array*, %Array** %240
  call void @__quantum__rt__array_add_access(%Array* %241)
  %242 = bitcast { %Array*, %Array* }* %hamiltonianTerm to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %242)
  %qubitIndices = load %Array*, %Array** %238
  call void @__quantum__rt__array_add_access(%Array* %qubitIndices)
  %coefficient = load %Array*, %Array** %240
  call void @__quantum__rt__array_add_access(%Array* %coefficient)
  %measOps = call %Array* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__Utils__VQEMeasurementOperators__body(i64 %nQubits, %Array* %qubitIndices, i64 %termType)
  %243 = call i64 @__quantum__rt__array_get_size_1d(%Array* %measOps)
  %244 = sub i64 %243, 1
  br label %header__20

exiting__19:                                      ; preds = %exit__22
  %245 = add i64 %234, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  %246 = sub i64 %217, 1
  br label %header__23

header__20:                                       ; preds = %exiting__20, %body__19
  %247 = phi i64 [ 0, %body__19 ], [ %252, %exiting__20 ]
  %248 = icmp sle i64 %247, %244
  br i1 %248, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %249 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %measOps, i64 %247)
  %250 = bitcast i8* %249 to %Array**
  %251 = load %Array*, %Array** %250
  call void @__quantum__rt__array_add_access(%Array* %251)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %252 = add i64 %247, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_add_access(%Array* %measOps)
  %coefficients = call %Array* @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__Utils__ExpandedCoefficients__body(%Array* %coefficient, i64 %termType)
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %jwTermEnergy = call double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__EstimateEnergy__SumTermExpectation__body({ i64, %Array* }* %inputState, %Array* %measOps, %Array* %coefficients, i64 %nQubits, i64 %nSamples)
  %253 = load double, double* %energy
  %254 = fadd double %253, %jwTermEnergy
  store double %254, double* %energy
  %255 = load %Array*, %Array** %238
  call void @__quantum__rt__array_remove_access(%Array* %255)
  %256 = load %Array*, %Array** %240
  call void @__quantum__rt__array_remove_access(%Array* %256)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %242)
  call void @__quantum__rt__array_remove_access(%Array* %qubitIndices)
  call void @__quantum__rt__array_remove_access(%Array* %coefficient)
  %257 = sub i64 %243, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %258 = phi i64 [ 0, %exit__20 ], [ %263, %exiting__21 ]
  %259 = icmp sle i64 %258, %257
  br i1 %259, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %260 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %measOps, i64 %258)
  %261 = bitcast i8* %260 to %Array**
  %262 = load %Array*, %Array** %261
  call void @__quantum__rt__array_remove_access(%Array* %262)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %263 = add i64 %258, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_remove_access(%Array* %measOps)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  %264 = sub i64 %243, 1
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %265 = phi i64 [ 0, %exit__21 ], [ %270, %exiting__22 ]
  %266 = icmp sle i64 %265, %264
  br i1 %266, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %267 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %measOps, i64 %265)
  %268 = bitcast i8* %267 to %Array**
  %269 = load %Array*, %Array** %268
  call void @__quantum__rt__array_unreference(%Array* %269)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %270 = add i64 %265, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_unreference(%Array* %measOps)
  call void @__quantum__rt__array_unreference(%Array* %coefficients)
  br label %exiting__19

header__23:                                       ; preds = %exiting__23, %exit__19
  %271 = phi i64 [ 0, %exit__19 ], [ %281, %exiting__23 ]
  %272 = icmp sle i64 %271, %246
  br i1 %272, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %273 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTerms, i64 %271)
  %274 = bitcast i8* %273 to { %Array*, %Array* }**
  %275 = load { %Array*, %Array* }*, { %Array*, %Array* }** %274
  %276 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %275, i64 0, i32 0
  %277 = load %Array*, %Array** %276
  call void @__quantum__rt__array_remove_access(%Array* %277)
  %278 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %275, i64 0, i32 1
  %279 = load %Array*, %Array** %278
  call void @__quantum__rt__array_remove_access(%Array* %279)
  %280 = bitcast { %Array*, %Array* }* %275 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %280)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %281 = add i64 %271, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_remove_access(%Array* %hamiltonianTerms)
  br label %exiting__17

header__24:                                       ; preds = %exiting__24, %exit__17
  %282 = phi i64 [ 0, %exit__17 ], [ %292, %exiting__24 ]
  %283 = icmp sle i64 %282, %221
  br i1 %283, label %body__24, label %exit__24

body__24:                                         ; preds = %header__24
  %284 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %282)
  %285 = bitcast i8* %284 to { %Array*, %Array* }**
  %286 = load { %Array*, %Array* }*, { %Array*, %Array* }** %285
  %287 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %286, i64 0, i32 0
  %288 = load %Array*, %Array** %287
  call void @__quantum__rt__array_remove_access(%Array* %288)
  %289 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %286, i64 0, i32 1
  %290 = load %Array*, %Array** %289
  call void @__quantum__rt__array_remove_access(%Array* %290)
  %291 = bitcast { %Array*, %Array* }* %286 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %291)
  br label %exiting__24

exiting__24:                                      ; preds = %body__24
  %292 = add i64 %282, 1
  br label %header__24

exit__24:                                         ; preds = %header__24
  call void @__quantum__rt__array_remove_access(%Array* %ZData)
  %293 = sub i64 %15, 1
  br label %header__25

header__25:                                       ; preds = %exiting__25, %exit__24
  %294 = phi i64 [ 0, %exit__24 ], [ %304, %exiting__25 ]
  %295 = icmp sle i64 %294, %293
  br i1 %295, label %body__25, label %exit__25

body__25:                                         ; preds = %header__25
  %296 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %294)
  %297 = bitcast i8* %296 to { %Array*, %Array* }**
  %298 = load { %Array*, %Array* }*, { %Array*, %Array* }** %297
  %299 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %298, i64 0, i32 0
  %300 = load %Array*, %Array** %299
  call void @__quantum__rt__array_remove_access(%Array* %300)
  %301 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %298, i64 0, i32 1
  %302 = load %Array*, %Array** %301
  call void @__quantum__rt__array_remove_access(%Array* %302)
  %303 = bitcast { %Array*, %Array* }* %298 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %303)
  br label %exiting__25

exiting__25:                                      ; preds = %body__25
  %304 = add i64 %294, 1
  br label %header__25

exit__25:                                         ; preds = %header__25
  call void @__quantum__rt__array_remove_access(%Array* %ZZData)
  %305 = sub i64 %29, 1
  br label %header__26

header__26:                                       ; preds = %exiting__26, %exit__25
  %306 = phi i64 [ 0, %exit__25 ], [ %316, %exiting__26 ]
  %307 = icmp sle i64 %306, %305
  br i1 %307, label %body__26, label %exit__26

body__26:                                         ; preds = %header__26
  %308 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %306)
  %309 = bitcast i8* %308 to { %Array*, %Array* }**
  %310 = load { %Array*, %Array* }*, { %Array*, %Array* }** %309
  %311 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %310, i64 0, i32 0
  %312 = load %Array*, %Array** %311
  call void @__quantum__rt__array_remove_access(%Array* %312)
  %313 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %310, i64 0, i32 1
  %314 = load %Array*, %Array** %313
  call void @__quantum__rt__array_remove_access(%Array* %314)
  %315 = bitcast { %Array*, %Array* }* %310 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %315)
  br label %exiting__26

exiting__26:                                      ; preds = %body__26
  %316 = add i64 %306, 1
  br label %header__26

exit__26:                                         ; preds = %header__26
  call void @__quantum__rt__array_remove_access(%Array* %PQandPQQRData)
  %317 = sub i64 %43, 1
  br label %header__27

header__27:                                       ; preds = %exiting__27, %exit__26
  %318 = phi i64 [ 0, %exit__26 ], [ %328, %exiting__27 ]
  %319 = icmp sle i64 %318, %317
  br i1 %319, label %body__27, label %exit__27

body__27:                                         ; preds = %header__27
  %320 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %318)
  %321 = bitcast i8* %320 to { %Array*, %Array* }**
  %322 = load { %Array*, %Array* }*, { %Array*, %Array* }** %321
  %323 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %322, i64 0, i32 0
  %324 = load %Array*, %Array** %323
  call void @__quantum__rt__array_remove_access(%Array* %324)
  %325 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %322, i64 0, i32 1
  %326 = load %Array*, %Array** %325
  call void @__quantum__rt__array_remove_access(%Array* %326)
  %327 = bitcast { %Array*, %Array* }* %322 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %327)
  br label %exiting__27

exiting__27:                                      ; preds = %body__27
  %328 = add i64 %318, 1
  br label %header__27

exit__27:                                         ; preds = %header__27
  call void @__quantum__rt__array_remove_access(%Array* %h0123Data)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %56)
  %329 = sub i64 %58, 1
  br label %header__28

header__28:                                       ; preds = %exiting__28, %exit__27
  %330 = phi i64 [ 0, %exit__27 ], [ %341, %exiting__28 ]
  %331 = icmp sle i64 %330, %329
  br i1 %331, label %body__28, label %exit__28

body__28:                                         ; preds = %header__28
  %332 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputStateTerms, i64 %330)
  %333 = bitcast i8* %332 to { { double, double }*, %Array* }**
  %334 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %333
  %335 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %334, i64 0, i32 0
  %336 = load { double, double }*, { double, double }** %335
  %337 = bitcast { double, double }* %336 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %337)
  %338 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %334, i64 0, i32 1
  %339 = load %Array*, %Array** %338
  call void @__quantum__rt__array_remove_access(%Array* %339)
  %340 = bitcast { { double, double }*, %Array* }* %334 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %340)
  br label %exiting__28

exiting__28:                                      ; preds = %body__28
  %341 = add i64 %330, 1
  br label %header__28

exit__28:                                         ; preds = %header__28
  call void @__quantum__rt__array_remove_access(%Array* %inputStateTerms)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %72)
  %342 = sub i64 %58, 1
  br label %header__29

header__29:                                       ; preds = %exiting__29, %exit__28
  %343 = phi i64 [ 0, %exit__28 ], [ %354, %exiting__29 ]
  %344 = icmp sle i64 %343, %342
  br i1 %344, label %body__29, label %exit__29

body__29:                                         ; preds = %header__29
  %345 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputStateTerms, i64 %343)
  %346 = bitcast i8* %345 to { { double, double }*, %Array* }**
  %347 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %346
  %348 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %347, i64 0, i32 0
  %349 = load { double, double }*, { double, double }** %348
  %350 = bitcast { double, double }* %349 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %350)
  %351 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %347, i64 0, i32 1
  %352 = load %Array*, %Array** %351
  call void @__quantum__rt__array_remove_access(%Array* %352)
  %353 = bitcast { { double, double }*, %Array* }* %347 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %353)
  br label %exiting__29

exiting__29:                                      ; preds = %body__29
  %354 = add i64 %343, 1
  br label %header__29

exit__29:                                         ; preds = %header__29
  call void @__quantum__rt__array_remove_access(%Array* %inputStateTerms)
  %355 = sub i64 %1, 1
  br label %header__30

header__30:                                       ; preds = %exiting__30, %exit__29
  %356 = phi i64 [ 0, %exit__29 ], [ %366, %exiting__30 ]
  %357 = icmp sle i64 %356, %355
  br i1 %357, label %body__30, label %exit__30

body__30:                                         ; preds = %header__30
  %358 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %356)
  %359 = bitcast i8* %358 to { %Array*, %Array* }**
  %360 = load { %Array*, %Array* }*, { %Array*, %Array* }** %359
  %361 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %360, i64 0, i32 0
  %362 = load %Array*, %Array** %361
  call void @__quantum__rt__array_remove_access(%Array* %362)
  %363 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %360, i64 0, i32 1
  %364 = load %Array*, %Array** %363
  call void @__quantum__rt__array_remove_access(%Array* %364)
  %365 = bitcast { %Array*, %Array* }* %360 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %365)
  br label %exiting__30

exiting__30:                                      ; preds = %body__30
  %366 = add i64 %356, 1
  br label %header__30

exit__30:                                         ; preds = %header__30
  call void @__quantum__rt__array_remove_access(%Array* %ZData)
  %367 = sub i64 %15, 1
  br label %header__31

header__31:                                       ; preds = %exiting__31, %exit__30
  %368 = phi i64 [ 0, %exit__30 ], [ %378, %exiting__31 ]
  %369 = icmp sle i64 %368, %367
  br i1 %369, label %body__31, label %exit__31

body__31:                                         ; preds = %header__31
  %370 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %368)
  %371 = bitcast i8* %370 to { %Array*, %Array* }**
  %372 = load { %Array*, %Array* }*, { %Array*, %Array* }** %371
  %373 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %372, i64 0, i32 0
  %374 = load %Array*, %Array** %373
  call void @__quantum__rt__array_remove_access(%Array* %374)
  %375 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %372, i64 0, i32 1
  %376 = load %Array*, %Array** %375
  call void @__quantum__rt__array_remove_access(%Array* %376)
  %377 = bitcast { %Array*, %Array* }* %372 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %377)
  br label %exiting__31

exiting__31:                                      ; preds = %body__31
  %378 = add i64 %368, 1
  br label %header__31

exit__31:                                         ; preds = %header__31
  call void @__quantum__rt__array_remove_access(%Array* %ZZData)
  %379 = sub i64 %29, 1
  br label %header__32

header__32:                                       ; preds = %exiting__32, %exit__31
  %380 = phi i64 [ 0, %exit__31 ], [ %390, %exiting__32 ]
  %381 = icmp sle i64 %380, %379
  br i1 %381, label %body__32, label %exit__32

body__32:                                         ; preds = %header__32
  %382 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %380)
  %383 = bitcast i8* %382 to { %Array*, %Array* }**
  %384 = load { %Array*, %Array* }*, { %Array*, %Array* }** %383
  %385 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %384, i64 0, i32 0
  %386 = load %Array*, %Array** %385
  call void @__quantum__rt__array_remove_access(%Array* %386)
  %387 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %384, i64 0, i32 1
  %388 = load %Array*, %Array** %387
  call void @__quantum__rt__array_remove_access(%Array* %388)
  %389 = bitcast { %Array*, %Array* }* %384 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %389)
  br label %exiting__32

exiting__32:                                      ; preds = %body__32
  %390 = add i64 %380, 1
  br label %header__32

exit__32:                                         ; preds = %header__32
  call void @__quantum__rt__array_remove_access(%Array* %PQandPQQRData)
  %391 = sub i64 %43, 1
  br label %header__33

header__33:                                       ; preds = %exiting__33, %exit__32
  %392 = phi i64 [ 0, %exit__32 ], [ %402, %exiting__33 ]
  %393 = icmp sle i64 %392, %391
  br i1 %393, label %body__33, label %exit__33

body__33:                                         ; preds = %header__33
  %394 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %392)
  %395 = bitcast i8* %394 to { %Array*, %Array* }**
  %396 = load { %Array*, %Array* }*, { %Array*, %Array* }** %395
  %397 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %396, i64 0, i32 0
  %398 = load %Array*, %Array** %397
  call void @__quantum__rt__array_remove_access(%Array* %398)
  %399 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %396, i64 0, i32 1
  %400 = load %Array*, %Array** %399
  call void @__quantum__rt__array_remove_access(%Array* %400)
  %401 = bitcast { %Array*, %Array* }* %396 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %401)
  br label %exiting__33

exiting__33:                                      ; preds = %body__33
  %402 = add i64 %392, 1
  br label %header__33

exit__33:                                         ; preds = %header__33
  call void @__quantum__rt__array_remove_access(%Array* %h0123Data)
  br label %header__34

header__34:                                       ; preds = %exiting__34, %exit__33
  %403 = phi i64 [ 0, %exit__33 ], [ %410, %exiting__34 ]
  %404 = icmp sle i64 %403, 3
  br i1 %404, label %body__34, label %exit__34

body__34:                                         ; preds = %header__34
  %405 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 %403)
  %406 = bitcast i8* %405 to %Array**
  %407 = load %Array*, %Array** %406
  %408 = call i64 @__quantum__rt__array_get_size_1d(%Array* %407)
  %409 = sub i64 %408, 1
  br label %header__35

exiting__34:                                      ; preds = %exit__35
  %410 = add i64 %403, 1
  br label %header__34

exit__34:                                         ; preds = %header__34
  call void @__quantum__rt__array_remove_access(%Array* %hamiltonianTermArray)
  br label %header__36

header__35:                                       ; preds = %exiting__35, %body__34
  %411 = phi i64 [ 0, %body__34 ], [ %421, %exiting__35 ]
  %412 = icmp sle i64 %411, %409
  br i1 %412, label %body__35, label %exit__35

body__35:                                         ; preds = %header__35
  %413 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %407, i64 %411)
  %414 = bitcast i8* %413 to { %Array*, %Array* }**
  %415 = load { %Array*, %Array* }*, { %Array*, %Array* }** %414
  %416 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %415, i64 0, i32 0
  %417 = load %Array*, %Array** %416
  call void @__quantum__rt__array_remove_access(%Array* %417)
  %418 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %415, i64 0, i32 1
  %419 = load %Array*, %Array** %418
  call void @__quantum__rt__array_remove_access(%Array* %419)
  %420 = bitcast { %Array*, %Array* }* %415 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %420)
  br label %exiting__35

exiting__35:                                      ; preds = %body__35
  %421 = add i64 %411, 1
  br label %header__35

exit__35:                                         ; preds = %header__35
  call void @__quantum__rt__array_remove_access(%Array* %407)
  br label %exiting__34

header__36:                                       ; preds = %exiting__36, %exit__34
  %422 = phi i64 [ 0, %exit__34 ], [ %429, %exiting__36 ]
  %423 = icmp sle i64 %422, 3
  br i1 %423, label %body__36, label %exit__36

body__36:                                         ; preds = %header__36
  %424 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %hamiltonianTermArray, i64 %422)
  %425 = bitcast i8* %424 to %Array**
  %426 = load %Array*, %Array** %425
  %427 = call i64 @__quantum__rt__array_get_size_1d(%Array* %426)
  %428 = sub i64 %427, 1
  br label %header__37

exiting__36:                                      ; preds = %exit__37
  %429 = add i64 %422, 1
  br label %header__36

exit__36:                                         ; preds = %header__36
  call void @__quantum__rt__array_unreference(%Array* %hamiltonianTermArray)
  ret double %220

header__37:                                       ; preds = %exiting__37, %body__36
  %430 = phi i64 [ 0, %body__36 ], [ %440, %exiting__37 ]
  %431 = icmp sle i64 %430, %428
  br i1 %431, label %body__37, label %exit__37

body__37:                                         ; preds = %header__37
  %432 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %426, i64 %430)
  %433 = bitcast i8* %432 to { %Array*, %Array* }**
  %434 = load { %Array*, %Array* }*, { %Array*, %Array* }** %433
  %435 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %434, i64 0, i32 0
  %436 = load %Array*, %Array** %435
  call void @__quantum__rt__array_unreference(%Array* %436)
  %437 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %434, i64 0, i32 1
  %438 = load %Array*, %Array** %437
  call void @__quantum__rt__array_unreference(%Array* %438)
  %439 = bitcast { %Array*, %Array* }* %434 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %439)
  br label %exiting__37

exiting__37:                                      ; preds = %body__37
  %440 = add i64 %430, 1
  br label %header__37

exit__37:                                         ; preds = %header__37
  call void @__quantum__rt__array_unreference(%Array* %426)
  br label %exiting__36
}

declare void @__quantum__rt__tuple_reference(%Tuple*)

declare void @__quantum__rt__tuple_unreference(%Tuple*)

define double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__GetEnergyHydrogenVQE__body() #0 {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %1 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 0)
  %2 = bitcast i8* %1 to { %Array*, %Array* }**
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 1)
  %4 = bitcast i8* %3 to { %Array*, %Array* }**
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 2)
  %6 = bitcast i8* %5 to { %Array*, %Array* }**
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 3)
  %8 = bitcast i8* %7 to { %Array*, %Array* }**
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 0)
  %11 = bitcast i8* %10 to i64*
  store i64 0, i64* %11
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 0)
  %14 = bitcast i8* %13 to double*
  store double 0x3FC5E9EC780DD8B0, double* %14
  %15 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %9, %Array* %12)
  call void @__quantum__rt__array_unreference(%Array* %9)
  call void @__quantum__rt__array_unreference(%Array* %12)
  %16 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 0)
  %18 = bitcast i8* %17 to i64*
  store i64 1, i64* %18
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 0)
  %21 = bitcast i8* %20 to double*
  store double 0x3FC5E9EC780DD8B0, double* %21
  %22 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %16, %Array* %19)
  call void @__quantum__rt__array_unreference(%Array* %16)
  call void @__quantum__rt__array_unreference(%Array* %19)
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 0)
  %25 = bitcast i8* %24 to i64*
  store i64 2, i64* %25
  %26 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 0)
  %28 = bitcast i8* %27 to double*
  store double 0xBFCC8498CDE41B6A, double* %28
  %29 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %23, %Array* %26)
  call void @__quantum__rt__array_unreference(%Array* %23)
  call void @__quantum__rt__array_unreference(%Array* %26)
  %30 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 0)
  %32 = bitcast i8* %31 to i64*
  store i64 3, i64* %32
  %33 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 0)
  %35 = bitcast i8* %34 to double*
  store double 0xBFCC8498CDE41B6A, double* %35
  %36 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %30, %Array* %33)
  call void @__quantum__rt__array_unreference(%Array* %30)
  call void @__quantum__rt__array_unreference(%Array* %33)
  store { %Array*, %Array* }* %15, { %Array*, %Array* }** %2
  store { %Array*, %Array* }* %22, { %Array*, %Array* }** %4
  store { %Array*, %Array* }* %29, { %Array*, %Array* }** %6
  store { %Array*, %Array* }* %36, { %Array*, %Array* }** %8
  %37 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 6)
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 0)
  %39 = bitcast i8* %38 to { %Array*, %Array* }**
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 1)
  %41 = bitcast i8* %40 to { %Array*, %Array* }**
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 2)
  %43 = bitcast i8* %42 to { %Array*, %Array* }**
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 3)
  %45 = bitcast i8* %44 to { %Array*, %Array* }**
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 4)
  %47 = bitcast i8* %46 to { %Array*, %Array* }**
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 5)
  %49 = bitcast i8* %48 to { %Array*, %Array* }**
  %50 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 0)
  %52 = bitcast i8* %51 to i64*
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 1)
  %54 = bitcast i8* %53 to i64*
  store i64 0, i64* %52
  store i64 1, i64* %54
  %55 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %55, i64 0)
  %57 = bitcast i8* %56 to double*
  store double 0x3FC59572B12B0E54, double* %57
  %58 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %50, %Array* %55)
  call void @__quantum__rt__array_unreference(%Array* %50)
  call void @__quantum__rt__array_unreference(%Array* %55)
  %59 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 0)
  %61 = bitcast i8* %60 to i64*
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 1)
  %63 = bitcast i8* %62 to i64*
  store i64 0, i64* %61
  store i64 2, i64* %63
  %64 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 0)
  %66 = bitcast i8* %65 to double*
  store double 0x3FBEDC1CB9A7B498, double* %66
  %67 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %59, %Array* %64)
  call void @__quantum__rt__array_unreference(%Array* %59)
  call void @__quantum__rt__array_unreference(%Array* %64)
  %68 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 0)
  %70 = bitcast i8* %69 to i64*
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 1)
  %72 = bitcast i8* %71 to i64*
  store i64 0, i64* %70
  store i64 3, i64* %72
  %73 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 0)
  %75 = bitcast i8* %74 to double*
  store double 0x3FC53B29D7F34F20, double* %75
  %76 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %68, %Array* %73)
  call void @__quantum__rt__array_unreference(%Array* %68)
  call void @__quantum__rt__array_unreference(%Array* %73)
  %77 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 0)
  %79 = bitcast i8* %78 to i64*
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 1)
  %81 = bitcast i8* %80 to i64*
  store i64 1, i64* %79
  store i64 2, i64* %81
  %82 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 0)
  %84 = bitcast i8* %83 to double*
  store double 0x3FC53B29D7F34F20, double* %84
  %85 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %77, %Array* %82)
  call void @__quantum__rt__array_unreference(%Array* %77)
  call void @__quantum__rt__array_unreference(%Array* %82)
  %86 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 0)
  %88 = bitcast i8* %87 to i64*
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 1)
  %90 = bitcast i8* %89 to i64*
  store i64 1, i64* %88
  store i64 3, i64* %90
  %91 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 0)
  %93 = bitcast i8* %92 to double*
  store double 0x3FBEDC1CB9A7B498, double* %93
  %94 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %86, %Array* %91)
  call void @__quantum__rt__array_unreference(%Array* %86)
  call void @__quantum__rt__array_unreference(%Array* %91)
  %95 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 0)
  %97 = bitcast i8* %96 to i64*
  %98 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 1)
  %99 = bitcast i8* %98 to i64*
  store i64 2, i64* %97
  store i64 3, i64* %99
  %100 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 0)
  %102 = bitcast i8* %101 to double*
  store double 0x3FC65115A1A7DAFB, double* %102
  %103 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %95, %Array* %100)
  call void @__quantum__rt__array_unreference(%Array* %95)
  call void @__quantum__rt__array_unreference(%Array* %100)
  store { %Array*, %Array* }* %58, { %Array*, %Array* }** %39
  store { %Array*, %Array* }* %67, { %Array*, %Array* }** %41
  store { %Array*, %Array* }* %76, { %Array*, %Array* }** %43
  store { %Array*, %Array* }* %85, { %Array*, %Array* }** %45
  store { %Array*, %Array* }* %94, { %Array*, %Array* }** %47
  store { %Array*, %Array* }* %103, { %Array*, %Array* }** %49
  %104 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %105 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 0)
  %107 = bitcast i8* %106 to { %Array*, %Array* }**
  %108 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 0)
  %110 = bitcast i8* %109 to i64*
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 1)
  %112 = bitcast i8* %111 to i64*
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 2)
  %114 = bitcast i8* %113 to i64*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 3)
  %116 = bitcast i8* %115 to i64*
  store i64 0, i64* %110
  store i64 1, i64* %112
  store i64 2, i64* %114
  store i64 3, i64* %116
  %117 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 0)
  %119 = bitcast i8* %118 to double*
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 1)
  %121 = bitcast i8* %120 to double*
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 2)
  %123 = bitcast i8* %122 to double*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 3)
  %125 = bitcast i8* %124 to double*
  store double 0.000000e+00, double* %119
  store double 0xBFA7346DEC7DD351, double* %121
  store double 0.000000e+00, double* %123
  store double 0x3FA7346DEC7DD351, double* %125
  %126 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %108, %Array* %117)
  call void @__quantum__rt__array_unreference(%Array* %108)
  call void @__quantum__rt__array_unreference(%Array* %117)
  store { %Array*, %Array* }* %126, { %Array*, %Array* }** %107
  %hamiltonian = call { %Array*, %Array*, %Array*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JWOptimizedHTerms__body(%Array* %0, %Array* %37, %Array* %104, %Array* %105)
  %127 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonian, i64 0, i32 0
  %128 = load %Array*, %Array** %127
  %129 = call i64 @__quantum__rt__array_get_size_1d(%Array* %128)
  %130 = sub i64 %129, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %131 = phi i64 [ 0, %entry ], [ %141, %exiting__1 ]
  %132 = icmp sle i64 %131, %130
  br i1 %132, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 %131)
  %134 = bitcast i8* %133 to { %Array*, %Array* }**
  %135 = load { %Array*, %Array* }*, { %Array*, %Array* }** %134
  %136 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %135, i64 0, i32 0
  %137 = load %Array*, %Array** %136
  call void @__quantum__rt__array_add_access(%Array* %137)
  %138 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %135, i64 0, i32 1
  %139 = load %Array*, %Array** %138
  call void @__quantum__rt__array_add_access(%Array* %139)
  %140 = bitcast { %Array*, %Array* }* %135 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %140)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %141 = add i64 %131, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %128)
  %142 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonian, i64 0, i32 1
  %143 = load %Array*, %Array** %142
  %144 = call i64 @__quantum__rt__array_get_size_1d(%Array* %143)
  %145 = sub i64 %144, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %146 = phi i64 [ 0, %exit__1 ], [ %156, %exiting__2 ]
  %147 = icmp sle i64 %146, %145
  br i1 %147, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %143, i64 %146)
  %149 = bitcast i8* %148 to { %Array*, %Array* }**
  %150 = load { %Array*, %Array* }*, { %Array*, %Array* }** %149
  %151 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %150, i64 0, i32 0
  %152 = load %Array*, %Array** %151
  call void @__quantum__rt__array_add_access(%Array* %152)
  %153 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %150, i64 0, i32 1
  %154 = load %Array*, %Array** %153
  call void @__quantum__rt__array_add_access(%Array* %154)
  %155 = bitcast { %Array*, %Array* }* %150 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %155)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %156 = add i64 %146, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %143)
  %157 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonian, i64 0, i32 2
  %158 = load %Array*, %Array** %157
  %159 = call i64 @__quantum__rt__array_get_size_1d(%Array* %158)
  %160 = sub i64 %159, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %161 = phi i64 [ 0, %exit__2 ], [ %171, %exiting__3 ]
  %162 = icmp sle i64 %161, %160
  br i1 %162, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %163 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %161)
  %164 = bitcast i8* %163 to { %Array*, %Array* }**
  %165 = load { %Array*, %Array* }*, { %Array*, %Array* }** %164
  %166 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %165, i64 0, i32 0
  %167 = load %Array*, %Array** %166
  call void @__quantum__rt__array_add_access(%Array* %167)
  %168 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %165, i64 0, i32 1
  %169 = load %Array*, %Array** %168
  call void @__quantum__rt__array_add_access(%Array* %169)
  %170 = bitcast { %Array*, %Array* }* %165 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %170)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %171 = add i64 %161, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_add_access(%Array* %158)
  %172 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %hamiltonian, i64 0, i32 3
  %173 = load %Array*, %Array** %172
  %174 = call i64 @__quantum__rt__array_get_size_1d(%Array* %173)
  %175 = sub i64 %174, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %176 = phi i64 [ 0, %exit__3 ], [ %186, %exiting__4 ]
  %177 = icmp sle i64 %176, %175
  br i1 %177, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %178 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %173, i64 %176)
  %179 = bitcast i8* %178 to { %Array*, %Array* }**
  %180 = load { %Array*, %Array* }*, { %Array*, %Array* }** %179
  %181 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %180, i64 0, i32 0
  %182 = load %Array*, %Array** %181
  call void @__quantum__rt__array_add_access(%Array* %182)
  %183 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %180, i64 0, i32 1
  %184 = load %Array*, %Array** %183
  call void @__quantum__rt__array_add_access(%Array* %184)
  %185 = bitcast { %Array*, %Array* }* %180 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %185)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %186 = add i64 %176, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_add_access(%Array* %173)
  %187 = bitcast { %Array*, %Array*, %Array*, %Array* }* %hamiltonian to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %187)
  %188 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %inputState = bitcast %Tuple* %188 to { i64, %Array* }*
  %189 = getelementptr { i64, %Array* }, { i64, %Array* }* %inputState, i64 0, i32 0
  %190 = getelementptr { i64, %Array* }, { i64, %Array* }* %inputState, i64 0, i32 1
  %191 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 0)
  %193 = bitcast i8* %192 to { { double, double }*, %Array* }**
  %194 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 1)
  %195 = bitcast i8* %194 to { { double, double }*, %Array* }**
  %196 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 2)
  %197 = bitcast i8* %196 to { { double, double }*, %Array* }**
  %198 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 3)
  %199 = bitcast i8* %198 to { { double, double }*, %Array* }**
  %200 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %201 = bitcast %Tuple* %200 to { double, double }*
  %202 = getelementptr { double, double }, { double, double }* %201, i64 0, i32 0
  %203 = getelementptr { double, double }, { double, double }* %201, i64 0, i32 1
  store double 1.000000e-03, double* %202
  store double 0.000000e+00, double* %203
  %204 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %205 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %204, i64 0)
  %206 = bitcast i8* %205 to i64*
  %207 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %204, i64 1)
  %208 = bitcast i8* %207 to i64*
  store i64 2, i64* %206
  store i64 0, i64* %208
  %209 = call { { double, double }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body({ double, double }* %201, %Array* %204)
  call void @__quantum__rt__tuple_unreference(%Tuple* %200)
  call void @__quantum__rt__array_unreference(%Array* %204)
  %210 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %211 = bitcast %Tuple* %210 to { double, double }*
  %212 = getelementptr { double, double }, { double, double }* %211, i64 0, i32 0
  %213 = getelementptr { double, double }, { double, double }* %211, i64 0, i32 1
  store double -1.000000e-03, double* %212
  store double 0.000000e+00, double* %213
  %214 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %215 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %214, i64 0)
  %216 = bitcast i8* %215 to i64*
  %217 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %214, i64 1)
  %218 = bitcast i8* %217 to i64*
  store i64 3, i64* %216
  store i64 1, i64* %218
  %219 = call { { double, double }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body({ double, double }* %211, %Array* %214)
  call void @__quantum__rt__tuple_unreference(%Tuple* %210)
  call void @__quantum__rt__array_unreference(%Array* %214)
  %220 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %221 = bitcast %Tuple* %220 to { double, double }*
  %222 = getelementptr { double, double }, { double, double }* %221, i64 0, i32 0
  %223 = getelementptr { double, double }, { double, double }* %221, i64 0, i32 1
  store double 1.000000e-03, double* %222
  store double 0.000000e+00, double* %223
  %224 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %225 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %224, i64 0)
  %226 = bitcast i8* %225 to i64*
  %227 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %224, i64 1)
  %228 = bitcast i8* %227 to i64*
  %229 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %224, i64 2)
  %230 = bitcast i8* %229 to i64*
  %231 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %224, i64 3)
  %232 = bitcast i8* %231 to i64*
  store i64 2, i64* %226
  store i64 3, i64* %228
  store i64 1, i64* %230
  store i64 0, i64* %232
  %233 = call { { double, double }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body({ double, double }* %221, %Array* %224)
  call void @__quantum__rt__tuple_unreference(%Tuple* %220)
  call void @__quantum__rt__array_unreference(%Array* %224)
  %234 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %235 = bitcast %Tuple* %234 to { double, double }*
  %236 = getelementptr { double, double }, { double, double }* %235, i64 0, i32 0
  %237 = getelementptr { double, double }, { double, double }* %235, i64 0, i32 1
  store double 1.000000e+00, double* %236
  store double 0.000000e+00, double* %237
  %238 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %239 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %238, i64 0)
  %240 = bitcast i8* %239 to i64*
  %241 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %238, i64 1)
  %242 = bitcast i8* %241 to i64*
  store i64 0, i64* %240
  store i64 1, i64* %242
  %243 = call { { double, double }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body({ double, double }* %235, %Array* %238)
  call void @__quantum__rt__tuple_unreference(%Tuple* %234)
  call void @__quantum__rt__array_unreference(%Array* %238)
  store { { double, double }*, %Array* }* %209, { { double, double }*, %Array* }** %193
  store { { double, double }*, %Array* }* %219, { { double, double }*, %Array* }** %195
  store { { double, double }*, %Array* }* %233, { { double, double }*, %Array* }** %197
  store { { double, double }*, %Array* }* %243, { { double, double }*, %Array* }** %199
  store i64 3, i64* %189
  store %Array* %191, %Array** %190
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %244 = phi i64 [ 0, %exit__4 ], [ %255, %exiting__5 ]
  %245 = icmp sle i64 %244, 3
  br i1 %245, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %246 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 %244)
  %247 = bitcast i8* %246 to { { double, double }*, %Array* }**
  %248 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %247
  %249 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %248, i64 0, i32 0
  %250 = load { double, double }*, { double, double }** %249
  %251 = bitcast { double, double }* %250 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %251)
  %252 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %248, i64 0, i32 1
  %253 = load %Array*, %Array** %252
  call void @__quantum__rt__array_add_access(%Array* %253)
  %254 = bitcast { { double, double }*, %Array* }* %248 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %254)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %255 = add i64 %244, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_add_access(%Array* %191)
  call void @__quantum__rt__tuple_add_access(%Tuple* %188)
  %JWEncodedData = call { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerEncodingData__body(i64 4, { %Array*, %Array*, %Array*, %Array* }* %hamiltonian, { i64, %Array* }* %inputState, double 0xBFB94D36D949CC98)
  %256 = getelementptr { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %JWEncodedData, i64 0, i32 1
  %257 = load { %Array*, %Array*, %Array*, %Array* }*, { %Array*, %Array*, %Array*, %Array* }** %256
  %258 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %257, i64 0, i32 0
  %259 = load %Array*, %Array** %258
  %260 = call i64 @__quantum__rt__array_get_size_1d(%Array* %259)
  %261 = sub i64 %260, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %262 = phi i64 [ 0, %exit__5 ], [ %272, %exiting__6 ]
  %263 = icmp sle i64 %262, %261
  br i1 %263, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %264 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %259, i64 %262)
  %265 = bitcast i8* %264 to { %Array*, %Array* }**
  %266 = load { %Array*, %Array* }*, { %Array*, %Array* }** %265
  %267 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %266, i64 0, i32 0
  %268 = load %Array*, %Array** %267
  call void @__quantum__rt__array_add_access(%Array* %268)
  %269 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %266, i64 0, i32 1
  %270 = load %Array*, %Array** %269
  call void @__quantum__rt__array_add_access(%Array* %270)
  %271 = bitcast { %Array*, %Array* }* %266 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %271)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %272 = add i64 %262, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_add_access(%Array* %259)
  %273 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %257, i64 0, i32 1
  %274 = load %Array*, %Array** %273
  %275 = call i64 @__quantum__rt__array_get_size_1d(%Array* %274)
  %276 = sub i64 %275, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %277 = phi i64 [ 0, %exit__6 ], [ %287, %exiting__7 ]
  %278 = icmp sle i64 %277, %276
  br i1 %278, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %279 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %274, i64 %277)
  %280 = bitcast i8* %279 to { %Array*, %Array* }**
  %281 = load { %Array*, %Array* }*, { %Array*, %Array* }** %280
  %282 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %281, i64 0, i32 0
  %283 = load %Array*, %Array** %282
  call void @__quantum__rt__array_add_access(%Array* %283)
  %284 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %281, i64 0, i32 1
  %285 = load %Array*, %Array** %284
  call void @__quantum__rt__array_add_access(%Array* %285)
  %286 = bitcast { %Array*, %Array* }* %281 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %286)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %287 = add i64 %277, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_add_access(%Array* %274)
  %288 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %257, i64 0, i32 2
  %289 = load %Array*, %Array** %288
  %290 = call i64 @__quantum__rt__array_get_size_1d(%Array* %289)
  %291 = sub i64 %290, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %292 = phi i64 [ 0, %exit__7 ], [ %302, %exiting__8 ]
  %293 = icmp sle i64 %292, %291
  br i1 %293, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %294 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %289, i64 %292)
  %295 = bitcast i8* %294 to { %Array*, %Array* }**
  %296 = load { %Array*, %Array* }*, { %Array*, %Array* }** %295
  %297 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %296, i64 0, i32 0
  %298 = load %Array*, %Array** %297
  call void @__quantum__rt__array_add_access(%Array* %298)
  %299 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %296, i64 0, i32 1
  %300 = load %Array*, %Array** %299
  call void @__quantum__rt__array_add_access(%Array* %300)
  %301 = bitcast { %Array*, %Array* }* %296 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %301)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %302 = add i64 %292, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_add_access(%Array* %289)
  %303 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %257, i64 0, i32 3
  %304 = load %Array*, %Array** %303
  %305 = call i64 @__quantum__rt__array_get_size_1d(%Array* %304)
  %306 = sub i64 %305, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %307 = phi i64 [ 0, %exit__8 ], [ %317, %exiting__9 ]
  %308 = icmp sle i64 %307, %306
  br i1 %308, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %309 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %304, i64 %307)
  %310 = bitcast i8* %309 to { %Array*, %Array* }**
  %311 = load { %Array*, %Array* }*, { %Array*, %Array* }** %310
  %312 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %311, i64 0, i32 0
  %313 = load %Array*, %Array** %312
  call void @__quantum__rt__array_add_access(%Array* %313)
  %314 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %311, i64 0, i32 1
  %315 = load %Array*, %Array** %314
  call void @__quantum__rt__array_add_access(%Array* %315)
  %316 = bitcast { %Array*, %Array* }* %311 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %316)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %317 = add i64 %307, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_add_access(%Array* %304)
  %318 = bitcast { %Array*, %Array*, %Array*, %Array* }* %257 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %318)
  %319 = getelementptr { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %JWEncodedData, i64 0, i32 2
  %320 = load { i64, %Array* }*, { i64, %Array* }** %319
  %321 = getelementptr { i64, %Array* }, { i64, %Array* }* %320, i64 0, i32 1
  %322 = load %Array*, %Array** %321
  %323 = call i64 @__quantum__rt__array_get_size_1d(%Array* %322)
  %324 = sub i64 %323, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %325 = phi i64 [ 0, %exit__9 ], [ %336, %exiting__10 ]
  %326 = icmp sle i64 %325, %324
  br i1 %326, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %327 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %322, i64 %325)
  %328 = bitcast i8* %327 to { { double, double }*, %Array* }**
  %329 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %328
  %330 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %329, i64 0, i32 0
  %331 = load { double, double }*, { double, double }** %330
  %332 = bitcast { double, double }* %331 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %332)
  %333 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %329, i64 0, i32 1
  %334 = load %Array*, %Array** %333
  call void @__quantum__rt__array_add_access(%Array* %334)
  %335 = bitcast { { double, double }*, %Array* }* %329 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %335)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %336 = add i64 %325, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_add_access(%Array* %322)
  %337 = bitcast { i64, %Array* }* %320 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %337)
  %338 = bitcast { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %JWEncodedData to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %338)
  %339 = call double @Microsoft__Quantum__Samples__Chemistry__SimpleVQE__VariationalQuantumEigensolver__EstimateEnergy__body(i64 5, { %Array*, %Array*, %Array*, %Array* }* %hamiltonian, { i64, %Array* }* %inputState, double 0xBFB94D36D949CC98, i64 1)
  %340 = sub i64 %129, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %341 = phi i64 [ 0, %exit__10 ], [ %351, %exiting__11 ]
  %342 = icmp sle i64 %341, %340
  br i1 %342, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %343 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 %341)
  %344 = bitcast i8* %343 to { %Array*, %Array* }**
  %345 = load { %Array*, %Array* }*, { %Array*, %Array* }** %344
  %346 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %345, i64 0, i32 0
  %347 = load %Array*, %Array** %346
  call void @__quantum__rt__array_remove_access(%Array* %347)
  %348 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %345, i64 0, i32 1
  %349 = load %Array*, %Array** %348
  call void @__quantum__rt__array_remove_access(%Array* %349)
  %350 = bitcast { %Array*, %Array* }* %345 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %350)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %351 = add i64 %341, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_remove_access(%Array* %128)
  %352 = sub i64 %144, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %353 = phi i64 [ 0, %exit__11 ], [ %363, %exiting__12 ]
  %354 = icmp sle i64 %353, %352
  br i1 %354, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %355 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %143, i64 %353)
  %356 = bitcast i8* %355 to { %Array*, %Array* }**
  %357 = load { %Array*, %Array* }*, { %Array*, %Array* }** %356
  %358 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %357, i64 0, i32 0
  %359 = load %Array*, %Array** %358
  call void @__quantum__rt__array_remove_access(%Array* %359)
  %360 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %357, i64 0, i32 1
  %361 = load %Array*, %Array** %360
  call void @__quantum__rt__array_remove_access(%Array* %361)
  %362 = bitcast { %Array*, %Array* }* %357 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %362)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %363 = add i64 %353, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_remove_access(%Array* %143)
  %364 = sub i64 %159, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %365 = phi i64 [ 0, %exit__12 ], [ %375, %exiting__13 ]
  %366 = icmp sle i64 %365, %364
  br i1 %366, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %367 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %365)
  %368 = bitcast i8* %367 to { %Array*, %Array* }**
  %369 = load { %Array*, %Array* }*, { %Array*, %Array* }** %368
  %370 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %369, i64 0, i32 0
  %371 = load %Array*, %Array** %370
  call void @__quantum__rt__array_remove_access(%Array* %371)
  %372 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %369, i64 0, i32 1
  %373 = load %Array*, %Array** %372
  call void @__quantum__rt__array_remove_access(%Array* %373)
  %374 = bitcast { %Array*, %Array* }* %369 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %374)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %375 = add i64 %365, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_remove_access(%Array* %158)
  %376 = sub i64 %174, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %377 = phi i64 [ 0, %exit__13 ], [ %387, %exiting__14 ]
  %378 = icmp sle i64 %377, %376
  br i1 %378, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %379 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %173, i64 %377)
  %380 = bitcast i8* %379 to { %Array*, %Array* }**
  %381 = load { %Array*, %Array* }*, { %Array*, %Array* }** %380
  %382 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %381, i64 0, i32 0
  %383 = load %Array*, %Array** %382
  call void @__quantum__rt__array_remove_access(%Array* %383)
  %384 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %381, i64 0, i32 1
  %385 = load %Array*, %Array** %384
  call void @__quantum__rt__array_remove_access(%Array* %385)
  %386 = bitcast { %Array*, %Array* }* %381 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %386)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %387 = add i64 %377, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_remove_access(%Array* %173)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %187)
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %388 = phi i64 [ 0, %exit__14 ], [ %399, %exiting__15 ]
  %389 = icmp sle i64 %388, 3
  br i1 %389, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %390 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 %388)
  %391 = bitcast i8* %390 to { { double, double }*, %Array* }**
  %392 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %391
  %393 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %392, i64 0, i32 0
  %394 = load { double, double }*, { double, double }** %393
  %395 = bitcast { double, double }* %394 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %395)
  %396 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %392, i64 0, i32 1
  %397 = load %Array*, %Array** %396
  call void @__quantum__rt__array_remove_access(%Array* %397)
  %398 = bitcast { { double, double }*, %Array* }* %392 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %398)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %399 = add i64 %388, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_remove_access(%Array* %191)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %188)
  %400 = sub i64 %260, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %401 = phi i64 [ 0, %exit__15 ], [ %411, %exiting__16 ]
  %402 = icmp sle i64 %401, %400
  br i1 %402, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %403 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %259, i64 %401)
  %404 = bitcast i8* %403 to { %Array*, %Array* }**
  %405 = load { %Array*, %Array* }*, { %Array*, %Array* }** %404
  %406 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %405, i64 0, i32 0
  %407 = load %Array*, %Array** %406
  call void @__quantum__rt__array_remove_access(%Array* %407)
  %408 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %405, i64 0, i32 1
  %409 = load %Array*, %Array** %408
  call void @__quantum__rt__array_remove_access(%Array* %409)
  %410 = bitcast { %Array*, %Array* }* %405 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %410)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %411 = add i64 %401, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_remove_access(%Array* %259)
  %412 = sub i64 %275, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %413 = phi i64 [ 0, %exit__16 ], [ %423, %exiting__17 ]
  %414 = icmp sle i64 %413, %412
  br i1 %414, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %415 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %274, i64 %413)
  %416 = bitcast i8* %415 to { %Array*, %Array* }**
  %417 = load { %Array*, %Array* }*, { %Array*, %Array* }** %416
  %418 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %417, i64 0, i32 0
  %419 = load %Array*, %Array** %418
  call void @__quantum__rt__array_remove_access(%Array* %419)
  %420 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %417, i64 0, i32 1
  %421 = load %Array*, %Array** %420
  call void @__quantum__rt__array_remove_access(%Array* %421)
  %422 = bitcast { %Array*, %Array* }* %417 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %422)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %423 = add i64 %413, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_remove_access(%Array* %274)
  %424 = sub i64 %290, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %425 = phi i64 [ 0, %exit__17 ], [ %435, %exiting__18 ]
  %426 = icmp sle i64 %425, %424
  br i1 %426, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %427 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %289, i64 %425)
  %428 = bitcast i8* %427 to { %Array*, %Array* }**
  %429 = load { %Array*, %Array* }*, { %Array*, %Array* }** %428
  %430 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %429, i64 0, i32 0
  %431 = load %Array*, %Array** %430
  call void @__quantum__rt__array_remove_access(%Array* %431)
  %432 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %429, i64 0, i32 1
  %433 = load %Array*, %Array** %432
  call void @__quantum__rt__array_remove_access(%Array* %433)
  %434 = bitcast { %Array*, %Array* }* %429 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %434)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %435 = add i64 %425, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_remove_access(%Array* %289)
  %436 = sub i64 %305, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %437 = phi i64 [ 0, %exit__18 ], [ %447, %exiting__19 ]
  %438 = icmp sle i64 %437, %436
  br i1 %438, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %439 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %304, i64 %437)
  %440 = bitcast i8* %439 to { %Array*, %Array* }**
  %441 = load { %Array*, %Array* }*, { %Array*, %Array* }** %440
  %442 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %441, i64 0, i32 0
  %443 = load %Array*, %Array** %442
  call void @__quantum__rt__array_remove_access(%Array* %443)
  %444 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %441, i64 0, i32 1
  %445 = load %Array*, %Array** %444
  call void @__quantum__rt__array_remove_access(%Array* %445)
  %446 = bitcast { %Array*, %Array* }* %441 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %446)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %447 = add i64 %437, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_remove_access(%Array* %304)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %318)
  %448 = sub i64 %323, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %449 = phi i64 [ 0, %exit__19 ], [ %460, %exiting__20 ]
  %450 = icmp sle i64 %449, %448
  br i1 %450, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %451 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %322, i64 %449)
  %452 = bitcast i8* %451 to { { double, double }*, %Array* }**
  %453 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %452
  %454 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %453, i64 0, i32 0
  %455 = load { double, double }*, { double, double }** %454
  %456 = bitcast { double, double }* %455 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %456)
  %457 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %453, i64 0, i32 1
  %458 = load %Array*, %Array** %457
  call void @__quantum__rt__array_remove_access(%Array* %458)
  %459 = bitcast { { double, double }*, %Array* }* %453 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %459)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %460 = add i64 %449, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_remove_access(%Array* %322)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %337)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %338)
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %461 = phi i64 [ 0, %exit__20 ], [ %471, %exiting__21 ]
  %462 = icmp sle i64 %461, 3
  br i1 %462, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %463 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %461)
  %464 = bitcast i8* %463 to { %Array*, %Array* }**
  %465 = load { %Array*, %Array* }*, { %Array*, %Array* }** %464
  %466 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %465, i64 0, i32 0
  %467 = load %Array*, %Array** %466
  call void @__quantum__rt__array_unreference(%Array* %467)
  %468 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %465, i64 0, i32 1
  %469 = load %Array*, %Array** %468
  call void @__quantum__rt__array_unreference(%Array* %469)
  %470 = bitcast { %Array*, %Array* }* %465 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %470)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %471 = add i64 %461, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_unreference(%Array* %0)
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %472 = phi i64 [ 0, %exit__21 ], [ %482, %exiting__22 ]
  %473 = icmp sle i64 %472, 5
  br i1 %473, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %474 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 %472)
  %475 = bitcast i8* %474 to { %Array*, %Array* }**
  %476 = load { %Array*, %Array* }*, { %Array*, %Array* }** %475
  %477 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %476, i64 0, i32 0
  %478 = load %Array*, %Array** %477
  call void @__quantum__rt__array_unreference(%Array* %478)
  %479 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %476, i64 0, i32 1
  %480 = load %Array*, %Array** %479
  call void @__quantum__rt__array_unreference(%Array* %480)
  %481 = bitcast { %Array*, %Array* }* %476 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %481)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %482 = add i64 %472, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_unreference(%Array* %37)
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %483 = phi i64 [ 0, %exit__22 ], [ %493, %exiting__23 ]
  %484 = icmp sle i64 %483, -1
  br i1 %484, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %485 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 %483)
  %486 = bitcast i8* %485 to { %Array*, %Array* }**
  %487 = load { %Array*, %Array* }*, { %Array*, %Array* }** %486
  %488 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %487, i64 0, i32 0
  %489 = load %Array*, %Array** %488
  call void @__quantum__rt__array_unreference(%Array* %489)
  %490 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %487, i64 0, i32 1
  %491 = load %Array*, %Array** %490
  call void @__quantum__rt__array_unreference(%Array* %491)
  %492 = bitcast { %Array*, %Array* }* %487 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %492)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %493 = add i64 %483, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_unreference(%Array* %104)
  br label %header__24

header__24:                                       ; preds = %exiting__24, %exit__23
  %494 = phi i64 [ 0, %exit__23 ], [ %504, %exiting__24 ]
  %495 = icmp sle i64 %494, 0
  br i1 %495, label %body__24, label %exit__24

body__24:                                         ; preds = %header__24
  %496 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 %494)
  %497 = bitcast i8* %496 to { %Array*, %Array* }**
  %498 = load { %Array*, %Array* }*, { %Array*, %Array* }** %497
  %499 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %498, i64 0, i32 0
  %500 = load %Array*, %Array** %499
  call void @__quantum__rt__array_unreference(%Array* %500)
  %501 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %498, i64 0, i32 1
  %502 = load %Array*, %Array** %501
  call void @__quantum__rt__array_unreference(%Array* %502)
  %503 = bitcast { %Array*, %Array* }* %498 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %503)
  br label %exiting__24

exiting__24:                                      ; preds = %body__24
  %504 = add i64 %494, 1
  br label %header__24

exit__24:                                         ; preds = %header__24
  call void @__quantum__rt__array_unreference(%Array* %105)
  %505 = sub i64 %129, 1
  br label %header__25

header__25:                                       ; preds = %exiting__25, %exit__24
  %506 = phi i64 [ 0, %exit__24 ], [ %516, %exiting__25 ]
  %507 = icmp sle i64 %506, %505
  br i1 %507, label %body__25, label %exit__25

body__25:                                         ; preds = %header__25
  %508 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 %506)
  %509 = bitcast i8* %508 to { %Array*, %Array* }**
  %510 = load { %Array*, %Array* }*, { %Array*, %Array* }** %509
  %511 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %510, i64 0, i32 0
  %512 = load %Array*, %Array** %511
  call void @__quantum__rt__array_unreference(%Array* %512)
  %513 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %510, i64 0, i32 1
  %514 = load %Array*, %Array** %513
  call void @__quantum__rt__array_unreference(%Array* %514)
  %515 = bitcast { %Array*, %Array* }* %510 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %515)
  br label %exiting__25

exiting__25:                                      ; preds = %body__25
  %516 = add i64 %506, 1
  br label %header__25

exit__25:                                         ; preds = %header__25
  call void @__quantum__rt__array_unreference(%Array* %128)
  %517 = sub i64 %144, 1
  br label %header__26

header__26:                                       ; preds = %exiting__26, %exit__25
  %518 = phi i64 [ 0, %exit__25 ], [ %528, %exiting__26 ]
  %519 = icmp sle i64 %518, %517
  br i1 %519, label %body__26, label %exit__26

body__26:                                         ; preds = %header__26
  %520 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %143, i64 %518)
  %521 = bitcast i8* %520 to { %Array*, %Array* }**
  %522 = load { %Array*, %Array* }*, { %Array*, %Array* }** %521
  %523 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %522, i64 0, i32 0
  %524 = load %Array*, %Array** %523
  call void @__quantum__rt__array_unreference(%Array* %524)
  %525 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %522, i64 0, i32 1
  %526 = load %Array*, %Array** %525
  call void @__quantum__rt__array_unreference(%Array* %526)
  %527 = bitcast { %Array*, %Array* }* %522 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %527)
  br label %exiting__26

exiting__26:                                      ; preds = %body__26
  %528 = add i64 %518, 1
  br label %header__26

exit__26:                                         ; preds = %header__26
  call void @__quantum__rt__array_unreference(%Array* %143)
  %529 = sub i64 %159, 1
  br label %header__27

header__27:                                       ; preds = %exiting__27, %exit__26
  %530 = phi i64 [ 0, %exit__26 ], [ %540, %exiting__27 ]
  %531 = icmp sle i64 %530, %529
  br i1 %531, label %body__27, label %exit__27

body__27:                                         ; preds = %header__27
  %532 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %530)
  %533 = bitcast i8* %532 to { %Array*, %Array* }**
  %534 = load { %Array*, %Array* }*, { %Array*, %Array* }** %533
  %535 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %534, i64 0, i32 0
  %536 = load %Array*, %Array** %535
  call void @__quantum__rt__array_unreference(%Array* %536)
  %537 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %534, i64 0, i32 1
  %538 = load %Array*, %Array** %537
  call void @__quantum__rt__array_unreference(%Array* %538)
  %539 = bitcast { %Array*, %Array* }* %534 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %539)
  br label %exiting__27

exiting__27:                                      ; preds = %body__27
  %540 = add i64 %530, 1
  br label %header__27

exit__27:                                         ; preds = %header__27
  call void @__quantum__rt__array_unreference(%Array* %158)
  %541 = sub i64 %174, 1
  br label %header__28

header__28:                                       ; preds = %exiting__28, %exit__27
  %542 = phi i64 [ 0, %exit__27 ], [ %552, %exiting__28 ]
  %543 = icmp sle i64 %542, %541
  br i1 %543, label %body__28, label %exit__28

body__28:                                         ; preds = %header__28
  %544 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %173, i64 %542)
  %545 = bitcast i8* %544 to { %Array*, %Array* }**
  %546 = load { %Array*, %Array* }*, { %Array*, %Array* }** %545
  %547 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %546, i64 0, i32 0
  %548 = load %Array*, %Array** %547
  call void @__quantum__rt__array_unreference(%Array* %548)
  %549 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %546, i64 0, i32 1
  %550 = load %Array*, %Array** %549
  call void @__quantum__rt__array_unreference(%Array* %550)
  %551 = bitcast { %Array*, %Array* }* %546 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %551)
  br label %exiting__28

exiting__28:                                      ; preds = %body__28
  %552 = add i64 %542, 1
  br label %header__28

exit__28:                                         ; preds = %header__28
  call void @__quantum__rt__array_unreference(%Array* %173)
  call void @__quantum__rt__tuple_unreference(%Tuple* %187)
  br label %header__29

header__29:                                       ; preds = %exiting__29, %exit__28
  %553 = phi i64 [ 0, %exit__28 ], [ %564, %exiting__29 ]
  %554 = icmp sle i64 %553, 3
  br i1 %554, label %body__29, label %exit__29

body__29:                                         ; preds = %header__29
  %555 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 %553)
  %556 = bitcast i8* %555 to { { double, double }*, %Array* }**
  %557 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %556
  %558 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %557, i64 0, i32 0
  %559 = load { double, double }*, { double, double }** %558
  %560 = bitcast { double, double }* %559 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %560)
  %561 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %557, i64 0, i32 1
  %562 = load %Array*, %Array** %561
  call void @__quantum__rt__array_unreference(%Array* %562)
  %563 = bitcast { { double, double }*, %Array* }* %557 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %563)
  br label %exiting__29

exiting__29:                                      ; preds = %body__29
  %564 = add i64 %553, 1
  br label %header__29

exit__29:                                         ; preds = %header__29
  call void @__quantum__rt__array_unreference(%Array* %191)
  call void @__quantum__rt__tuple_unreference(%Tuple* %188)
  %565 = sub i64 %260, 1
  br label %header__30

header__30:                                       ; preds = %exiting__30, %exit__29
  %566 = phi i64 [ 0, %exit__29 ], [ %576, %exiting__30 ]
  %567 = icmp sle i64 %566, %565
  br i1 %567, label %body__30, label %exit__30

body__30:                                         ; preds = %header__30
  %568 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %259, i64 %566)
  %569 = bitcast i8* %568 to { %Array*, %Array* }**
  %570 = load { %Array*, %Array* }*, { %Array*, %Array* }** %569
  %571 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %570, i64 0, i32 0
  %572 = load %Array*, %Array** %571
  call void @__quantum__rt__array_unreference(%Array* %572)
  %573 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %570, i64 0, i32 1
  %574 = load %Array*, %Array** %573
  call void @__quantum__rt__array_unreference(%Array* %574)
  %575 = bitcast { %Array*, %Array* }* %570 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %575)
  br label %exiting__30

exiting__30:                                      ; preds = %body__30
  %576 = add i64 %566, 1
  br label %header__30

exit__30:                                         ; preds = %header__30
  call void @__quantum__rt__array_unreference(%Array* %259)
  %577 = sub i64 %275, 1
  br label %header__31

header__31:                                       ; preds = %exiting__31, %exit__30
  %578 = phi i64 [ 0, %exit__30 ], [ %588, %exiting__31 ]
  %579 = icmp sle i64 %578, %577
  br i1 %579, label %body__31, label %exit__31

body__31:                                         ; preds = %header__31
  %580 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %274, i64 %578)
  %581 = bitcast i8* %580 to { %Array*, %Array* }**
  %582 = load { %Array*, %Array* }*, { %Array*, %Array* }** %581
  %583 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %582, i64 0, i32 0
  %584 = load %Array*, %Array** %583
  call void @__quantum__rt__array_unreference(%Array* %584)
  %585 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %582, i64 0, i32 1
  %586 = load %Array*, %Array** %585
  call void @__quantum__rt__array_unreference(%Array* %586)
  %587 = bitcast { %Array*, %Array* }* %582 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %587)
  br label %exiting__31

exiting__31:                                      ; preds = %body__31
  %588 = add i64 %578, 1
  br label %header__31

exit__31:                                         ; preds = %header__31
  call void @__quantum__rt__array_unreference(%Array* %274)
  %589 = sub i64 %290, 1
  br label %header__32

header__32:                                       ; preds = %exiting__32, %exit__31
  %590 = phi i64 [ 0, %exit__31 ], [ %600, %exiting__32 ]
  %591 = icmp sle i64 %590, %589
  br i1 %591, label %body__32, label %exit__32

body__32:                                         ; preds = %header__32
  %592 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %289, i64 %590)
  %593 = bitcast i8* %592 to { %Array*, %Array* }**
  %594 = load { %Array*, %Array* }*, { %Array*, %Array* }** %593
  %595 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %594, i64 0, i32 0
  %596 = load %Array*, %Array** %595
  call void @__quantum__rt__array_unreference(%Array* %596)
  %597 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %594, i64 0, i32 1
  %598 = load %Array*, %Array** %597
  call void @__quantum__rt__array_unreference(%Array* %598)
  %599 = bitcast { %Array*, %Array* }* %594 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %599)
  br label %exiting__32

exiting__32:                                      ; preds = %body__32
  %600 = add i64 %590, 1
  br label %header__32

exit__32:                                         ; preds = %header__32
  call void @__quantum__rt__array_unreference(%Array* %289)
  %601 = sub i64 %305, 1
  br label %header__33

header__33:                                       ; preds = %exiting__33, %exit__32
  %602 = phi i64 [ 0, %exit__32 ], [ %612, %exiting__33 ]
  %603 = icmp sle i64 %602, %601
  br i1 %603, label %body__33, label %exit__33

body__33:                                         ; preds = %header__33
  %604 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %304, i64 %602)
  %605 = bitcast i8* %604 to { %Array*, %Array* }**
  %606 = load { %Array*, %Array* }*, { %Array*, %Array* }** %605
  %607 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %606, i64 0, i32 0
  %608 = load %Array*, %Array** %607
  call void @__quantum__rt__array_unreference(%Array* %608)
  %609 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %606, i64 0, i32 1
  %610 = load %Array*, %Array** %609
  call void @__quantum__rt__array_unreference(%Array* %610)
  %611 = bitcast { %Array*, %Array* }* %606 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %611)
  br label %exiting__33

exiting__33:                                      ; preds = %body__33
  %612 = add i64 %602, 1
  br label %header__33

exit__33:                                         ; preds = %header__33
  call void @__quantum__rt__array_unreference(%Array* %304)
  call void @__quantum__rt__tuple_unreference(%Tuple* %318)
  %613 = sub i64 %323, 1
  br label %header__34

header__34:                                       ; preds = %exiting__34, %exit__33
  %614 = phi i64 [ 0, %exit__33 ], [ %625, %exiting__34 ]
  %615 = icmp sle i64 %614, %613
  br i1 %615, label %body__34, label %exit__34

body__34:                                         ; preds = %header__34
  %616 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %322, i64 %614)
  %617 = bitcast i8* %616 to { { double, double }*, %Array* }**
  %618 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %617
  %619 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %618, i64 0, i32 0
  %620 = load { double, double }*, { double, double }** %619
  %621 = bitcast { double, double }* %620 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %621)
  %622 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %618, i64 0, i32 1
  %623 = load %Array*, %Array** %622
  call void @__quantum__rt__array_unreference(%Array* %623)
  %624 = bitcast { { double, double }*, %Array* }* %618 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %624)
  br label %exiting__34

exiting__34:                                      ; preds = %body__34
  %625 = add i64 %614, 1
  br label %header__34

exit__34:                                         ; preds = %header__34
  call void @__quantum__rt__array_unreference(%Array* %322)
  call void @__quantum__rt__tuple_unreference(%Tuple* %337)
  call void @__quantum__rt__tuple_unreference(%Tuple* %338)
  ret double %339
}

define { %Array*, %Array*, %Array*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JWOptimizedHTerms__body(%Array* %__Item1__, %Array* %__Item2__, %Array* %__Item3__, %Array* %__Item4__) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item1__)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item1__, i64 %2)
  %5 = bitcast i8* %4 to { %Array*, %Array* }**
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5
  %7 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %6, i64 0, i32 0
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_add_access(%Array* %8)
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %6, i64 0, i32 1
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_add_access(%Array* %10)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %11)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %__Item1__)
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item2__)
  %14 = sub i64 %13, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item2__, i64 %15)
  %18 = bitcast i8* %17 to { %Array*, %Array* }**
  %19 = load { %Array*, %Array* }*, { %Array*, %Array* }** %18
  %20 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 0
  %21 = load %Array*, %Array** %20
  call void @__quantum__rt__array_add_access(%Array* %21)
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 1
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_add_access(%Array* %23)
  %24 = bitcast { %Array*, %Array* }* %19 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %24)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %__Item2__)
  %26 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item3__)
  %27 = sub i64 %26, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %28 = phi i64 [ 0, %exit__2 ], [ %38, %exiting__3 ]
  %29 = icmp sle i64 %28, %27
  br i1 %29, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item3__, i64 %28)
  %31 = bitcast i8* %30 to { %Array*, %Array* }**
  %32 = load { %Array*, %Array* }*, { %Array*, %Array* }** %31
  %33 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %32, i64 0, i32 0
  %34 = load %Array*, %Array** %33
  call void @__quantum__rt__array_add_access(%Array* %34)
  %35 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %32, i64 0, i32 1
  %36 = load %Array*, %Array** %35
  call void @__quantum__rt__array_add_access(%Array* %36)
  %37 = bitcast { %Array*, %Array* }* %32 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %37)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %38 = add i64 %28, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_add_access(%Array* %__Item3__)
  %39 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item4__)
  %40 = sub i64 %39, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %41 = phi i64 [ 0, %exit__3 ], [ %51, %exiting__4 ]
  %42 = icmp sle i64 %41, %40
  br i1 %42, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item4__, i64 %41)
  %44 = bitcast i8* %43 to { %Array*, %Array* }**
  %45 = load { %Array*, %Array* }*, { %Array*, %Array* }** %44
  %46 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %45, i64 0, i32 0
  %47 = load %Array*, %Array** %46
  call void @__quantum__rt__array_add_access(%Array* %47)
  %48 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %45, i64 0, i32 1
  %49 = load %Array*, %Array** %48
  call void @__quantum__rt__array_add_access(%Array* %49)
  %50 = bitcast { %Array*, %Array* }* %45 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %50)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %51 = add i64 %41, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_add_access(%Array* %__Item4__)
  %52 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %53 = bitcast %Tuple* %52 to { %Array*, %Array*, %Array*, %Array* }*
  %54 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %53, i64 0, i32 0
  %55 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %53, i64 0, i32 1
  %56 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %53, i64 0, i32 2
  %57 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %53, i64 0, i32 3
  store %Array* %__Item1__, %Array** %54
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item1__)
  %59 = sub i64 %58, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %60 = phi i64 [ 0, %exit__4 ], [ %70, %exiting__5 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item1__, i64 %60)
  %63 = bitcast i8* %62 to { %Array*, %Array* }**
  %64 = load { %Array*, %Array* }*, { %Array*, %Array* }** %63
  %65 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %64, i64 0, i32 0
  %66 = load %Array*, %Array** %65
  call void @__quantum__rt__array_reference(%Array* %66)
  %67 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %64, i64 0, i32 1
  %68 = load %Array*, %Array** %67
  call void @__quantum__rt__array_reference(%Array* %68)
  %69 = bitcast { %Array*, %Array* }* %64 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %69)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %70 = add i64 %60, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_reference(%Array* %__Item1__)
  store %Array* %__Item2__, %Array** %55
  %71 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item2__)
  %72 = sub i64 %71, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %73 = phi i64 [ 0, %exit__5 ], [ %83, %exiting__6 ]
  %74 = icmp sle i64 %73, %72
  br i1 %74, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item2__, i64 %73)
  %76 = bitcast i8* %75 to { %Array*, %Array* }**
  %77 = load { %Array*, %Array* }*, { %Array*, %Array* }** %76
  %78 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %77, i64 0, i32 0
  %79 = load %Array*, %Array** %78
  call void @__quantum__rt__array_reference(%Array* %79)
  %80 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %77, i64 0, i32 1
  %81 = load %Array*, %Array** %80
  call void @__quantum__rt__array_reference(%Array* %81)
  %82 = bitcast { %Array*, %Array* }* %77 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %82)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %83 = add i64 %73, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_reference(%Array* %__Item2__)
  store %Array* %__Item3__, %Array** %56
  %84 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item3__)
  %85 = sub i64 %84, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %86 = phi i64 [ 0, %exit__6 ], [ %96, %exiting__7 ]
  %87 = icmp sle i64 %86, %85
  br i1 %87, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item3__, i64 %86)
  %89 = bitcast i8* %88 to { %Array*, %Array* }**
  %90 = load { %Array*, %Array* }*, { %Array*, %Array* }** %89
  %91 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %90, i64 0, i32 0
  %92 = load %Array*, %Array** %91
  call void @__quantum__rt__array_reference(%Array* %92)
  %93 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %90, i64 0, i32 1
  %94 = load %Array*, %Array** %93
  call void @__quantum__rt__array_reference(%Array* %94)
  %95 = bitcast { %Array*, %Array* }* %90 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %95)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %96 = add i64 %86, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_reference(%Array* %__Item3__)
  store %Array* %__Item4__, %Array** %57
  %97 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item4__)
  %98 = sub i64 %97, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %99 = phi i64 [ 0, %exit__7 ], [ %109, %exiting__8 ]
  %100 = icmp sle i64 %99, %98
  br i1 %100, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item4__, i64 %99)
  %102 = bitcast i8* %101 to { %Array*, %Array* }**
  %103 = load { %Array*, %Array* }*, { %Array*, %Array* }** %102
  %104 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %103, i64 0, i32 0
  %105 = load %Array*, %Array** %104
  call void @__quantum__rt__array_reference(%Array* %105)
  %106 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %103, i64 0, i32 1
  %107 = load %Array*, %Array** %106
  call void @__quantum__rt__array_reference(%Array* %107)
  %108 = bitcast { %Array*, %Array* }* %103 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %108)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %109 = add i64 %99, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_reference(%Array* %__Item4__)
  %110 = sub i64 %0, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %111 = phi i64 [ 0, %exit__8 ], [ %121, %exiting__9 ]
  %112 = icmp sle i64 %111, %110
  br i1 %112, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item1__, i64 %111)
  %114 = bitcast i8* %113 to { %Array*, %Array* }**
  %115 = load { %Array*, %Array* }*, { %Array*, %Array* }** %114
  %116 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %115, i64 0, i32 0
  %117 = load %Array*, %Array** %116
  call void @__quantum__rt__array_remove_access(%Array* %117)
  %118 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %115, i64 0, i32 1
  %119 = load %Array*, %Array** %118
  call void @__quantum__rt__array_remove_access(%Array* %119)
  %120 = bitcast { %Array*, %Array* }* %115 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %120)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %121 = add i64 %111, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_remove_access(%Array* %__Item1__)
  %122 = sub i64 %13, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %123 = phi i64 [ 0, %exit__9 ], [ %133, %exiting__10 ]
  %124 = icmp sle i64 %123, %122
  br i1 %124, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item2__, i64 %123)
  %126 = bitcast i8* %125 to { %Array*, %Array* }**
  %127 = load { %Array*, %Array* }*, { %Array*, %Array* }** %126
  %128 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %127, i64 0, i32 0
  %129 = load %Array*, %Array** %128
  call void @__quantum__rt__array_remove_access(%Array* %129)
  %130 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %127, i64 0, i32 1
  %131 = load %Array*, %Array** %130
  call void @__quantum__rt__array_remove_access(%Array* %131)
  %132 = bitcast { %Array*, %Array* }* %127 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %132)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %133 = add i64 %123, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_remove_access(%Array* %__Item2__)
  %134 = sub i64 %26, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %135 = phi i64 [ 0, %exit__10 ], [ %145, %exiting__11 ]
  %136 = icmp sle i64 %135, %134
  br i1 %136, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item3__, i64 %135)
  %138 = bitcast i8* %137 to { %Array*, %Array* }**
  %139 = load { %Array*, %Array* }*, { %Array*, %Array* }** %138
  %140 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %139, i64 0, i32 0
  %141 = load %Array*, %Array** %140
  call void @__quantum__rt__array_remove_access(%Array* %141)
  %142 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %139, i64 0, i32 1
  %143 = load %Array*, %Array** %142
  call void @__quantum__rt__array_remove_access(%Array* %143)
  %144 = bitcast { %Array*, %Array* }* %139 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %144)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %145 = add i64 %135, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_remove_access(%Array* %__Item3__)
  %146 = sub i64 %39, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %147 = phi i64 [ 0, %exit__11 ], [ %157, %exiting__12 ]
  %148 = icmp sle i64 %147, %146
  br i1 %148, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %149 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item4__, i64 %147)
  %150 = bitcast i8* %149 to { %Array*, %Array* }**
  %151 = load { %Array*, %Array* }*, { %Array*, %Array* }** %150
  %152 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %151, i64 0, i32 0
  %153 = load %Array*, %Array** %152
  call void @__quantum__rt__array_remove_access(%Array* %153)
  %154 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %151, i64 0, i32 1
  %155 = load %Array*, %Array** %154
  call void @__quantum__rt__array_remove_access(%Array* %155)
  %156 = bitcast { %Array*, %Array* }* %151 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %156)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %157 = add i64 %147, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_remove_access(%Array* %__Item4__)
  ret { %Array*, %Array*, %Array*, %Array* }* %53
}

define { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %__Item1__, %Array* %__Item2__) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__Item1__)
  call void @__quantum__rt__array_add_access(%Array* %__Item2__)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %1 = bitcast %Tuple* %0 to { %Array*, %Array* }*
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  store %Array* %__Item1__, %Array** %2
  call void @__quantum__rt__array_reference(%Array* %__Item1__)
  store %Array* %__Item2__, %Array** %3
  call void @__quantum__rt__array_reference(%Array* %__Item2__)
  call void @__quantum__rt__array_remove_access(%Array* %__Item1__)
  call void @__quantum__rt__array_remove_access(%Array* %__Item2__)
  ret { %Array*, %Array* }* %1
}

declare %Tuple* @__quantum__rt__tuple_create(i64)

define { { double, double }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body({ double, double }* %0, %Array* %__Item3__) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__Item3__)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %2 = bitcast %Tuple* %1 to { { double, double }*, %Array* }*
  %3 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %2, i64 0, i32 0
  %4 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %2, i64 0, i32 1
  store { double, double }* %0, { double, double }** %3
  %5 = bitcast { double, double }* %0 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %5)
  store %Array* %__Item3__, %Array** %4
  call void @__quantum__rt__array_reference(%Array* %__Item3__)
  call void @__quantum__rt__array_remove_access(%Array* %__Item3__)
  ret { { double, double }*, %Array* }* %2
}

define { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerEncodingData__body(i64 %__Item1__, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, { i64, %Array* }* %0, double %__Item5__) {
entry:
  %1 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 0
  %2 = load %Array*, %Array** %1
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %5)
  %8 = bitcast i8* %7 to { %Array*, %Array* }**
  %9 = load { %Array*, %Array* }*, { %Array*, %Array* }** %8
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %9, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %11)
  %12 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %9, i64 0, i32 1
  %13 = load %Array*, %Array** %12
  call void @__quantum__rt__array_add_access(%Array* %13)
  %14 = bitcast { %Array*, %Array* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %14)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %2)
  %16 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 1
  %17 = load %Array*, %Array** %16
  %18 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %19 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %20)
  %23 = bitcast i8* %22 to { %Array*, %Array* }**
  %24 = load { %Array*, %Array* }*, { %Array*, %Array* }** %23
  %25 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %24, i64 0, i32 0
  %26 = load %Array*, %Array** %25
  call void @__quantum__rt__array_add_access(%Array* %26)
  %27 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %24, i64 0, i32 1
  %28 = load %Array*, %Array** %27
  call void @__quantum__rt__array_add_access(%Array* %28)
  %29 = bitcast { %Array*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %29)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %17)
  %31 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 2
  %32 = load %Array*, %Array** %31
  %33 = call i64 @__quantum__rt__array_get_size_1d(%Array* %32)
  %34 = sub i64 %33, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %45, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %35)
  %38 = bitcast i8* %37 to { %Array*, %Array* }**
  %39 = load { %Array*, %Array* }*, { %Array*, %Array* }** %38
  %40 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %39, i64 0, i32 0
  %41 = load %Array*, %Array** %40
  call void @__quantum__rt__array_add_access(%Array* %41)
  %42 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %39, i64 0, i32 1
  %43 = load %Array*, %Array** %42
  call void @__quantum__rt__array_add_access(%Array* %43)
  %44 = bitcast { %Array*, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %44)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %45 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_add_access(%Array* %32)
  %46 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 3
  %47 = load %Array*, %Array** %46
  %48 = call i64 @__quantum__rt__array_get_size_1d(%Array* %47)
  %49 = sub i64 %48, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %50 = phi i64 [ 0, %exit__3 ], [ %60, %exiting__4 ]
  %51 = icmp sle i64 %50, %49
  br i1 %51, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %50)
  %53 = bitcast i8* %52 to { %Array*, %Array* }**
  %54 = load { %Array*, %Array* }*, { %Array*, %Array* }** %53
  %55 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %54, i64 0, i32 0
  %56 = load %Array*, %Array** %55
  call void @__quantum__rt__array_add_access(%Array* %56)
  %57 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %54, i64 0, i32 1
  %58 = load %Array*, %Array** %57
  call void @__quantum__rt__array_add_access(%Array* %58)
  %59 = bitcast { %Array*, %Array* }* %54 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %59)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %60 = add i64 %50, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_add_access(%Array* %47)
  %61 = bitcast { %Array*, %Array*, %Array*, %Array* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %61)
  %62 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* getelementptr ({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* null, i32 1) to i64))
  %63 = bitcast %Tuple* %62 to { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }*
  %64 = getelementptr { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63, i64 0, i32 0
  %65 = getelementptr { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63, i64 0, i32 1
  %66 = getelementptr { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63, i64 0, i32 2
  %67 = getelementptr { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63, i64 0, i32 3
  store i64 %__Item1__, i64* %64
  store { %Array*, %Array*, %Array*, %Array* }* %__Item2__, { %Array*, %Array*, %Array*, %Array* }** %65
  %68 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 0
  %69 = load %Array*, %Array** %68
  %70 = call i64 @__quantum__rt__array_get_size_1d(%Array* %69)
  %71 = sub i64 %70, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %72 = phi i64 [ 0, %exit__4 ], [ %82, %exiting__5 ]
  %73 = icmp sle i64 %72, %71
  br i1 %73, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 %72)
  %75 = bitcast i8* %74 to { %Array*, %Array* }**
  %76 = load { %Array*, %Array* }*, { %Array*, %Array* }** %75
  %77 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %76, i64 0, i32 0
  %78 = load %Array*, %Array** %77
  call void @__quantum__rt__array_reference(%Array* %78)
  %79 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %76, i64 0, i32 1
  %80 = load %Array*, %Array** %79
  call void @__quantum__rt__array_reference(%Array* %80)
  %81 = bitcast { %Array*, %Array* }* %76 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %81)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %82 = add i64 %72, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_reference(%Array* %69)
  %83 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 1
  %84 = load %Array*, %Array** %83
  %85 = call i64 @__quantum__rt__array_get_size_1d(%Array* %84)
  %86 = sub i64 %85, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %87 = phi i64 [ 0, %exit__5 ], [ %97, %exiting__6 ]
  %88 = icmp sle i64 %87, %86
  br i1 %88, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %84, i64 %87)
  %90 = bitcast i8* %89 to { %Array*, %Array* }**
  %91 = load { %Array*, %Array* }*, { %Array*, %Array* }** %90
  %92 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %91, i64 0, i32 0
  %93 = load %Array*, %Array** %92
  call void @__quantum__rt__array_reference(%Array* %93)
  %94 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %91, i64 0, i32 1
  %95 = load %Array*, %Array** %94
  call void @__quantum__rt__array_reference(%Array* %95)
  %96 = bitcast { %Array*, %Array* }* %91 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %96)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %97 = add i64 %87, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_reference(%Array* %84)
  %98 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 2
  %99 = load %Array*, %Array** %98
  %100 = call i64 @__quantum__rt__array_get_size_1d(%Array* %99)
  %101 = sub i64 %100, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %102 = phi i64 [ 0, %exit__6 ], [ %112, %exiting__7 ]
  %103 = icmp sle i64 %102, %101
  br i1 %103, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 %102)
  %105 = bitcast i8* %104 to { %Array*, %Array* }**
  %106 = load { %Array*, %Array* }*, { %Array*, %Array* }** %105
  %107 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %106, i64 0, i32 0
  %108 = load %Array*, %Array** %107
  call void @__quantum__rt__array_reference(%Array* %108)
  %109 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %106, i64 0, i32 1
  %110 = load %Array*, %Array** %109
  call void @__quantum__rt__array_reference(%Array* %110)
  %111 = bitcast { %Array*, %Array* }* %106 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %111)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %112 = add i64 %102, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_reference(%Array* %99)
  %113 = getelementptr { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i64 0, i32 3
  %114 = load %Array*, %Array** %113
  %115 = call i64 @__quantum__rt__array_get_size_1d(%Array* %114)
  %116 = sub i64 %115, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %117 = phi i64 [ 0, %exit__7 ], [ %127, %exiting__8 ]
  %118 = icmp sle i64 %117, %116
  br i1 %118, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %114, i64 %117)
  %120 = bitcast i8* %119 to { %Array*, %Array* }**
  %121 = load { %Array*, %Array* }*, { %Array*, %Array* }** %120
  %122 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %121, i64 0, i32 0
  %123 = load %Array*, %Array** %122
  call void @__quantum__rt__array_reference(%Array* %123)
  %124 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %121, i64 0, i32 1
  %125 = load %Array*, %Array** %124
  call void @__quantum__rt__array_reference(%Array* %125)
  %126 = bitcast { %Array*, %Array* }* %121 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %126)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %127 = add i64 %117, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_reference(%Array* %114)
  %128 = bitcast { %Array*, %Array*, %Array*, %Array* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %128)
  store { i64, %Array* }* %0, { i64, %Array* }** %66
  %129 = getelementptr { i64, %Array* }, { i64, %Array* }* %0, i64 0, i32 1
  %130 = load %Array*, %Array** %129
  %131 = call i64 @__quantum__rt__array_get_size_1d(%Array* %130)
  %132 = sub i64 %131, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %133 = phi i64 [ 0, %exit__8 ], [ %144, %exiting__9 ]
  %134 = icmp sle i64 %133, %132
  br i1 %134, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 %133)
  %136 = bitcast i8* %135 to { { double, double }*, %Array* }**
  %137 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %136
  %138 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %137, i64 0, i32 0
  %139 = load { double, double }*, { double, double }** %138
  %140 = bitcast { double, double }* %139 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %140)
  %141 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %137, i64 0, i32 1
  %142 = load %Array*, %Array** %141
  call void @__quantum__rt__array_reference(%Array* %142)
  %143 = bitcast { { double, double }*, %Array* }* %137 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %143)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %144 = add i64 %133, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_reference(%Array* %130)
  %145 = bitcast { i64, %Array* }* %0 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %145)
  store double %__Item5__, double* %67
  %146 = sub i64 %3, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %147 = phi i64 [ 0, %exit__9 ], [ %157, %exiting__10 ]
  %148 = icmp sle i64 %147, %146
  br i1 %148, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %149 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %147)
  %150 = bitcast i8* %149 to { %Array*, %Array* }**
  %151 = load { %Array*, %Array* }*, { %Array*, %Array* }** %150
  %152 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %151, i64 0, i32 0
  %153 = load %Array*, %Array** %152
  call void @__quantum__rt__array_remove_access(%Array* %153)
  %154 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %151, i64 0, i32 1
  %155 = load %Array*, %Array** %154
  call void @__quantum__rt__array_remove_access(%Array* %155)
  %156 = bitcast { %Array*, %Array* }* %151 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %156)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %157 = add i64 %147, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_remove_access(%Array* %2)
  %158 = sub i64 %18, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %159 = phi i64 [ 0, %exit__10 ], [ %169, %exiting__11 ]
  %160 = icmp sle i64 %159, %158
  br i1 %160, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %161 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %159)
  %162 = bitcast i8* %161 to { %Array*, %Array* }**
  %163 = load { %Array*, %Array* }*, { %Array*, %Array* }** %162
  %164 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %163, i64 0, i32 0
  %165 = load %Array*, %Array** %164
  call void @__quantum__rt__array_remove_access(%Array* %165)
  %166 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %163, i64 0, i32 1
  %167 = load %Array*, %Array** %166
  call void @__quantum__rt__array_remove_access(%Array* %167)
  %168 = bitcast { %Array*, %Array* }* %163 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %168)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %169 = add i64 %159, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_remove_access(%Array* %17)
  %170 = sub i64 %33, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %171 = phi i64 [ 0, %exit__11 ], [ %181, %exiting__12 ]
  %172 = icmp sle i64 %171, %170
  br i1 %172, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %171)
  %174 = bitcast i8* %173 to { %Array*, %Array* }**
  %175 = load { %Array*, %Array* }*, { %Array*, %Array* }** %174
  %176 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %175, i64 0, i32 0
  %177 = load %Array*, %Array** %176
  call void @__quantum__rt__array_remove_access(%Array* %177)
  %178 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %175, i64 0, i32 1
  %179 = load %Array*, %Array** %178
  call void @__quantum__rt__array_remove_access(%Array* %179)
  %180 = bitcast { %Array*, %Array* }* %175 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %180)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %181 = add i64 %171, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_remove_access(%Array* %32)
  %182 = sub i64 %48, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %183 = phi i64 [ 0, %exit__12 ], [ %193, %exiting__13 ]
  %184 = icmp sle i64 %183, %182
  br i1 %184, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %185 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %183)
  %186 = bitcast i8* %185 to { %Array*, %Array* }**
  %187 = load { %Array*, %Array* }*, { %Array*, %Array* }** %186
  %188 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %187, i64 0, i32 0
  %189 = load %Array*, %Array** %188
  call void @__quantum__rt__array_remove_access(%Array* %189)
  %190 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %187, i64 0, i32 1
  %191 = load %Array*, %Array** %190
  call void @__quantum__rt__array_remove_access(%Array* %191)
  %192 = bitcast { %Array*, %Array* }* %187 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %192)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %193 = add i64 %183, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_remove_access(%Array* %47)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %61)
  ret { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63
}

define { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %__Item1__) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__Item1__)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array* }*
  %2 = getelementptr { %Array* }, { %Array* }* %1, i64 0, i32 0
  store %Array* %__Item1__, %Array** %2
  call void @__quantum__rt__array_reference(%Array* %__Item1__)
  call void @__quantum__rt__array_remove_access(%Array* %__Item1__)
  ret { %Array* }* %1
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_add_access(%Array* %1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, double }*
  %5 = getelementptr { %Callable*, double }, { %Callable*, double }* %4, i64 0, i32 0
  %6 = getelementptr { %Callable*, double }, { %Callable*, double }* %4, i64 0, i32 1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar, %Tuple* null)
  store %Callable* %7, %Callable** %5
  store double 0.000000e+00, double* %6
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1, %Tuple* %3)
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD, %Tuple* null)
  %10 = call %Callable* @Microsoft__Quantum__Canon___e946f2a1edb747cf9b42e36007e71c2e_Compose__body(%Callable* %8, %Callable* %9)
  %coefficientsAsComplexPolar = call %Array* @Microsoft__Quantum__Arrays___7a0f632e69844d30a5c7aa63b85781d9_Mapped__body(%Callable* %10, %Array* %coefficients)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsAsComplexPolar)
  %12 = sub i64 %11, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %13 = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %18)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %13, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficientsAsComplexPolar)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__body(double %tolerance, %Array* %coefficientsAsComplexPolar, { %Array* }* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  %20 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %26)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %coefficientsAsComplexPolar)
  call void @__quantum__rt__callable_unreference(%Callable* %8)
  call void @__quantum__rt__callable_unreference(%Callable* %9)
  call void @__quantum__rt__callable_unreference(%Callable* %10)
  %28 = sub i64 %11, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_unreference(%Array* %coefficientsAsComplexPolar)
  ret void
}

define %Array* @Microsoft__Quantum__Arrays___7a0f632e69844d30a5c7aa63b85781d9_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %array)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %0)
  %resultArray = alloca %Array*
  store %Array* %1, %Array** %resultArray
  %2 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to { double, double }**
  %7 = load { double, double }*, { double, double }** %6
  %8 = bitcast { double, double }* %7 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %8)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %1)
  %10 = call %Range @Microsoft__Quantum__Arrays___1a54d2e247c94d6a896ababd9633bb53_IndexRange__body(%Array* %array)
  %11 = extractvalue %Range %10, 0
  %12 = extractvalue %Range %10, 1
  %13 = extractvalue %Range %10, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %14 = icmp sgt i64 %12, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxElement = phi i64 [ %11, %preheader__1 ], [ %22, %exiting__2 ]
  %15 = icmp sge i64 %idxElement, %13
  %16 = icmp sle i64 %idxElement, %13
  %17 = select i1 %14, i1 %16, i1 %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = load %Array*, %Array** %resultArray
  %19 = call %Array* @__quantum__rt__array_copy(%Array* %18, i1 false)
  %20 = call i64 @__quantum__rt__array_get_size_1d(%Array* %19)
  %21 = sub i64 %20, 1
  br label %header__3

exiting__2:                                       ; preds = %exit__6
  %22 = add i64 %idxElement, %12
  br label %header__2

exit__2:                                          ; preds = %header__2
  %23 = load %Array*, %Array** %resultArray
  %24 = call i64 @__quantum__rt__array_get_size_1d(%Array* %23)
  %25 = sub i64 %24, 1
  br label %header__7

header__3:                                        ; preds = %exiting__3, %body__2
  %26 = phi i64 [ 0, %body__2 ], [ %32, %exiting__3 ]
  %27 = icmp sle i64 %26, %21
  br i1 %27, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %26)
  %29 = bitcast i8* %28 to { double, double }**
  %30 = load { double, double }*, { double, double }** %29
  %31 = bitcast { double, double }* %30 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %31)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %32 = add i64 %26, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %34 = bitcast i8* %33 to double*
  %35 = load double, double* %34
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { double }*
  %38 = getelementptr { double }, { double }* %37, i64 0, i32 0
  store double %35, double* %38
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %36, %Tuple* %39)
  %40 = bitcast %Tuple* %39 to { { double, double }* }*
  %41 = getelementptr { { double, double }* }, { { double, double }* }* %40, i64 0, i32 0
  %42 = load { double, double }*, { double, double }** %41
  %43 = bitcast { double, double }* %42 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %43)
  call void @__quantum__rt__tuple_unreference(%Tuple* %36)
  %44 = load { double, double }*, { double, double }** %41
  %45 = bitcast { double, double }* %44 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %45)
  call void @__quantum__rt__tuple_unreference(%Tuple* %39)
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %idxElement)
  %47 = bitcast i8* %46 to { double, double }**
  %48 = load { double, double }*, { double, double }** %47
  %49 = bitcast { double, double }* %48 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %49)
  store { double, double }* %42, { double, double }** %47
  %50 = load %Array*, %Array** %resultArray
  %51 = call i64 @__quantum__rt__array_get_size_1d(%Array* %50)
  %52 = sub i64 %51, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %53 = phi i64 [ 0, %exit__3 ], [ %59, %exiting__4 ]
  %54 = icmp sle i64 %53, %52
  br i1 %54, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 %53)
  %56 = bitcast i8* %55 to { double, double }**
  %57 = load { double, double }*, { double, double }** %56
  %58 = bitcast { double, double }* %57 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %58)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %59 = add i64 %53, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_remove_access(%Array* %50)
  store %Array* %19, %Array** %resultArray
  %60 = sub i64 %20, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %61 = phi i64 [ 0, %exit__4 ], [ %67, %exiting__5 ]
  %62 = icmp sle i64 %61, %60
  br i1 %62, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %61)
  %64 = bitcast i8* %63 to { double, double }**
  %65 = load { double, double }*, { double, double }** %64
  %66 = bitcast { double, double }* %65 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %66)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %67 = add i64 %61, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_add_access(%Array* %19)
  %68 = sub i64 %20, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %69 = phi i64 [ 0, %exit__5 ], [ %75, %exiting__6 ]
  %70 = icmp sle i64 %69, %68
  br i1 %70, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %69)
  %72 = bitcast i8* %71 to { double, double }**
  %73 = load { double, double }*, { double, double }** %72
  %74 = bitcast { double, double }* %73 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %74)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %75 = add i64 %69, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_unreference(%Array* %19)
  br label %exiting__2

header__7:                                        ; preds = %exiting__7, %exit__2
  %76 = phi i64 [ 0, %exit__2 ], [ %82, %exiting__7 ]
  %77 = icmp sle i64 %76, %25
  br i1 %77, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %76)
  %79 = bitcast i8* %78 to { double, double }**
  %80 = load { double, double }*, { double, double }** %79
  %81 = bitcast { double, double }* %80 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %81)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %82 = add i64 %76, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_reference(%Array* %23)
  call void @__quantum__rt__array_remove_access(%Array* %array)
  %83 = sub i64 %24, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %84 = phi i64 [ 0, %exit__7 ], [ %90, %exiting__8 ]
  %85 = icmp sle i64 %84, %83
  br i1 %85, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %84)
  %87 = bitcast i8* %86 to { double, double }**
  %88 = load { double, double }*, { double, double }** %87
  %89 = bitcast { double, double }* %88 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %89)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %90 = add i64 %84, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_remove_access(%Array* %23)
  %91 = sub i64 %0, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %92 = phi i64 [ 0, %exit__8 ], [ %98, %exiting__9 ]
  %93 = icmp sle i64 %92, %91
  br i1 %93, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %92)
  %95 = bitcast i8* %94 to { double, double }**
  %96 = load { double, double }*, { double, double }** %95
  %97 = bitcast { double, double }* %96 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %97)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %98 = add i64 %92, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_unreference(%Array* %1)
  ret %Array* %23
}

define %Callable* @Microsoft__Quantum__Canon___e946f2a1edb747cf9b42e36007e71c2e_Compose__body(%Callable* %outer, %Callable* %inner) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Callable*, %Callable* }*
  %2 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i64 0, i32 1
  %4 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i64 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___844e0d33639542558228c58de0107c92___QsRef0__ComposedOutput__, %Tuple* null)
  call void @__quantum__rt__callable_reference(%Callable* %outer)
  call void @__quantum__rt__callable_reference(%Callable* %inner)
  store %Callable* %5, %Callable** %2
  store %Callable* %outer, %Callable** %3
  store %Callable* %inner, %Callable** %4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.17, %Tuple* %0)
  ret %Callable* %6
}

declare %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]*, %Tuple*)

define void @Microsoft__Quantum__Math__ComplexPolar__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, double }*
  %1 = getelementptr { double, double }, { double, double }* %0, i64 0, i32 0
  %2 = getelementptr { double, double }, { double, double }* %0, i64 0, i32 1
  %3 = load double, double* %1
  %4 = load double, double* %2
  %5 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %3, double %4)
  %6 = bitcast %Tuple* %result-tuple to { { double, double }* }*
  %7 = getelementptr { { double, double }* }, { { double, double }* }* %6, i64 0, i32 0
  store { double, double }* %5, { double, double }** %7
  ret void
}

define void @Lifted__PartialApplication__1__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr { double }, { double }* %0, i64 0, i32 0
  %2 = load double, double* %1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr { %Callable*, double }, { %Callable*, double }* %3, i64 0, i32 1
  %5 = load double, double* %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr { double, double }, { double, double }* %7, i64 0, i32 0
  %9 = getelementptr { double, double }, { double, double }* %7, i64 0, i32 1
  store double %2, double* %8
  store double %5, double* %9
  %10 = getelementptr { %Callable*, double }, { %Callable*, double }* %3, i64 0, i32 0
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  ret void

entry1:                                           ; No predecessors!
  %12 = bitcast %Tuple* %arg-tuple to { double }*
  %13 = getelementptr { double }, { double }* %12, i64 0, i32 0
  %14 = load double, double* %13
  %15 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %16 = getelementptr { %Callable*, double }, { %Callable*, double }* %15, i64 0, i32 1
  %17 = load double, double* %16
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %19 = bitcast %Tuple* %18 to { double, double }*
  %20 = getelementptr { double, double }, { double, double }* %19, i64 0, i32 0
  %21 = getelementptr { double, double }, { double, double }* %19, i64 0, i32 1
  store double %14, double* %20
  store double %17, double* %21
  %22 = getelementptr { %Callable*, double }, { %Callable*, double }* %15, i64 0, i32 0
  %23 = load %Callable*, %Callable** %22
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_unreference(%Tuple* %18)
  ret void

entry2:                                           ; No predecessors!
  %24 = bitcast %Tuple* %arg-tuple to { double }*
  %25 = getelementptr { double }, { double }* %24, i64 0, i32 0
  %26 = load double, double* %25
  %27 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %28 = getelementptr { %Callable*, double }, { %Callable*, double }* %27, i64 0, i32 1
  %29 = load double, double* %28
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %31 = bitcast %Tuple* %30 to { double, double }*
  %32 = getelementptr { double, double }, { double, double }* %31, i64 0, i32 0
  %33 = getelementptr { double, double }, { double, double }* %31, i64 0, i32 1
  store double %26, double* %32
  store double %29, double* %33
  %34 = getelementptr { %Callable*, double }, { %Callable*, double }* %27, i64 0, i32 0
  %35 = load %Callable*, %Callable** %34
  call void @__quantum__rt__callable_invoke(%Callable* %35, %Tuple* %30, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_unreference(%Tuple* %30)
  ret void

entry3:                                           ; No predecessors!
  %36 = bitcast %Tuple* %arg-tuple to { double }*
  %37 = getelementptr { double }, { double }* %36, i64 0, i32 0
  %38 = load double, double* %37
  %39 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %40 = getelementptr { %Callable*, double }, { %Callable*, double }* %39, i64 0, i32 1
  %41 = load double, double* %40
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %43 = bitcast %Tuple* %42 to { double, double }*
  %44 = getelementptr { double, double }, { double, double }* %43, i64 0, i32 0
  %45 = getelementptr { double, double }, { double, double }* %43, i64 0, i32 1
  store double %38, double* %44
  store double %41, double* %45
  %46 = getelementptr { %Callable*, double }, { %Callable*, double }* %39, i64 0, i32 0
  %47 = load %Callable*, %Callable** %46
  call void @__quantum__rt__callable_invoke(%Callable* %47, %Tuple* %42, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_unreference(%Tuple* %42)
  ret void

entry4:                                           ; No predecessors!
  %48 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %49 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %48, i64 0, i32 1
  %50 = load %Array*, %Array** %49
  %51 = bitcast %Tuple* %arg-tuple to { { %Array* }* }*
  %52 = getelementptr { { %Array* }* }, { { %Array* }* }* %51, i64 0, i32 0
  %53 = load { %Array* }*, { %Array* }** %52
  %54 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %55 = bitcast %Tuple* %54 to { %Array*, { %Array* }* }*
  %56 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %55, i64 0, i32 0
  %57 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %55, i64 0, i32 1
  store %Array* %50, %Array** %56
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %50)
  %59 = sub i64 %58, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry4
  %60 = phi i64 [ 0, %entry4 ], [ %66, %exiting__1 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 %60)
  %63 = bitcast i8* %62 to { double, double }**
  %64 = load { double, double }*, { double, double }** %63
  %65 = bitcast { double, double }* %64 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %65)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %66 = add i64 %60, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_reference(%Array* %50)
  store { %Array* }* %53, { %Array* }** %57
  %67 = getelementptr { %Array* }, { %Array* }* %53, i64 0, i32 0
  %68 = load %Array*, %Array** %67
  call void @__quantum__rt__array_reference(%Array* %68)
  %69 = bitcast { %Array* }* %53 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %69)
  %70 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %48, i64 0, i32 0
  %71 = load %Callable*, %Callable** %70
  call void @__quantum__rt__callable_invoke(%Callable* %71, %Tuple* %54, %Tuple* %result-tuple)
  %72 = sub i64 %58, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %73 = phi i64 [ 0, %exit__1 ], [ %79, %exiting__2 ]
  %74 = icmp sle i64 %73, %72
  br i1 %74, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 %73)
  %76 = bitcast i8* %75 to { double, double }**
  %77 = load { double, double }*, { double, double }** %76
  %78 = bitcast { double, double }* %77 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %78)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %79 = add i64 %73, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_unreference(%Array* %50)
  call void @__quantum__rt__array_unreference(%Array* %68)
  call void @__quantum__rt__tuple_unreference(%Tuple* %69)
  call void @__quantum__rt__tuple_unreference(%Tuple* %54)
  ret void

entry5:                                           ; No predecessors!
  %80 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %81 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %80, i64 0, i32 1
  %82 = load double, double* %81
  %83 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %80, i64 0, i32 2
  %84 = load %Array*, %Array** %83
  %85 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %80, i64 0, i32 3
  %86 = load i2, i2* %85
  %87 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %80, i64 0, i32 4
  %88 = load %Range, %Range* %87
  %89 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %80, i64 0, i32 5
  %90 = load i64, i64* %89
  %91 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %92 = bitcast %Tuple* %91 to { %Range, i64 }*
  %93 = getelementptr { %Range, i64 }, { %Range, i64 }* %92, i64 0, i32 0
  %94 = getelementptr { %Range, i64 }, { %Range, i64 }* %92, i64 0, i32 1
  store %Range %88, %Range* %93
  store i64 %90, i64* %94
  %95 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %96 = getelementptr { %Array* }, { %Array* }* %95, i64 0, i32 0
  %97 = load %Array*, %Array** %96
  %98 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %99 = bitcast %Tuple* %98 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %100 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %99, i64 0, i32 0
  %101 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %99, i64 0, i32 1
  %102 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %99, i64 0, i32 2
  %103 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %99, i64 0, i32 3
  %104 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %99, i64 0, i32 4
  store double %82, double* %100
  store %Array* %84, %Array** %101
  call void @__quantum__rt__array_reference(%Array* %84)
  store i2 %86, i2* %102
  store { %Range, i64 }* %92, { %Range, i64 }** %103
  call void @__quantum__rt__tuple_reference(%Tuple* %91)
  store %Array* %97, %Array** %104
  call void @__quantum__rt__array_reference(%Array* %97)
  %105 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %80, i64 0, i32 0
  %106 = load %Callable*, %Callable** %105
  call void @__quantum__rt__callable_invoke(%Callable* %106, %Tuple* %98, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_unreference(%Tuple* %91)
  call void @__quantum__rt__array_unreference(%Array* %84)
  call void @__quantum__rt__tuple_unreference(%Tuple* %91)
  call void @__quantum__rt__array_unreference(%Array* %97)
  call void @__quantum__rt__tuple_unreference(%Tuple* %98)
  ret void

entry6:                                           ; No predecessors!
  %107 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %108 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %107, i64 0, i32 1
  %109 = load %Callable*, %Callable** %108
  %110 = bitcast %Tuple* %arg-tuple to { { %Array* }* }*
  %111 = getelementptr { { %Array* }* }, { { %Array* }* }* %110, i64 0, i32 0
  %112 = load { %Array* }*, { %Array* }** %111
  %113 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %114 = bitcast %Tuple* %113 to { %Callable*, { %Array* }* }*
  %115 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %114, i64 0, i32 0
  %116 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %114, i64 0, i32 1
  store %Callable* %109, %Callable** %115
  call void @__quantum__rt__callable_reference(%Callable* %109)
  store { %Array* }* %112, { %Array* }** %116
  %117 = getelementptr { %Array* }, { %Array* }* %112, i64 0, i32 0
  %118 = load %Array*, %Array** %117
  call void @__quantum__rt__array_reference(%Array* %118)
  %119 = bitcast { %Array* }* %112 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %119)
  %120 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %107, i64 0, i32 0
  %121 = load %Callable*, %Callable** %120
  call void @__quantum__rt__callable_invoke(%Callable* %121, %Tuple* %113, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %109)
  call void @__quantum__rt__array_unreference(%Array* %118)
  call void @__quantum__rt__tuple_unreference(%Tuple* %119)
  call void @__quantum__rt__tuple_unreference(%Tuple* %113)
  ret void

entry7:                                           ; No predecessors!
  %122 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %123 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %122, i64 0, i32 1
  %124 = load %Array*, %Array** %123
  %125 = bitcast %Tuple* %arg-tuple to { { %Array* }* }*
  %126 = getelementptr { { %Array* }* }, { { %Array* }* }* %125, i64 0, i32 0
  %127 = load { %Array* }*, { %Array* }** %126
  %128 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %129 = bitcast %Tuple* %128 to { %Array*, { %Array* }* }*
  %130 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %129, i64 0, i32 0
  %131 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %129, i64 0, i32 1
  store %Array* %124, %Array** %130
  call void @__quantum__rt__array_reference(%Array* %124)
  store { %Array* }* %127, { %Array* }** %131
  %132 = getelementptr { %Array* }, { %Array* }* %127, i64 0, i32 0
  %133 = load %Array*, %Array** %132
  call void @__quantum__rt__array_reference(%Array* %133)
  %134 = bitcast { %Array* }* %127 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %134)
  %135 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %122, i64 0, i32 0
  %136 = load %Callable*, %Callable** %135
  call void @__quantum__rt__callable_invoke(%Callable* %136, %Tuple* %128, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %124)
  call void @__quantum__rt__array_unreference(%Array* %133)
  call void @__quantum__rt__tuple_unreference(%Tuple* %134)
  call void @__quantum__rt__tuple_unreference(%Tuple* %128)
  ret void

entry8:                                           ; No predecessors!
  %137 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %138 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %137, i64 0, i32 1
  %139 = load double, double* %138
  %140 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %137, i64 0, i32 2
  %141 = load i64, i64* %140
  %142 = bitcast %Tuple* %arg-tuple to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %143 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %142, i64 0, i32 0
  %144 = load double, double* %143
  %145 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %142, i64 0, i32 1
  %146 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %145
  %147 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %142, i64 0, i32 2
  %148 = load %Array*, %Array** %147
  %149 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %150 = bitcast %Tuple* %149 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %151 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 0
  %152 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 1
  %153 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 2
  %154 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 3
  %155 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 4
  store double %139, double* %151
  store i64 %141, i64* %152
  store double %144, double* %153
  store { { %Callable* }*, { i64, %Callable* }* }* %146, { { %Callable* }*, { i64, %Callable* }* }** %154
  %156 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %146, i64 0, i32 0
  %157 = load { %Callable* }*, { %Callable* }** %156
  %158 = getelementptr { %Callable* }, { %Callable* }* %157, i64 0, i32 0
  %159 = load %Callable*, %Callable** %158
  call void @__quantum__rt__callable_reference(%Callable* %159)
  %160 = bitcast { %Callable* }* %157 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %160)
  %161 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %146, i64 0, i32 1
  %162 = load { i64, %Callable* }*, { i64, %Callable* }** %161
  %163 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %162, i64 0, i32 1
  %164 = load %Callable*, %Callable** %163
  call void @__quantum__rt__callable_reference(%Callable* %164)
  %165 = bitcast { i64, %Callable* }* %162 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %165)
  %166 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %146 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %166)
  store %Array* %148, %Array** %155
  call void @__quantum__rt__array_reference(%Array* %148)
  %167 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %137, i64 0, i32 0
  %168 = load %Callable*, %Callable** %167
  call void @__quantum__rt__callable_invoke(%Callable* %168, %Tuple* %149, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %159)
  call void @__quantum__rt__tuple_unreference(%Tuple* %160)
  call void @__quantum__rt__callable_unreference(%Callable* %164)
  call void @__quantum__rt__tuple_unreference(%Tuple* %165)
  call void @__quantum__rt__tuple_unreference(%Tuple* %166)
  call void @__quantum__rt__array_unreference(%Array* %148)
  call void @__quantum__rt__tuple_unreference(%Tuple* %149)
  ret void

entry9:                                           ; No predecessors!
  %169 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %170 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %169, i64 0, i32 1
  %171 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %170
  %172 = bitcast %Tuple* %arg-tuple to { i64, double, %Array* }*
  %173 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %172, i64 0, i32 0
  %174 = load i64, i64* %173
  %175 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %172, i64 0, i32 1
  %176 = load double, double* %175
  %177 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %172, i64 0, i32 2
  %178 = load %Array*, %Array** %177
  %179 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %180 = bitcast %Tuple* %179 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %181 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %180, i64 0, i32 0
  %182 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %180, i64 0, i32 1
  %183 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %180, i64 0, i32 2
  %184 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %180, i64 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %171, { { %Callable* }*, { i64, %Callable* }* }** %181
  %185 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %171, i64 0, i32 0
  %186 = load { %Callable* }*, { %Callable* }** %185
  %187 = getelementptr { %Callable* }, { %Callable* }* %186, i64 0, i32 0
  %188 = load %Callable*, %Callable** %187
  call void @__quantum__rt__callable_reference(%Callable* %188)
  %189 = bitcast { %Callable* }* %186 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %189)
  %190 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %171, i64 0, i32 1
  %191 = load { i64, %Callable* }*, { i64, %Callable* }** %190
  %192 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %191, i64 0, i32 1
  %193 = load %Callable*, %Callable** %192
  call void @__quantum__rt__callable_reference(%Callable* %193)
  %194 = bitcast { i64, %Callable* }* %191 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %194)
  %195 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %171 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %195)
  store i64 %174, i64* %182
  store double %176, double* %183
  store %Array* %178, %Array** %184
  call void @__quantum__rt__array_reference(%Array* %178)
  %196 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %169, i64 0, i32 0
  %197 = load %Callable*, %Callable** %196
  call void @__quantum__rt__callable_invoke(%Callable* %197, %Tuple* %179, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %188)
  call void @__quantum__rt__tuple_unreference(%Tuple* %189)
  call void @__quantum__rt__callable_unreference(%Callable* %193)
  call void @__quantum__rt__tuple_unreference(%Tuple* %194)
  call void @__quantum__rt__tuple_unreference(%Tuple* %195)
  call void @__quantum__rt__array_unreference(%Array* %178)
  call void @__quantum__rt__tuple_unreference(%Tuple* %179)
  ret void

entry10:                                          ; No predecessors!
  %198 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %199 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %198, i64 0, i32 1
  %200 = load %Array*, %Array** %199
  %201 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %202 = getelementptr { %Array* }, { %Array* }* %201, i64 0, i32 0
  %203 = load %Array*, %Array** %202
  %204 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %205 = bitcast %Tuple* %204 to { %Array*, %Array* }*
  %206 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %205, i64 0, i32 0
  %207 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %205, i64 0, i32 1
  store %Array* %200, %Array** %206
  %208 = call i64 @__quantum__rt__array_get_size_1d(%Array* %200)
  %209 = sub i64 %208, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %entry10
  %210 = phi i64 [ 0, %entry10 ], [ %215, %exiting__13 ]
  %211 = icmp sle i64 %210, %209
  br i1 %211, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %212 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 %210)
  %213 = bitcast i8* %212 to %Callable**
  %214 = load %Callable*, %Callable** %213
  call void @__quantum__rt__callable_reference(%Callable* %214)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %215 = add i64 %210, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_reference(%Array* %200)
  store %Array* %203, %Array** %207
  call void @__quantum__rt__array_reference(%Array* %203)
  %216 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %198, i64 0, i32 0
  %217 = load %Callable*, %Callable** %216
  call void @__quantum__rt__callable_invoke(%Callable* %217, %Tuple* %204, %Tuple* %result-tuple)
  %218 = sub i64 %208, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %219 = phi i64 [ 0, %exit__13 ], [ %224, %exiting__14 ]
  %220 = icmp sle i64 %219, %218
  br i1 %220, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %221 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 %219)
  %222 = bitcast i8* %221 to %Callable**
  %223 = load %Callable*, %Callable** %222
  call void @__quantum__rt__callable_unreference(%Callable* %223)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %224 = add i64 %219, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_unreference(%Array* %200)
  call void @__quantum__rt__array_unreference(%Array* %203)
  call void @__quantum__rt__tuple_unreference(%Tuple* %204)
  ret void

entry11:                                          ; No predecessors!
  %225 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %226 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %225, i64 0, i32 1
  %227 = load i64, i64* %226
  %228 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %225, i64 0, i32 2
  %229 = load %Callable*, %Callable** %228
  %230 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %231 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %230, i64 0, i32 0
  %232 = load %Array*, %Array** %231
  %233 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %230, i64 0, i32 1
  %234 = load %Array*, %Array** %233
  %235 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %236 = bitcast %Tuple* %235 to { i64, %Callable*, %Array*, %Array* }*
  %237 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %236, i64 0, i32 0
  %238 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %236, i64 0, i32 1
  %239 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %236, i64 0, i32 2
  %240 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %236, i64 0, i32 3
  store i64 %227, i64* %237
  store %Callable* %229, %Callable** %238
  call void @__quantum__rt__callable_reference(%Callable* %229)
  store %Array* %232, %Array** %239
  call void @__quantum__rt__array_reference(%Array* %232)
  store %Array* %234, %Array** %240
  call void @__quantum__rt__array_reference(%Array* %234)
  %241 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %225, i64 0, i32 0
  %242 = load %Callable*, %Callable** %241
  call void @__quantum__rt__callable_invoke(%Callable* %242, %Tuple* %235, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %229)
  call void @__quantum__rt__array_unreference(%Array* %232)
  call void @__quantum__rt__array_unreference(%Array* %234)
  call void @__quantum__rt__tuple_unreference(%Tuple* %235)
  ret void

entry12:                                          ; No predecessors!
  %243 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %244 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %243, i64 0, i32 1
  %245 = load i64, i64* %244
  %246 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %243, i64 0, i32 2
  %247 = load %Callable*, %Callable** %246
  %248 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %249 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %248, i64 0, i32 0
  %250 = load %Array*, %Array** %249
  %251 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %248, i64 0, i32 1
  %252 = load %Qubit*, %Qubit** %251
  %253 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %254 = bitcast %Tuple* %253 to { i64, %Callable*, %Array*, %Qubit* }*
  %255 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %254, i64 0, i32 0
  %256 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %254, i64 0, i32 1
  %257 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %254, i64 0, i32 2
  %258 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %254, i64 0, i32 3
  store i64 %245, i64* %255
  store %Callable* %247, %Callable** %256
  call void @__quantum__rt__callable_reference(%Callable* %247)
  store %Array* %250, %Array** %257
  call void @__quantum__rt__array_reference(%Array* %250)
  store %Qubit* %252, %Qubit** %258
  %259 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %243, i64 0, i32 0
  %260 = load %Callable*, %Callable** %259
  call void @__quantum__rt__callable_invoke(%Callable* %260, %Tuple* %253, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %247)
  call void @__quantum__rt__array_unreference(%Array* %250)
  call void @__quantum__rt__tuple_unreference(%Tuple* %253)
  ret void

entry13:                                          ; No predecessors!
  %261 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %262 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %261, i64 0, i32 1
  %263 = load i64, i64* %262
  %264 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %261, i64 0, i32 2
  %265 = load %Callable*, %Callable** %264
  %266 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %267 = bitcast %Tuple* %266 to { i64, %Callable* }*
  %268 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %267, i64 0, i32 0
  %269 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %267, i64 0, i32 1
  store i64 %263, i64* %268
  store %Callable* %265, %Callable** %269
  call void @__quantum__rt__callable_reference(%Callable* %265)
  %270 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %271 = getelementptr { double, %Array* }, { double, %Array* }* %270, i64 0, i32 0
  %272 = load double, double* %271
  %273 = getelementptr { double, %Array* }, { double, %Array* }* %270, i64 0, i32 1
  %274 = load %Array*, %Array** %273
  %275 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %276 = bitcast %Tuple* %275 to { { i64, %Callable* }*, double, %Array* }*
  %277 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %276, i64 0, i32 0
  %278 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %276, i64 0, i32 1
  %279 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %276, i64 0, i32 2
  store { i64, %Callable* }* %267, { i64, %Callable* }** %277
  call void @__quantum__rt__callable_reference(%Callable* %265)
  call void @__quantum__rt__tuple_reference(%Tuple* %266)
  store double %272, double* %278
  store %Array* %274, %Array** %279
  call void @__quantum__rt__array_reference(%Array* %274)
  %280 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %261, i64 0, i32 0
  %281 = load %Callable*, %Callable** %280
  call void @__quantum__rt__callable_invoke(%Callable* %281, %Tuple* %275, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %265)
  call void @__quantum__rt__tuple_unreference(%Tuple* %266)
  call void @__quantum__rt__callable_unreference(%Callable* %265)
  call void @__quantum__rt__tuple_unreference(%Tuple* %266)
  call void @__quantum__rt__array_unreference(%Array* %274)
  call void @__quantum__rt__tuple_unreference(%Tuple* %275)
  ret void

entry14:                                          ; No predecessors!
  %282 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %283 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %282, i64 0, i32 1
  %284 = load %Callable*, %Callable** %283
  %285 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %282, i64 0, i32 2
  %286 = load %Callable*, %Callable** %285
  %287 = bitcast %Tuple* %arg-tuple to { double }*
  %288 = getelementptr { double }, { double }* %287, i64 0, i32 0
  %289 = load double, double* %288
  %290 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, double }* getelementptr ({ %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* null, i32 1) to i64))
  %291 = bitcast %Tuple* %290 to { %Callable*, %Callable*, double }*
  %292 = getelementptr { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %291, i64 0, i32 0
  %293 = getelementptr { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %291, i64 0, i32 1
  %294 = getelementptr { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %291, i64 0, i32 2
  store %Callable* %284, %Callable** %292
  call void @__quantum__rt__callable_reference(%Callable* %284)
  store %Callable* %286, %Callable** %293
  call void @__quantum__rt__callable_reference(%Callable* %286)
  store double %289, double* %294
  %295 = getelementptr { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %282, i64 0, i32 0
  %296 = load %Callable*, %Callable** %295
  call void @__quantum__rt__callable_invoke(%Callable* %296, %Tuple* %290, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %284)
  call void @__quantum__rt__callable_unreference(%Callable* %286)
  call void @__quantum__rt__tuple_unreference(%Tuple* %290)
  ret void

entry15:                                          ; No predecessors!
  %297 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %298 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %297, i64 0, i32 1
  %299 = load { i64, %Callable* }*, { i64, %Callable* }** %298
  %300 = bitcast %Tuple* %arg-tuple to { { %Array* }*, %Array* }*
  %301 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %300, i64 0, i32 0
  %302 = load { %Array* }*, { %Array* }** %301
  %303 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %300, i64 0, i32 1
  %304 = load %Array*, %Array** %303
  %305 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %306 = bitcast %Tuple* %305 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %307 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %306, i64 0, i32 0
  %308 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %306, i64 0, i32 1
  %309 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %306, i64 0, i32 2
  store { i64, %Callable* }* %299, { i64, %Callable* }** %307
  %310 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %299, i64 0, i32 1
  %311 = load %Callable*, %Callable** %310
  call void @__quantum__rt__callable_reference(%Callable* %311)
  %312 = bitcast { i64, %Callable* }* %299 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %312)
  store { %Array* }* %302, { %Array* }** %308
  %313 = getelementptr { %Array* }, { %Array* }* %302, i64 0, i32 0
  %314 = load %Array*, %Array** %313
  call void @__quantum__rt__array_reference(%Array* %314)
  %315 = bitcast { %Array* }* %302 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %315)
  store %Array* %304, %Array** %309
  call void @__quantum__rt__array_reference(%Array* %304)
  %316 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %297, i64 0, i32 0
  %317 = load %Callable*, %Callable** %316
  call void @__quantum__rt__callable_invoke(%Callable* %317, %Tuple* %305, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %311)
  call void @__quantum__rt__tuple_unreference(%Tuple* %312)
  call void @__quantum__rt__array_unreference(%Array* %314)
  call void @__quantum__rt__tuple_unreference(%Tuple* %315)
  call void @__quantum__rt__array_unreference(%Array* %304)
  call void @__quantum__rt__tuple_unreference(%Tuple* %305)
  ret void

entry16:                                          ; No predecessors!
  %318 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %319 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %318, i64 0, i32 1
  %320 = load %Array*, %Array** %319
  %321 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %318, i64 0, i32 2
  %322 = load %Callable*, %Callable** %321
  %323 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %324 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %323, i64 0, i32 0
  %325 = load %Array*, %Array** %324
  %326 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %323, i64 0, i32 1
  %327 = load %Qubit*, %Qubit** %326
  %328 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %329 = bitcast %Tuple* %328 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %330 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %329, i64 0, i32 0
  %331 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %329, i64 0, i32 1
  %332 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %329, i64 0, i32 2
  %333 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %329, i64 0, i32 3
  store %Array* %320, %Array** %330
  call void @__quantum__rt__array_reference(%Array* %320)
  store %Callable* %322, %Callable** %331
  call void @__quantum__rt__callable_reference(%Callable* %322)
  store %Array* %325, %Array** %332
  call void @__quantum__rt__array_reference(%Array* %325)
  store %Qubit* %327, %Qubit** %333
  %334 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %318, i64 0, i32 0
  %335 = load %Callable*, %Callable** %334
  call void @__quantum__rt__callable_invoke(%Callable* %335, %Tuple* %328, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %320)
  call void @__quantum__rt__callable_unreference(%Callable* %322)
  call void @__quantum__rt__array_unreference(%Array* %325)
  call void @__quantum__rt__tuple_unreference(%Tuple* %328)
  ret void

entry17:                                          ; No predecessors!
  %336 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %337 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %336, i64 0, i32 1
  %338 = load %Array*, %Array** %337
  %339 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %336, i64 0, i32 2
  %340 = load %Callable*, %Callable** %339
  %341 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %342 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %341, i64 0, i32 0
  %343 = load %Array*, %Array** %342
  %344 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %341, i64 0, i32 1
  %345 = load %Array*, %Array** %344
  %346 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %347 = bitcast %Tuple* %346 to { %Array*, %Callable*, %Array*, %Array* }*
  %348 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %347, i64 0, i32 0
  %349 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %347, i64 0, i32 1
  %350 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %347, i64 0, i32 2
  %351 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %347, i64 0, i32 3
  store %Array* %338, %Array** %348
  call void @__quantum__rt__array_reference(%Array* %338)
  store %Callable* %340, %Callable** %349
  call void @__quantum__rt__callable_reference(%Callable* %340)
  store %Array* %343, %Array** %350
  call void @__quantum__rt__array_reference(%Array* %343)
  store %Array* %345, %Array** %351
  call void @__quantum__rt__array_reference(%Array* %345)
  %352 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %336, i64 0, i32 0
  %353 = load %Callable*, %Callable** %352
  call void @__quantum__rt__callable_invoke(%Callable* %353, %Tuple* %346, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %338)
  call void @__quantum__rt__callable_unreference(%Callable* %340)
  call void @__quantum__rt__array_unreference(%Array* %343)
  call void @__quantum__rt__array_unreference(%Array* %345)
  call void @__quantum__rt__tuple_unreference(%Tuple* %346)
  ret void

entry18:                                          ; No predecessors!
  %354 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %355 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %354, i64 0, i32 1
  %356 = load double, double* %355
  %357 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %354, i64 0, i32 2
  %358 = load %Array*, %Array** %357
  %359 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %354, i64 0, i32 3
  %360 = load { %Array* }*, { %Array* }** %359
  %361 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %362 = getelementptr { %Qubit* }, { %Qubit* }* %361, i64 0, i32 0
  %363 = load %Qubit*, %Qubit** %362
  %364 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %365 = bitcast %Tuple* %364 to { double, %Array*, { %Array* }*, %Qubit* }*
  %366 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %365, i64 0, i32 0
  %367 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %365, i64 0, i32 1
  %368 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %365, i64 0, i32 2
  %369 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %365, i64 0, i32 3
  store double %356, double* %366
  store %Array* %358, %Array** %367
  call void @__quantum__rt__array_reference(%Array* %358)
  store { %Array* }* %360, { %Array* }** %368
  %370 = getelementptr { %Array* }, { %Array* }* %360, i64 0, i32 0
  %371 = load %Array*, %Array** %370
  call void @__quantum__rt__array_reference(%Array* %371)
  %372 = bitcast { %Array* }* %360 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %372)
  store %Qubit* %363, %Qubit** %369
  %373 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %354, i64 0, i32 0
  %374 = load %Callable*, %Callable** %373
  call void @__quantum__rt__callable_invoke(%Callable* %374, %Tuple* %364, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %358)
  call void @__quantum__rt__array_unreference(%Array* %371)
  call void @__quantum__rt__tuple_unreference(%Tuple* %372)
  call void @__quantum__rt__tuple_unreference(%Tuple* %364)
  ret void

entry19:                                          ; No predecessors!
  %375 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %376 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %375, i64 0, i32 1
  %377 = load double, double* %376
  %378 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %375, i64 0, i32 2
  %379 = load %Array*, %Array** %378
  %380 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %375, i64 0, i32 3
  %381 = load { %Array* }*, { %Array* }** %380
  %382 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %383 = getelementptr { %Qubit* }, { %Qubit* }* %382, i64 0, i32 0
  %384 = load %Qubit*, %Qubit** %383
  %385 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %386 = bitcast %Tuple* %385 to { double, %Array*, { %Array* }*, %Qubit* }*
  %387 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %386, i64 0, i32 0
  %388 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %386, i64 0, i32 1
  %389 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %386, i64 0, i32 2
  %390 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %386, i64 0, i32 3
  store double %377, double* %387
  store %Array* %379, %Array** %388
  call void @__quantum__rt__array_reference(%Array* %379)
  store { %Array* }* %381, { %Array* }** %389
  %391 = getelementptr { %Array* }, { %Array* }* %381, i64 0, i32 0
  %392 = load %Array*, %Array** %391
  call void @__quantum__rt__array_reference(%Array* %392)
  %393 = bitcast { %Array* }* %381 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %393)
  store %Qubit* %384, %Qubit** %390
  %394 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %375, i64 0, i32 0
  %395 = load %Callable*, %Callable** %394
  call void @__quantum__rt__callable_invoke(%Callable* %395, %Tuple* %385, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %379)
  call void @__quantum__rt__array_unreference(%Array* %392)
  call void @__quantum__rt__tuple_unreference(%Tuple* %393)
  call void @__quantum__rt__tuple_unreference(%Tuple* %385)
  ret void

entry20:                                          ; No predecessors!
  %396 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %397 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %396, i64 0, i32 1
  %398 = load double, double* %397
  %399 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %396, i64 0, i32 2
  %400 = load %Array*, %Array** %399
  %401 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %396, i64 0, i32 3
  %402 = load { %Array* }*, { %Array* }** %401
  %403 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %404 = getelementptr { %Qubit* }, { %Qubit* }* %403, i64 0, i32 0
  %405 = load %Qubit*, %Qubit** %404
  %406 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %407 = bitcast %Tuple* %406 to { double, %Array*, { %Array* }*, %Qubit* }*
  %408 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %407, i64 0, i32 0
  %409 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %407, i64 0, i32 1
  %410 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %407, i64 0, i32 2
  %411 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %407, i64 0, i32 3
  store double %398, double* %408
  store %Array* %400, %Array** %409
  call void @__quantum__rt__array_reference(%Array* %400)
  store { %Array* }* %402, { %Array* }** %410
  %412 = getelementptr { %Array* }, { %Array* }* %402, i64 0, i32 0
  %413 = load %Array*, %Array** %412
  call void @__quantum__rt__array_reference(%Array* %413)
  %414 = bitcast { %Array* }* %402 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %414)
  store %Qubit* %405, %Qubit** %411
  %415 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %396, i64 0, i32 0
  %416 = load %Callable*, %Callable** %415
  call void @__quantum__rt__callable_invoke(%Callable* %416, %Tuple* %406, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %400)
  call void @__quantum__rt__array_unreference(%Array* %413)
  call void @__quantum__rt__tuple_unreference(%Tuple* %414)
  call void @__quantum__rt__tuple_unreference(%Tuple* %406)
  ret void

entry21:                                          ; No predecessors!
  %417 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %418 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %417, i64 0, i32 1
  %419 = load double, double* %418
  %420 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %417, i64 0, i32 2
  %421 = load %Array*, %Array** %420
  %422 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %417, i64 0, i32 3
  %423 = load { %Array* }*, { %Array* }** %422
  %424 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %425 = getelementptr { %Qubit* }, { %Qubit* }* %424, i64 0, i32 0
  %426 = load %Qubit*, %Qubit** %425
  %427 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %428 = bitcast %Tuple* %427 to { double, %Array*, { %Array* }*, %Qubit* }*
  %429 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %428, i64 0, i32 0
  %430 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %428, i64 0, i32 1
  %431 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %428, i64 0, i32 2
  %432 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %428, i64 0, i32 3
  store double %419, double* %429
  store %Array* %421, %Array** %430
  call void @__quantum__rt__array_reference(%Array* %421)
  store { %Array* }* %423, { %Array* }** %431
  %433 = getelementptr { %Array* }, { %Array* }* %423, i64 0, i32 0
  %434 = load %Array*, %Array** %433
  call void @__quantum__rt__array_reference(%Array* %434)
  %435 = bitcast { %Array* }* %423 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %435)
  store %Qubit* %426, %Qubit** %432
  %436 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %417, i64 0, i32 0
  %437 = load %Callable*, %Callable** %436
  call void @__quantum__rt__callable_invoke(%Callable* %437, %Tuple* %427, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %421)
  call void @__quantum__rt__array_unreference(%Array* %434)
  call void @__quantum__rt__tuple_unreference(%Tuple* %435)
  call void @__quantum__rt__tuple_unreference(%Tuple* %427)
  ret void

entry22:                                          ; No predecessors!
  %438 = bitcast %Tuple* %arg-tuple to { i64 }*
  %439 = getelementptr { i64 }, { i64 }* %438, i64 0, i32 0
  %440 = load i64, i64* %439
  %441 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %442 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %441, i64 0, i32 1
  %443 = load %Array*, %Array** %442
  %444 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %445 = bitcast %Tuple* %444 to { i64, %Array* }*
  %446 = getelementptr { i64, %Array* }, { i64, %Array* }* %445, i64 0, i32 0
  %447 = getelementptr { i64, %Array* }, { i64, %Array* }* %445, i64 0, i32 1
  store i64 %440, i64* %446
  store %Array* %443, %Array** %447
  %448 = call i64 @__quantum__rt__array_get_size_1d(%Array* %443)
  %449 = sub i64 %448, 1
  br label %header__25

header__25:                                       ; preds = %exiting__25, %entry22
  %450 = phi i64 [ 0, %entry22 ], [ %455, %exiting__25 ]
  %451 = icmp sle i64 %450, %449
  br i1 %451, label %body__25, label %exit__25

body__25:                                         ; preds = %header__25
  %452 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %443, i64 %450)
  %453 = bitcast i8* %452 to %Callable**
  %454 = load %Callable*, %Callable** %453
  call void @__quantum__rt__callable_reference(%Callable* %454)
  br label %exiting__25

exiting__25:                                      ; preds = %body__25
  %455 = add i64 %450, 1
  br label %header__25

exit__25:                                         ; preds = %header__25
  call void @__quantum__rt__array_reference(%Array* %443)
  %456 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %441, i64 0, i32 0
  %457 = load %Callable*, %Callable** %456
  call void @__quantum__rt__callable_invoke(%Callable* %457, %Tuple* %444, %Tuple* %result-tuple)
  %458 = sub i64 %448, 1
  br label %header__26

header__26:                                       ; preds = %exiting__26, %exit__25
  %459 = phi i64 [ 0, %exit__25 ], [ %464, %exiting__26 ]
  %460 = icmp sle i64 %459, %458
  br i1 %460, label %body__26, label %exit__26

body__26:                                         ; preds = %header__26
  %461 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %443, i64 %459)
  %462 = bitcast i8* %461 to %Callable**
  %463 = load %Callable*, %Callable** %462
  call void @__quantum__rt__callable_unreference(%Callable* %463)
  br label %exiting__26

exiting__26:                                      ; preds = %body__26
  %464 = add i64 %459, 1
  br label %header__26

exit__26:                                         ; preds = %header__26
  call void @__quantum__rt__array_unreference(%Array* %443)
  call void @__quantum__rt__tuple_unreference(%Tuple* %444)
  ret void

entry23:                                          ; No predecessors!
  %465 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %466 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %465, i64 0, i32 1
  %467 = load %Array*, %Array** %466
  %468 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %469 = getelementptr { %Array* }, { %Array* }* %468, i64 0, i32 0
  %470 = load %Array*, %Array** %469
  %471 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %472 = bitcast %Tuple* %471 to { %Array*, %Array* }*
  %473 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %472, i64 0, i32 0
  %474 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %472, i64 0, i32 1
  store %Array* %467, %Array** %473
  call void @__quantum__rt__array_reference(%Array* %467)
  store %Array* %470, %Array** %474
  call void @__quantum__rt__array_reference(%Array* %470)
  %475 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %465, i64 0, i32 0
  %476 = load %Callable*, %Callable** %475
  call void @__quantum__rt__callable_invoke(%Callable* %476, %Tuple* %471, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %467)
  call void @__quantum__rt__array_unreference(%Array* %470)
  call void @__quantum__rt__tuple_unreference(%Tuple* %471)
  ret void

entry24:                                          ; No predecessors!
  %477 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %478 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %477, i64 0, i32 1
  %479 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %478
  %480 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %481 = getelementptr { double, %Array* }, { double, %Array* }* %480, i64 0, i32 0
  %482 = load double, double* %481
  %483 = getelementptr { double, %Array* }, { double, %Array* }* %480, i64 0, i32 1
  %484 = load %Array*, %Array** %483
  %485 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %486 = bitcast %Tuple* %485 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %487 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %486, i64 0, i32 0
  %488 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %486, i64 0, i32 1
  %489 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %486, i64 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %479, { { %Array*, %Array* }*, %Array* }** %487
  %490 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %479, i64 0, i32 0
  %491 = load { %Array*, %Array* }*, { %Array*, %Array* }** %490
  %492 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %491, i64 0, i32 0
  %493 = load %Array*, %Array** %492
  call void @__quantum__rt__array_reference(%Array* %493)
  %494 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %491, i64 0, i32 1
  %495 = load %Array*, %Array** %494
  call void @__quantum__rt__array_reference(%Array* %495)
  %496 = bitcast { %Array*, %Array* }* %491 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %496)
  %497 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %479, i64 0, i32 1
  %498 = load %Array*, %Array** %497
  call void @__quantum__rt__array_reference(%Array* %498)
  %499 = bitcast { { %Array*, %Array* }*, %Array* }* %479 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %499)
  store double %482, double* %488
  store %Array* %484, %Array** %489
  call void @__quantum__rt__array_reference(%Array* %484)
  %500 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %477, i64 0, i32 0
  %501 = load %Callable*, %Callable** %500
  call void @__quantum__rt__callable_invoke(%Callable* %501, %Tuple* %485, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %493)
  call void @__quantum__rt__array_unreference(%Array* %495)
  call void @__quantum__rt__tuple_unreference(%Tuple* %496)
  call void @__quantum__rt__array_unreference(%Array* %498)
  call void @__quantum__rt__tuple_unreference(%Tuple* %499)
  call void @__quantum__rt__array_unreference(%Array* %484)
  call void @__quantum__rt__tuple_unreference(%Tuple* %485)
  ret void

entry25:                                          ; No predecessors!
  %502 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %503 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %502, i64 0, i32 1
  %504 = load double, double* %503
  %505 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %502, i64 0, i32 2
  %506 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %505
  %507 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %508 = getelementptr { %Array* }, { %Array* }* %507, i64 0, i32 0
  %509 = load %Array*, %Array** %508
  %510 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %511 = bitcast %Tuple* %510 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %512 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %511, i64 0, i32 0
  %513 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %511, i64 0, i32 1
  %514 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %511, i64 0, i32 2
  store double %504, double* %512
  store { { %Callable* }*, { i64, %Callable* }* }* %506, { { %Callable* }*, { i64, %Callable* }* }** %513
  %515 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %506, i64 0, i32 0
  %516 = load { %Callable* }*, { %Callable* }** %515
  %517 = getelementptr { %Callable* }, { %Callable* }* %516, i64 0, i32 0
  %518 = load %Callable*, %Callable** %517
  call void @__quantum__rt__callable_reference(%Callable* %518)
  %519 = bitcast { %Callable* }* %516 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %519)
  %520 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %506, i64 0, i32 1
  %521 = load { i64, %Callable* }*, { i64, %Callable* }** %520
  %522 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %521, i64 0, i32 1
  %523 = load %Callable*, %Callable** %522
  call void @__quantum__rt__callable_reference(%Callable* %523)
  %524 = bitcast { i64, %Callable* }* %521 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %524)
  %525 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %506 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %525)
  store %Array* %509, %Array** %514
  call void @__quantum__rt__array_reference(%Array* %509)
  %526 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %502, i64 0, i32 0
  %527 = load %Callable*, %Callable** %526
  call void @__quantum__rt__callable_invoke(%Callable* %527, %Tuple* %510, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %518)
  call void @__quantum__rt__tuple_unreference(%Tuple* %519)
  call void @__quantum__rt__callable_unreference(%Callable* %523)
  call void @__quantum__rt__tuple_unreference(%Tuple* %524)
  call void @__quantum__rt__tuple_unreference(%Tuple* %525)
  call void @__quantum__rt__array_unreference(%Array* %509)
  call void @__quantum__rt__tuple_unreference(%Tuple* %510)
  ret void

entry26:                                          ; No predecessors!
  %528 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %529 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %528, i64 0, i32 0
  %530 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %529
  %531 = bitcast %Tuple* %capture-tuple to { %Callable* }*
  %532 = getelementptr { %Callable* }, { %Callable* }* %531, i64 0, i32 0
  %533 = load %Callable*, %Callable** %532
  %534 = bitcast { { %Array*, %Array* }*, %Array* }* %530 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %533, %Tuple* %534, %Tuple* %result-tuple)
  ret void

entry27:                                          ; No predecessors!
  %535 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %536 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %535, i64 0, i32 1
  %537 = load %Array*, %Array** %536
  %538 = bitcast %Tuple* %arg-tuple to { i64 }*
  %539 = getelementptr { i64 }, { i64 }* %538, i64 0, i32 0
  %540 = load i64, i64* %539
  %541 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, i64 }* getelementptr ({ %Array*, i64 }, { %Array*, i64 }* null, i32 1) to i64))
  %542 = bitcast %Tuple* %541 to { %Array*, i64 }*
  %543 = getelementptr { %Array*, i64 }, { %Array*, i64 }* %542, i64 0, i32 0
  %544 = getelementptr { %Array*, i64 }, { %Array*, i64 }* %542, i64 0, i32 1
  store %Array* %537, %Array** %543
  %545 = call i64 @__quantum__rt__array_get_size_1d(%Array* %537)
  %546 = sub i64 %545, 1
  br label %header__27

header__27:                                       ; preds = %exiting__27, %entry27
  %547 = phi i64 [ 0, %entry27 ], [ %558, %exiting__27 ]
  %548 = icmp sle i64 %547, %546
  br i1 %548, label %body__27, label %exit__27

body__27:                                         ; preds = %header__27
  %549 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %537, i64 %547)
  %550 = bitcast i8* %549 to { { double, double }*, %Array* }**
  %551 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %550
  %552 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %551, i64 0, i32 0
  %553 = load { double, double }*, { double, double }** %552
  %554 = bitcast { double, double }* %553 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %554)
  %555 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %551, i64 0, i32 1
  %556 = load %Array*, %Array** %555
  call void @__quantum__rt__array_reference(%Array* %556)
  %557 = bitcast { { double, double }*, %Array* }* %551 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %557)
  br label %exiting__27

exiting__27:                                      ; preds = %body__27
  %558 = add i64 %547, 1
  br label %header__27

exit__27:                                         ; preds = %header__27
  call void @__quantum__rt__array_reference(%Array* %537)
  store i64 %540, i64* %544
  %559 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %535, i64 0, i32 0
  %560 = load %Callable*, %Callable** %559
  call void @__quantum__rt__callable_invoke(%Callable* %560, %Tuple* %541, %Tuple* %result-tuple)
  %561 = sub i64 %545, 1
  br label %header__28

header__28:                                       ; preds = %exiting__28, %exit__27
  %562 = phi i64 [ 0, %exit__27 ], [ %573, %exiting__28 ]
  %563 = icmp sle i64 %562, %561
  br i1 %563, label %body__28, label %exit__28

body__28:                                         ; preds = %header__28
  %564 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %537, i64 %562)
  %565 = bitcast i8* %564 to { { double, double }*, %Array* }**
  %566 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %565
  %567 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %566, i64 0, i32 0
  %568 = load { double, double }*, { double, double }** %567
  %569 = bitcast { double, double }* %568 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %569)
  %570 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %566, i64 0, i32 1
  %571 = load %Array*, %Array** %570
  call void @__quantum__rt__array_unreference(%Array* %571)
  %572 = bitcast { { double, double }*, %Array* }* %566 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %572)
  br label %exiting__28

exiting__28:                                      ; preds = %body__28
  %573 = add i64 %562, 1
  br label %header__28

exit__28:                                         ; preds = %header__28
  call void @__quantum__rt__array_unreference(%Array* %537)
  call void @__quantum__rt__tuple_unreference(%Tuple* %541)
  ret void

entry28:                                          ; No predecessors!
  %574 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Array* }*
  %575 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %574, i64 0, i32 1
  %576 = load i64, i64* %575
  %577 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %574, i64 0, i32 2
  %578 = load %Array*, %Array** %577
  %579 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %580 = bitcast %Tuple* %579 to { i64, %Array* }*
  %581 = getelementptr { i64, %Array* }, { i64, %Array* }* %580, i64 0, i32 0
  %582 = getelementptr { i64, %Array* }, { i64, %Array* }* %580, i64 0, i32 1
  store i64 %576, i64* %581
  store %Array* %578, %Array** %582
  %583 = call i64 @__quantum__rt__array_get_size_1d(%Array* %578)
  %584 = sub i64 %583, 1
  br label %header__29

header__29:                                       ; preds = %exiting__29, %entry28
  %585 = phi i64 [ 0, %entry28 ], [ %596, %exiting__29 ]
  %586 = icmp sle i64 %585, %584
  br i1 %586, label %body__29, label %exit__29

body__29:                                         ; preds = %header__29
  %587 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %578, i64 %585)
  %588 = bitcast i8* %587 to { { double, double }*, %Array* }**
  %589 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %588
  %590 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %589, i64 0, i32 0
  %591 = load { double, double }*, { double, double }** %590
  %592 = bitcast { double, double }* %591 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %592)
  %593 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %589, i64 0, i32 1
  %594 = load %Array*, %Array** %593
  call void @__quantum__rt__array_reference(%Array* %594)
  %595 = bitcast { { double, double }*, %Array* }* %589 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %595)
  br label %exiting__29

exiting__29:                                      ; preds = %body__29
  %596 = add i64 %585, 1
  br label %header__29

exit__29:                                         ; preds = %header__29
  call void @__quantum__rt__array_reference(%Array* %578)
  %597 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %598 = getelementptr { %Array* }, { %Array* }* %597, i64 0, i32 0
  %599 = load %Array*, %Array** %598
  %600 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %601 = bitcast %Tuple* %600 to { { i64, %Array* }*, %Array* }*
  %602 = getelementptr { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %601, i64 0, i32 0
  %603 = getelementptr { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %601, i64 0, i32 1
  store { i64, %Array* }* %580, { i64, %Array* }** %602
  %604 = sub i64 %583, 1
  br label %header__30

header__30:                                       ; preds = %exiting__30, %exit__29
  %605 = phi i64 [ 0, %exit__29 ], [ %616, %exiting__30 ]
  %606 = icmp sle i64 %605, %604
  br i1 %606, label %body__30, label %exit__30

body__30:                                         ; preds = %header__30
  %607 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %578, i64 %605)
  %608 = bitcast i8* %607 to { { double, double }*, %Array* }**
  %609 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %608
  %610 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %609, i64 0, i32 0
  %611 = load { double, double }*, { double, double }** %610
  %612 = bitcast { double, double }* %611 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %612)
  %613 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %609, i64 0, i32 1
  %614 = load %Array*, %Array** %613
  call void @__quantum__rt__array_reference(%Array* %614)
  %615 = bitcast { { double, double }*, %Array* }* %609 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %615)
  br label %exiting__30

exiting__30:                                      ; preds = %body__30
  %616 = add i64 %605, 1
  br label %header__30

exit__30:                                         ; preds = %header__30
  call void @__quantum__rt__array_reference(%Array* %578)
  call void @__quantum__rt__tuple_reference(%Tuple* %579)
  store %Array* %599, %Array** %603
  call void @__quantum__rt__array_reference(%Array* %599)
  %617 = getelementptr { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %574, i64 0, i32 0
  %618 = load %Callable*, %Callable** %617
  call void @__quantum__rt__callable_invoke(%Callable* %618, %Tuple* %600, %Tuple* %result-tuple)
  %619 = sub i64 %583, 1
  br label %header__31

header__31:                                       ; preds = %exiting__31, %exit__30
  %620 = phi i64 [ 0, %exit__30 ], [ %631, %exiting__31 ]
  %621 = icmp sle i64 %620, %619
  br i1 %621, label %body__31, label %exit__31

body__31:                                         ; preds = %header__31
  %622 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %578, i64 %620)
  %623 = bitcast i8* %622 to { { double, double }*, %Array* }**
  %624 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %623
  %625 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %624, i64 0, i32 0
  %626 = load { double, double }*, { double, double }** %625
  %627 = bitcast { double, double }* %626 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %627)
  %628 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %624, i64 0, i32 1
  %629 = load %Array*, %Array** %628
  call void @__quantum__rt__array_unreference(%Array* %629)
  %630 = bitcast { { double, double }*, %Array* }* %624 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %630)
  br label %exiting__31

exiting__31:                                      ; preds = %body__31
  %631 = add i64 %620, 1
  br label %header__31

exit__31:                                         ; preds = %header__31
  call void @__quantum__rt__array_unreference(%Array* %578)
  call void @__quantum__rt__tuple_unreference(%Tuple* %579)
  %632 = sub i64 %583, 1
  br label %header__32

header__32:                                       ; preds = %exiting__32, %exit__31
  %633 = phi i64 [ 0, %exit__31 ], [ %644, %exiting__32 ]
  %634 = icmp sle i64 %633, %632
  br i1 %634, label %body__32, label %exit__32

body__32:                                         ; preds = %header__32
  %635 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %578, i64 %633)
  %636 = bitcast i8* %635 to { { double, double }*, %Array* }**
  %637 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %636
  %638 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %637, i64 0, i32 0
  %639 = load { double, double }*, { double, double }** %638
  %640 = bitcast { double, double }* %639 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %640)
  %641 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %637, i64 0, i32 1
  %642 = load %Array*, %Array** %641
  call void @__quantum__rt__array_unreference(%Array* %642)
  %643 = bitcast { { double, double }*, %Array* }* %637 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %643)
  br label %exiting__32

exiting__32:                                      ; preds = %body__32
  %644 = add i64 %633, 1
  br label %header__32

exit__32:                                         ; preds = %header__32
  call void @__quantum__rt__array_unreference(%Array* %578)
  call void @__quantum__rt__tuple_unreference(%Tuple* %579)
  call void @__quantum__rt__array_unreference(%Array* %599)
  call void @__quantum__rt__tuple_unreference(%Tuple* %600)
  ret void
}

define void @Microsoft__Quantum__Math__AbsD__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr { double }, { double }* %0, i64 0, i32 0
  %2 = load double, double* %1
  %3 = call double @Microsoft__Quantum__Math__AbsD__body(double %2)
  %4 = bitcast %Tuple* %result-tuple to { double }*
  %5 = getelementptr { double }, { double }* %4, i64 0, i32 0
  store double %3, double* %5
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %9 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_add_access(%Array* %10)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %11)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %13 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %12)
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %11, %Tuple* null)
  %14 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %15)
  %18 = bitcast i8* %17 to { double, double }**
  %19 = load { double, double }*, { double, double }** %18
  %20 = bitcast { double, double }* %19 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %20)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %10)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %11)
  call void @__quantum__rt__callable_unreference(%Callable* %13)
  ret void
}

declare void @__quantum__rt__callable_unreference(%Callable*)

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_add_access(%Array* %1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, double }*
  %5 = getelementptr { %Callable*, double }, { %Callable*, double }* %4, i64 0, i32 0
  %6 = getelementptr { %Callable*, double }, { %Callable*, double }* %4, i64 0, i32 1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar, %Tuple* null)
  store %Callable* %7, %Callable** %5
  store double 0.000000e+00, double* %6
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.1, %Tuple* %3)
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD, %Tuple* null)
  %10 = call %Callable* @Microsoft__Quantum__Canon___e946f2a1edb747cf9b42e36007e71c2e_Compose__body(%Callable* %8, %Callable* %9)
  %__qsVar0__coefficientsAsComplexPolar__ = call %Array* @Microsoft__Quantum__Arrays___7a0f632e69844d30a5c7aa63b85781d9_Mapped__body(%Callable* %10, %Array* %coefficients)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  %12 = sub i64 %11, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %13 = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %18)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %13, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__adj(double %tolerance, %Array* %__qsVar0__coefficientsAsComplexPolar__, { %Array* }* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  %20 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %26)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  call void @__quantum__rt__callable_unreference(%Callable* %8)
  call void @__quantum__rt__callable_unreference(%Callable* %9)
  call void @__quantum__rt__callable_unreference(%Callable* %10)
  %28 = sub i64 %11, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %9 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_add_access(%Array* %10)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %11)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %13 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %12)
  %14 = call %Callable* @__quantum__rt__callable_copy(%Callable* %13, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %14)
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %11, %Tuple* null)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %16)
  %19 = bitcast i8* %18 to { double, double }**
  %20 = load { double, double }*, { double, double }** %19
  %21 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %21)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %10)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %11)
  call void @__quantum__rt__callable_unreference(%Callable* %13)
  call void @__quantum__rt__callable_unreference(%Callable* %14)
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %3 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %5)
  %6 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Callable*, double }*
  %9 = getelementptr { %Callable*, double }, { %Callable*, double }* %8, i64 0, i32 0
  %10 = getelementptr { %Callable*, double }, { %Callable*, double }* %8, i64 0, i32 1
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar, %Tuple* null)
  store %Callable* %11, %Callable** %9
  store double 0.000000e+00, double* %10
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.2, %Tuple* %7)
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD, %Tuple* null)
  %14 = call %Callable* @Microsoft__Quantum__Canon___e946f2a1edb747cf9b42e36007e71c2e_Compose__body(%Callable* %12, %Callable* %13)
  %coefficientsAsComplexPolar = call %Array* @Microsoft__Quantum__Arrays___7a0f632e69844d30a5c7aa63b85781d9_Mapped__body(%Callable* %14, %Array* %coefficients)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsAsComplexPolar)
  %16 = sub i64 %15, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %17 = phi i64 [ 0, %entry ], [ %23, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %17)
  %20 = bitcast i8* %19 to { double, double }**
  %21 = load { double, double }*, { double, double }** %20
  %22 = bitcast { double, double }* %21 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %22)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %23 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficientsAsComplexPolar)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { double, %Array*, { %Array* }* }*
  %26 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i64 0, i32 0
  %27 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i64 0, i32 1
  %28 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i64 0, i32 2
  %29 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %30 = phi i64 [ 0, %exit__1 ], [ %36, %exiting__2 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %30)
  %33 = bitcast i8* %32 to { double, double }**
  %34 = load { double, double }*, { double, double }** %33
  %35 = bitcast { double, double }* %34 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %35)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %30, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_reference(%Array* %coefficientsAsComplexPolar)
  call void @__quantum__rt__array_reference(%Array* %5)
  call void @__quantum__rt__tuple_reference(%Tuple* %6)
  store double %tolerance, double* %26
  store %Array* %coefficientsAsComplexPolar, %Array** %27
  store { %Array* }* %qubits, { %Array* }** %28
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %25)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %5)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  %37 = sub i64 %15, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %38 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %38)
  %41 = bitcast i8* %40 to { double, double }**
  %42 = load { double, double }*, { double, double }** %41
  %43 = bitcast { double, double }* %42 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %43)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %38, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %coefficientsAsComplexPolar)
  call void @__quantum__rt__callable_unreference(%Callable* %12)
  call void @__quantum__rt__callable_unreference(%Callable* %13)
  call void @__quantum__rt__callable_unreference(%Callable* %14)
  %45 = sub i64 %15, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %52, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %46)
  %49 = bitcast i8* %48 to { double, double }**
  %50 = load { double, double }*, { double, double }** %49
  %51 = bitcast { double, double }* %50 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %51)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %52 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %coefficientsAsComplexPolar)
  %53 = sub i64 %15, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %54 = phi i64 [ 0, %exit__4 ], [ %60, %exiting__5 ]
  %55 = icmp sle i64 %54, %53
  br i1 %55, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %54)
  %57 = bitcast i8* %56 to { double, double }**
  %58 = load { double, double }*, { double, double }** %57
  %59 = bitcast { double, double }* %58 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %59)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %60 = add i64 %54, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %coefficientsAsComplexPolar)
  call void @__quantum__rt__array_unreference(%Array* %5)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %5)
  %8 = bitcast i8* %7 to { double, double }**
  %9 = load { double, double }*, { double, double }** %8
  %10 = bitcast { double, double }* %9 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %10)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %12 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %12
  %13 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %14 = load %Array*, %Array** %13
  call void @__quantum__rt__array_add_access(%Array* %14)
  %15 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %15)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %14)
  %17 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %16)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %20 = bitcast %Tuple* %19 to { %Array*, { %Array* }* }*
  %21 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i64 0, i32 0
  %22 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_reference(%Array* %14)
  call void @__quantum__rt__tuple_reference(%Tuple* %15)
  store %Array* %__controlQubits__, %Array** %21
  store { %Array* }* %qubits, { %Array* }** %22
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  %23 = sub i64 %3, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %24 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %25 = icmp sle i64 %24, %23
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %24)
  %27 = bitcast i8* %26 to { double, double }**
  %28 = load { double, double }*, { double, double }** %27
  %29 = bitcast { double, double }* %28 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %29)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %24, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %14)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %15)
  call void @__quantum__rt__callable_unreference(%Callable* %17)
  call void @__quantum__rt__callable_unreference(%Callable* %18)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %14)
  call void @__quantum__rt__tuple_unreference(%Tuple* %15)
  call void @__quantum__rt__tuple_unreference(%Tuple* %19)
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %3 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %5)
  %6 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Callable*, double }*
  %9 = getelementptr { %Callable*, double }, { %Callable*, double }* %8, i64 0, i32 0
  %10 = getelementptr { %Callable*, double }, { %Callable*, double }* %8, i64 0, i32 1
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar, %Tuple* null)
  store %Callable* %11, %Callable** %9
  store double 0.000000e+00, double* %10
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.3, %Tuple* %7)
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD, %Tuple* null)
  %14 = call %Callable* @Microsoft__Quantum__Canon___e946f2a1edb747cf9b42e36007e71c2e_Compose__body(%Callable* %12, %Callable* %13)
  %__qsVar0__coefficientsAsComplexPolar__ = call %Array* @Microsoft__Quantum__Arrays___7a0f632e69844d30a5c7aa63b85781d9_Mapped__body(%Callable* %14, %Array* %coefficients)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  %16 = sub i64 %15, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %17 = phi i64 [ 0, %entry ], [ %23, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %17)
  %20 = bitcast i8* %19 to { double, double }**
  %21 = load { double, double }*, { double, double }** %20
  %22 = bitcast { double, double }* %21 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %22)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %23 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { double, %Array*, { %Array* }* }*
  %26 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i64 0, i32 0
  %27 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i64 0, i32 1
  %28 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i64 0, i32 2
  %29 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %30 = phi i64 [ 0, %exit__1 ], [ %36, %exiting__2 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %30)
  %33 = bitcast i8* %32 to { double, double }**
  %34 = load { double, double }*, { double, double }** %33
  %35 = bitcast { double, double }* %34 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %35)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %30, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_reference(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  call void @__quantum__rt__array_reference(%Array* %5)
  call void @__quantum__rt__tuple_reference(%Tuple* %6)
  store double %tolerance, double* %26
  store %Array* %__qsVar0__coefficientsAsComplexPolar__, %Array** %27
  store { %Array* }* %qubits, { %Array* }** %28
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %25)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %5)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  %37 = sub i64 %15, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %38 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %38)
  %41 = bitcast i8* %40 to { double, double }**
  %42 = load { double, double }*, { double, double }** %41
  %43 = bitcast { double, double }* %42 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %43)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %38, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  call void @__quantum__rt__callable_unreference(%Callable* %12)
  call void @__quantum__rt__callable_unreference(%Callable* %13)
  call void @__quantum__rt__callable_unreference(%Callable* %14)
  %45 = sub i64 %15, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %52, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %46)
  %49 = bitcast i8* %48 to { double, double }**
  %50 = load { double, double }*, { double, double }** %49
  %51 = bitcast { double, double }* %50 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %51)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %52 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  %53 = sub i64 %15, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %54 = phi i64 [ 0, %exit__4 ], [ %60, %exiting__5 ]
  %55 = icmp sle i64 %54, %53
  br i1 %55, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %54)
  %57 = bitcast i8* %56 to { double, double }**
  %58 = load { double, double }*, { double, double }** %57
  %59 = bitcast { double, double }* %58 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %59)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %60 = add i64 %54, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  call void @__quantum__rt__array_unreference(%Array* %5)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  ret void
}

define void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %5)
  %8 = bitcast i8* %7 to { double, double }**
  %9 = load { double, double }*, { double, double }** %8
  %10 = bitcast { double, double }* %9 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %10)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %12 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %12
  %13 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %14 = load %Array*, %Array** %13
  call void @__quantum__rt__array_add_access(%Array* %14)
  %15 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %15)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %14)
  %17 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %16)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %20 = bitcast %Tuple* %19 to { %Array*, { %Array* }* }*
  %21 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i64 0, i32 0
  %22 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_reference(%Array* %14)
  call void @__quantum__rt__tuple_reference(%Tuple* %15)
  store %Array* %__controlQubits__, %Array** %21
  store { %Array* }* %qubits, { %Array* }** %22
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  %23 = sub i64 %3, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %24 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %25 = icmp sle i64 %24, %23
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %24)
  %27 = bitcast i8* %26 to { double, double }**
  %28 = load { double, double }*, { double, double }** %27
  %29 = bitcast { double, double }* %28 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %29)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %24, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %14)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %15)
  call void @__quantum__rt__callable_unreference(%Callable* %17)
  call void @__quantum__rt__callable_unreference(%Callable* %18)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %14)
  call void @__quantum__rt__tuple_unreference(%Tuple* %15)
  call void @__quantum__rt__tuple_unreference(%Tuple* %19)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____body(%Callable* %bareOp, { %Array* }* %register) {
entry:
  %0 = getelementptr { %Array* }, { %Array* }* %register, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_add_access(%Array* %1)
  %2 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array* }*
  %5 = getelementptr { %Array* }, { %Array* }* %4, i64 0, i32 0
  store %Array* %1, %Array** %5
  call void @__quantum__rt__array_reference(%Array* %1)
  call void @__quantum__rt__callable_invoke(%Callable* %bareOp, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  call void @__quantum__rt__array_unreference(%Array* %1)
  call void @__quantum__rt__tuple_unreference(%Tuple* %3)
  ret void
}

declare void @__quantum__rt__callable_invoke(%Callable*, %Tuple*, %Tuple*)

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____adj(%Callable* %bareOp, { %Array* }* %register) {
entry:
  %0 = getelementptr { %Array* }, { %Array* }* %register, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_add_access(%Array* %1)
  %2 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %3)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array* }*
  %6 = getelementptr { %Array* }, { %Array* }* %5, i64 0, i32 0
  store %Array* %1, %Array** %6
  call void @__quantum__rt__array_reference(%Array* %1)
  call void @__quantum__rt__callable_invoke(%Callable* %3, %Tuple* %4, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  call void @__quantum__rt__callable_unreference(%Callable* %3)
  call void @__quantum__rt__array_unreference(%Array* %1)
  call void @__quantum__rt__tuple_unreference(%Tuple* %4)
  ret void
}

declare %Callable* @__quantum__rt__callable_copy(%Callable*, i1)

declare void @__quantum__rt__callable_make_adjoint(%Callable*)

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____ctl(%Array* %__controlQubits__, { %Callable*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 0
  %bareOp = load %Callable*, %Callable** %1
  %2 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 1
  %register = load { %Array* }*, { %Array* }** %2
  %3 = getelementptr { %Array* }, { %Array* }* %register, i64 0, i32 0
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %4)
  %5 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %5)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %8, i64 0, i32 0
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %8, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_reference(%Array* %4)
  store %Array* %__controlQubits__, %Array** %9
  store %Array* %4, %Array** %10
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %4)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__callable_unreference(%Callable* %6)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %7)
  ret void
}

declare void @__quantum__rt__callable_make_controlled(%Callable*)

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____ctladj(%Array* %__controlQubits__, { %Callable*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 0
  %bareOp = load %Callable*, %Callable** %1
  %2 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 1
  %register = load { %Array* }*, { %Array* }** %2
  %3 = getelementptr { %Array* }, { %Array* }* %register, i64 0, i32 0
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %4)
  %5 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %5)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %8, i64 0, i32 0
  %10 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %8, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_reference(%Array* %4)
  store %Array* %__controlQubits__, %Array** %9
  store %Array* %4, %Array** %10
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %4)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__callable_unreference(%Callable* %6)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %7)
  ret void
}

define %Callable* @Microsoft__Quantum__Preparation__StatePreparationComplexCoefficients__body(%Array* %coefficients) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %10 = bitcast %Tuple* %9 to { %Callable*, %Array* }*
  %11 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %10, i64 0, i32 0
  %12 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %10, i64 0, i32 1
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP, %Tuple* null)
  %14 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %15)
  %18 = bitcast i8* %17 to { double, double }**
  %19 = load { double, double }*, { double, double }** %18
  %20 = bitcast { double, double }* %19 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %20)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  store %Callable* %13, %Callable** %11
  store %Array* %coefficients, %Array** %12
  %22 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.4, %Tuple* %9)
  %23 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %24 = phi i64 [ 0, %exit__2 ], [ %30, %exiting__3 ]
  %25 = icmp sle i64 %24, %23
  br i1 %25, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %24)
  %27 = bitcast i8* %26 to { double, double }**
  %28 = load { double, double }*, { double, double }** %27
  %29 = bitcast { double, double }* %28 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %29)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %30 = add i64 %24, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  ret %Callable* %22
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__body(%Array* %3, { %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__adj(%Array* %3, { %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctl(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctladj(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define void @Lifted__PartialApplication__1__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %2 = load %Array*, %Array** %1
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }* }*
  %4 = getelementptr { { %Array* }* }, { { %Array* }* }* %3, i64 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %7 = bitcast %Tuple* %6 to { %Array*, { %Array* }* }*
  %8 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %7, i64 0, i32 0
  %9 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %7, i64 0, i32 1
  store %Array* %2, %Array** %8
  %10 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %11 = sub i64 %10, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %entry
  %12 = phi i64 [ 0, %entry ], [ %18, %exiting__3 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %12)
  %15 = bitcast i8* %14 to { double, double }**
  %16 = load { double, double }*, { double, double }** %15
  %17 = bitcast { double, double }* %16 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %17)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %18 = add i64 %12, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_reference(%Array* %2)
  store { %Array* }* %5, { %Array* }** %9
  %19 = getelementptr { %Array* }, { %Array* }* %5, i64 0, i32 0
  %20 = load %Array*, %Array** %19
  call void @__quantum__rt__array_reference(%Array* %20)
  %21 = bitcast { %Array* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %21)
  %22 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %23 = load %Callable*, %Callable** %22
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %6, %Tuple* %result-tuple)
  %25 = sub i64 %10, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %26 = phi i64 [ 0, %exit__3 ], [ %32, %exiting__4 ]
  %27 = icmp sle i64 %26, %25
  br i1 %27, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %26)
  %29 = bitcast i8* %28 to { double, double }**
  %30 = load { double, double }*, { double, double }** %29
  %31 = bitcast { double, double }* %30 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %31)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %32 = add i64 %26, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %2)
  call void @__quantum__rt__array_unreference(%Array* %20)
  call void @__quantum__rt__tuple_unreference(%Tuple* %21)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  call void @__quantum__rt__callable_unreference(%Callable* %24)
  ret void

entry1:                                           ; No predecessors!
  %33 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %34 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %33, i64 0, i32 1
  %35 = load double, double* %34
  %36 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %33, i64 0, i32 2
  %37 = load %Array*, %Array** %36
  %38 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %33, i64 0, i32 3
  %39 = load i2, i2* %38
  %40 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %33, i64 0, i32 4
  %41 = load %Range, %Range* %40
  %42 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %33, i64 0, i32 5
  %43 = load i64, i64* %42
  %44 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %45 = bitcast %Tuple* %44 to { %Range, i64 }*
  %46 = getelementptr { %Range, i64 }, { %Range, i64 }* %45, i64 0, i32 0
  %47 = getelementptr { %Range, i64 }, { %Range, i64 }* %45, i64 0, i32 1
  store %Range %41, %Range* %46
  store i64 %43, i64* %47
  %48 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %49 = getelementptr { %Array* }, { %Array* }* %48, i64 0, i32 0
  %50 = load %Array*, %Array** %49
  %51 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %52 = bitcast %Tuple* %51 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %53 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %52, i64 0, i32 0
  %54 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %52, i64 0, i32 1
  %55 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %52, i64 0, i32 2
  %56 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %52, i64 0, i32 3
  %57 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %52, i64 0, i32 4
  store double %35, double* %53
  store %Array* %37, %Array** %54
  call void @__quantum__rt__array_reference(%Array* %37)
  store i2 %39, i2* %55
  store { %Range, i64 }* %45, { %Range, i64 }** %56
  call void @__quantum__rt__tuple_reference(%Tuple* %44)
  store %Array* %50, %Array** %57
  call void @__quantum__rt__array_reference(%Array* %50)
  %58 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %33, i64 0, i32 0
  %59 = load %Callable*, %Callable** %58
  %60 = call %Callable* @__quantum__rt__callable_copy(%Callable* %59, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %60)
  call void @__quantum__rt__callable_invoke(%Callable* %60, %Tuple* %51, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_unreference(%Tuple* %44)
  call void @__quantum__rt__array_unreference(%Array* %37)
  call void @__quantum__rt__tuple_unreference(%Tuple* %44)
  call void @__quantum__rt__array_unreference(%Array* %50)
  call void @__quantum__rt__tuple_unreference(%Tuple* %51)
  call void @__quantum__rt__callable_unreference(%Callable* %60)
  ret void

entry2:                                           ; No predecessors!
  %61 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %62 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %61, i64 0, i32 1
  %63 = load %Callable*, %Callable** %62
  %64 = bitcast %Tuple* %arg-tuple to { { %Array* }* }*
  %65 = getelementptr { { %Array* }* }, { { %Array* }* }* %64, i64 0, i32 0
  %66 = load { %Array* }*, { %Array* }** %65
  %67 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %68 = bitcast %Tuple* %67 to { %Callable*, { %Array* }* }*
  %69 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %68, i64 0, i32 0
  %70 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %68, i64 0, i32 1
  store %Callable* %63, %Callable** %69
  call void @__quantum__rt__callable_reference(%Callable* %63)
  store { %Array* }* %66, { %Array* }** %70
  %71 = getelementptr { %Array* }, { %Array* }* %66, i64 0, i32 0
  %72 = load %Array*, %Array** %71
  call void @__quantum__rt__array_reference(%Array* %72)
  %73 = bitcast { %Array* }* %66 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %73)
  %74 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %61, i64 0, i32 0
  %75 = load %Callable*, %Callable** %74
  %76 = call %Callable* @__quantum__rt__callable_copy(%Callable* %75, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %76)
  call void @__quantum__rt__callable_invoke(%Callable* %76, %Tuple* %67, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %63)
  call void @__quantum__rt__array_unreference(%Array* %72)
  call void @__quantum__rt__tuple_unreference(%Tuple* %73)
  call void @__quantum__rt__tuple_unreference(%Tuple* %67)
  call void @__quantum__rt__callable_unreference(%Callable* %76)
  ret void

entry3:                                           ; No predecessors!
  %77 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %78 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %77, i64 0, i32 1
  %79 = load %Array*, %Array** %78
  %80 = bitcast %Tuple* %arg-tuple to { { %Array* }* }*
  %81 = getelementptr { { %Array* }* }, { { %Array* }* }* %80, i64 0, i32 0
  %82 = load { %Array* }*, { %Array* }** %81
  %83 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %84 = bitcast %Tuple* %83 to { %Array*, { %Array* }* }*
  %85 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %84, i64 0, i32 0
  %86 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %84, i64 0, i32 1
  store %Array* %79, %Array** %85
  call void @__quantum__rt__array_reference(%Array* %79)
  store { %Array* }* %82, { %Array* }** %86
  %87 = getelementptr { %Array* }, { %Array* }* %82, i64 0, i32 0
  %88 = load %Array*, %Array** %87
  call void @__quantum__rt__array_reference(%Array* %88)
  %89 = bitcast { %Array* }* %82 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %89)
  %90 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %77, i64 0, i32 0
  %91 = load %Callable*, %Callable** %90
  %92 = call %Callable* @__quantum__rt__callable_copy(%Callable* %91, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %92)
  call void @__quantum__rt__callable_invoke(%Callable* %92, %Tuple* %83, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %79)
  call void @__quantum__rt__array_unreference(%Array* %88)
  call void @__quantum__rt__tuple_unreference(%Tuple* %89)
  call void @__quantum__rt__tuple_unreference(%Tuple* %83)
  call void @__quantum__rt__callable_unreference(%Callable* %92)
  ret void

entry4:                                           ; No predecessors!
  %93 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %94 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %93, i64 0, i32 1
  %95 = load double, double* %94
  %96 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %93, i64 0, i32 2
  %97 = load i64, i64* %96
  %98 = bitcast %Tuple* %arg-tuple to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %99 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %98, i64 0, i32 0
  %100 = load double, double* %99
  %101 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %98, i64 0, i32 1
  %102 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %101
  %103 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %98, i64 0, i32 2
  %104 = load %Array*, %Array** %103
  %105 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %106 = bitcast %Tuple* %105 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %107 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %106, i64 0, i32 0
  %108 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %106, i64 0, i32 1
  %109 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %106, i64 0, i32 2
  %110 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %106, i64 0, i32 3
  %111 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %106, i64 0, i32 4
  store double %95, double* %107
  store i64 %97, i64* %108
  store double %100, double* %109
  store { { %Callable* }*, { i64, %Callable* }* }* %102, { { %Callable* }*, { i64, %Callable* }* }** %110
  %112 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %102, i64 0, i32 0
  %113 = load { %Callable* }*, { %Callable* }** %112
  %114 = getelementptr { %Callable* }, { %Callable* }* %113, i64 0, i32 0
  %115 = load %Callable*, %Callable** %114
  call void @__quantum__rt__callable_reference(%Callable* %115)
  %116 = bitcast { %Callable* }* %113 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %116)
  %117 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %102, i64 0, i32 1
  %118 = load { i64, %Callable* }*, { i64, %Callable* }** %117
  %119 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %118, i64 0, i32 1
  %120 = load %Callable*, %Callable** %119
  call void @__quantum__rt__callable_reference(%Callable* %120)
  %121 = bitcast { i64, %Callable* }* %118 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %121)
  %122 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %102 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %122)
  store %Array* %104, %Array** %111
  call void @__quantum__rt__array_reference(%Array* %104)
  %123 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %93, i64 0, i32 0
  %124 = load %Callable*, %Callable** %123
  %125 = call %Callable* @__quantum__rt__callable_copy(%Callable* %124, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %125)
  call void @__quantum__rt__callable_invoke(%Callable* %125, %Tuple* %105, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %115)
  call void @__quantum__rt__tuple_unreference(%Tuple* %116)
  call void @__quantum__rt__callable_unreference(%Callable* %120)
  call void @__quantum__rt__tuple_unreference(%Tuple* %121)
  call void @__quantum__rt__tuple_unreference(%Tuple* %122)
  call void @__quantum__rt__array_unreference(%Array* %104)
  call void @__quantum__rt__tuple_unreference(%Tuple* %105)
  call void @__quantum__rt__callable_unreference(%Callable* %125)
  ret void

entry5:                                           ; No predecessors!
  %126 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %127 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %126, i64 0, i32 1
  %128 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %127
  %129 = bitcast %Tuple* %arg-tuple to { i64, double, %Array* }*
  %130 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %129, i64 0, i32 0
  %131 = load i64, i64* %130
  %132 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %129, i64 0, i32 1
  %133 = load double, double* %132
  %134 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %129, i64 0, i32 2
  %135 = load %Array*, %Array** %134
  %136 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %137 = bitcast %Tuple* %136 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %138 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %137, i64 0, i32 0
  %139 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %137, i64 0, i32 1
  %140 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %137, i64 0, i32 2
  %141 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %137, i64 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %128, { { %Callable* }*, { i64, %Callable* }* }** %138
  %142 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %128, i64 0, i32 0
  %143 = load { %Callable* }*, { %Callable* }** %142
  %144 = getelementptr { %Callable* }, { %Callable* }* %143, i64 0, i32 0
  %145 = load %Callable*, %Callable** %144
  call void @__quantum__rt__callable_reference(%Callable* %145)
  %146 = bitcast { %Callable* }* %143 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %146)
  %147 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %128, i64 0, i32 1
  %148 = load { i64, %Callable* }*, { i64, %Callable* }** %147
  %149 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %148, i64 0, i32 1
  %150 = load %Callable*, %Callable** %149
  call void @__quantum__rt__callable_reference(%Callable* %150)
  %151 = bitcast { i64, %Callable* }* %148 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %151)
  %152 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %128 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %152)
  store i64 %131, i64* %139
  store double %133, double* %140
  store %Array* %135, %Array** %141
  call void @__quantum__rt__array_reference(%Array* %135)
  %153 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %126, i64 0, i32 0
  %154 = load %Callable*, %Callable** %153
  %155 = call %Callable* @__quantum__rt__callable_copy(%Callable* %154, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %155)
  call void @__quantum__rt__callable_invoke(%Callable* %155, %Tuple* %136, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %145)
  call void @__quantum__rt__tuple_unreference(%Tuple* %146)
  call void @__quantum__rt__callable_unreference(%Callable* %150)
  call void @__quantum__rt__tuple_unreference(%Tuple* %151)
  call void @__quantum__rt__tuple_unreference(%Tuple* %152)
  call void @__quantum__rt__array_unreference(%Array* %135)
  call void @__quantum__rt__tuple_unreference(%Tuple* %136)
  call void @__quantum__rt__callable_unreference(%Callable* %155)
  ret void

entry6:                                           ; No predecessors!
  %156 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %157 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %156, i64 0, i32 1
  %158 = load %Array*, %Array** %157
  %159 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %160 = getelementptr { %Array* }, { %Array* }* %159, i64 0, i32 0
  %161 = load %Array*, %Array** %160
  %162 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %163 = bitcast %Tuple* %162 to { %Array*, %Array* }*
  %164 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %163, i64 0, i32 0
  %165 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %163, i64 0, i32 1
  store %Array* %158, %Array** %164
  %166 = call i64 @__quantum__rt__array_get_size_1d(%Array* %158)
  %167 = sub i64 %166, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %entry6
  %168 = phi i64 [ 0, %entry6 ], [ %173, %exiting__15 ]
  %169 = icmp sle i64 %168, %167
  br i1 %169, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %170 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %168)
  %171 = bitcast i8* %170 to %Callable**
  %172 = load %Callable*, %Callable** %171
  call void @__quantum__rt__callable_reference(%Callable* %172)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %173 = add i64 %168, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_reference(%Array* %158)
  store %Array* %161, %Array** %165
  call void @__quantum__rt__array_reference(%Array* %161)
  %174 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %156, i64 0, i32 0
  %175 = load %Callable*, %Callable** %174
  %176 = call %Callable* @__quantum__rt__callable_copy(%Callable* %175, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %176)
  call void @__quantum__rt__callable_invoke(%Callable* %176, %Tuple* %162, %Tuple* %result-tuple)
  %177 = sub i64 %166, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %178 = phi i64 [ 0, %exit__15 ], [ %183, %exiting__16 ]
  %179 = icmp sle i64 %178, %177
  br i1 %179, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %180 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %178)
  %181 = bitcast i8* %180 to %Callable**
  %182 = load %Callable*, %Callable** %181
  call void @__quantum__rt__callable_unreference(%Callable* %182)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %183 = add i64 %178, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_unreference(%Array* %158)
  call void @__quantum__rt__array_unreference(%Array* %161)
  call void @__quantum__rt__tuple_unreference(%Tuple* %162)
  call void @__quantum__rt__callable_unreference(%Callable* %176)
  ret void

entry7:                                           ; No predecessors!
  %184 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %185 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %184, i64 0, i32 1
  %186 = load i64, i64* %185
  %187 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %184, i64 0, i32 2
  %188 = load %Callable*, %Callable** %187
  %189 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %190 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %189, i64 0, i32 0
  %191 = load %Array*, %Array** %190
  %192 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %189, i64 0, i32 1
  %193 = load %Array*, %Array** %192
  %194 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %195 = bitcast %Tuple* %194 to { i64, %Callable*, %Array*, %Array* }*
  %196 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %195, i64 0, i32 0
  %197 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %195, i64 0, i32 1
  %198 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %195, i64 0, i32 2
  %199 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %195, i64 0, i32 3
  store i64 %186, i64* %196
  store %Callable* %188, %Callable** %197
  call void @__quantum__rt__callable_reference(%Callable* %188)
  store %Array* %191, %Array** %198
  call void @__quantum__rt__array_reference(%Array* %191)
  store %Array* %193, %Array** %199
  call void @__quantum__rt__array_reference(%Array* %193)
  %200 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %184, i64 0, i32 0
  %201 = load %Callable*, %Callable** %200
  %202 = call %Callable* @__quantum__rt__callable_copy(%Callable* %201, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %202)
  call void @__quantum__rt__callable_invoke(%Callable* %202, %Tuple* %194, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %188)
  call void @__quantum__rt__array_unreference(%Array* %191)
  call void @__quantum__rt__array_unreference(%Array* %193)
  call void @__quantum__rt__tuple_unreference(%Tuple* %194)
  call void @__quantum__rt__callable_unreference(%Callable* %202)
  ret void

entry8:                                           ; No predecessors!
  %203 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %204 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %203, i64 0, i32 1
  %205 = load i64, i64* %204
  %206 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %203, i64 0, i32 2
  %207 = load %Callable*, %Callable** %206
  %208 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %209 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %208, i64 0, i32 0
  %210 = load %Array*, %Array** %209
  %211 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %208, i64 0, i32 1
  %212 = load %Qubit*, %Qubit** %211
  %213 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %214 = bitcast %Tuple* %213 to { i64, %Callable*, %Array*, %Qubit* }*
  %215 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %214, i64 0, i32 0
  %216 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %214, i64 0, i32 1
  %217 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %214, i64 0, i32 2
  %218 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %214, i64 0, i32 3
  store i64 %205, i64* %215
  store %Callable* %207, %Callable** %216
  call void @__quantum__rt__callable_reference(%Callable* %207)
  store %Array* %210, %Array** %217
  call void @__quantum__rt__array_reference(%Array* %210)
  store %Qubit* %212, %Qubit** %218
  %219 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %203, i64 0, i32 0
  %220 = load %Callable*, %Callable** %219
  %221 = call %Callable* @__quantum__rt__callable_copy(%Callable* %220, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %221)
  call void @__quantum__rt__callable_invoke(%Callable* %221, %Tuple* %213, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %207)
  call void @__quantum__rt__array_unreference(%Array* %210)
  call void @__quantum__rt__tuple_unreference(%Tuple* %213)
  call void @__quantum__rt__callable_unreference(%Callable* %221)
  ret void

entry9:                                           ; No predecessors!
  %222 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %223 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %222, i64 0, i32 1
  %224 = load i64, i64* %223
  %225 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %222, i64 0, i32 2
  %226 = load %Callable*, %Callable** %225
  %227 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %228 = bitcast %Tuple* %227 to { i64, %Callable* }*
  %229 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %228, i64 0, i32 0
  %230 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %228, i64 0, i32 1
  store i64 %224, i64* %229
  store %Callable* %226, %Callable** %230
  call void @__quantum__rt__callable_reference(%Callable* %226)
  %231 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %232 = getelementptr { double, %Array* }, { double, %Array* }* %231, i64 0, i32 0
  %233 = load double, double* %232
  %234 = getelementptr { double, %Array* }, { double, %Array* }* %231, i64 0, i32 1
  %235 = load %Array*, %Array** %234
  %236 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %237 = bitcast %Tuple* %236 to { { i64, %Callable* }*, double, %Array* }*
  %238 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %237, i64 0, i32 0
  %239 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %237, i64 0, i32 1
  %240 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %237, i64 0, i32 2
  store { i64, %Callable* }* %228, { i64, %Callable* }** %238
  call void @__quantum__rt__callable_reference(%Callable* %226)
  call void @__quantum__rt__tuple_reference(%Tuple* %227)
  store double %233, double* %239
  store %Array* %235, %Array** %240
  call void @__quantum__rt__array_reference(%Array* %235)
  %241 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %222, i64 0, i32 0
  %242 = load %Callable*, %Callable** %241
  %243 = call %Callable* @__quantum__rt__callable_copy(%Callable* %242, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %243)
  call void @__quantum__rt__callable_invoke(%Callable* %243, %Tuple* %236, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %226)
  call void @__quantum__rt__tuple_unreference(%Tuple* %227)
  call void @__quantum__rt__callable_unreference(%Callable* %226)
  call void @__quantum__rt__tuple_unreference(%Tuple* %227)
  call void @__quantum__rt__array_unreference(%Array* %235)
  call void @__quantum__rt__tuple_unreference(%Tuple* %236)
  call void @__quantum__rt__callable_unreference(%Callable* %243)
  ret void

entry10:                                          ; No predecessors!
  %244 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %245 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %244, i64 0, i32 1
  %246 = load { i64, %Callable* }*, { i64, %Callable* }** %245
  %247 = bitcast %Tuple* %arg-tuple to { { %Array* }*, %Array* }*
  %248 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %247, i64 0, i32 0
  %249 = load { %Array* }*, { %Array* }** %248
  %250 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %247, i64 0, i32 1
  %251 = load %Array*, %Array** %250
  %252 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %253 = bitcast %Tuple* %252 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %254 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %253, i64 0, i32 0
  %255 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %253, i64 0, i32 1
  %256 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %253, i64 0, i32 2
  store { i64, %Callable* }* %246, { i64, %Callable* }** %254
  %257 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %246, i64 0, i32 1
  %258 = load %Callable*, %Callable** %257
  call void @__quantum__rt__callable_reference(%Callable* %258)
  %259 = bitcast { i64, %Callable* }* %246 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %259)
  store { %Array* }* %249, { %Array* }** %255
  %260 = getelementptr { %Array* }, { %Array* }* %249, i64 0, i32 0
  %261 = load %Array*, %Array** %260
  call void @__quantum__rt__array_reference(%Array* %261)
  %262 = bitcast { %Array* }* %249 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %262)
  store %Array* %251, %Array** %256
  call void @__quantum__rt__array_reference(%Array* %251)
  %263 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %244, i64 0, i32 0
  %264 = load %Callable*, %Callable** %263
  %265 = call %Callable* @__quantum__rt__callable_copy(%Callable* %264, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %265)
  call void @__quantum__rt__callable_invoke(%Callable* %265, %Tuple* %252, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %258)
  call void @__quantum__rt__tuple_unreference(%Tuple* %259)
  call void @__quantum__rt__array_unreference(%Array* %261)
  call void @__quantum__rt__tuple_unreference(%Tuple* %262)
  call void @__quantum__rt__array_unreference(%Array* %251)
  call void @__quantum__rt__tuple_unreference(%Tuple* %252)
  call void @__quantum__rt__callable_unreference(%Callable* %265)
  ret void

entry11:                                          ; No predecessors!
  %266 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %267 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %266, i64 0, i32 1
  %268 = load %Array*, %Array** %267
  %269 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %266, i64 0, i32 2
  %270 = load %Callable*, %Callable** %269
  %271 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %272 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %271, i64 0, i32 0
  %273 = load %Array*, %Array** %272
  %274 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %271, i64 0, i32 1
  %275 = load %Qubit*, %Qubit** %274
  %276 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %277 = bitcast %Tuple* %276 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %278 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %277, i64 0, i32 0
  %279 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %277, i64 0, i32 1
  %280 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %277, i64 0, i32 2
  %281 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %277, i64 0, i32 3
  store %Array* %268, %Array** %278
  call void @__quantum__rt__array_reference(%Array* %268)
  store %Callable* %270, %Callable** %279
  call void @__quantum__rt__callable_reference(%Callable* %270)
  store %Array* %273, %Array** %280
  call void @__quantum__rt__array_reference(%Array* %273)
  store %Qubit* %275, %Qubit** %281
  %282 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %266, i64 0, i32 0
  %283 = load %Callable*, %Callable** %282
  %284 = call %Callable* @__quantum__rt__callable_copy(%Callable* %283, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %284)
  call void @__quantum__rt__callable_invoke(%Callable* %284, %Tuple* %276, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %268)
  call void @__quantum__rt__callable_unreference(%Callable* %270)
  call void @__quantum__rt__array_unreference(%Array* %273)
  call void @__quantum__rt__tuple_unreference(%Tuple* %276)
  call void @__quantum__rt__callable_unreference(%Callable* %284)
  ret void

entry12:                                          ; No predecessors!
  %285 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %286 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %285, i64 0, i32 1
  %287 = load %Array*, %Array** %286
  %288 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %285, i64 0, i32 2
  %289 = load %Callable*, %Callable** %288
  %290 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %291 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %290, i64 0, i32 0
  %292 = load %Array*, %Array** %291
  %293 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %290, i64 0, i32 1
  %294 = load %Array*, %Array** %293
  %295 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %296 = bitcast %Tuple* %295 to { %Array*, %Callable*, %Array*, %Array* }*
  %297 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %296, i64 0, i32 0
  %298 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %296, i64 0, i32 1
  %299 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %296, i64 0, i32 2
  %300 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %296, i64 0, i32 3
  store %Array* %287, %Array** %297
  call void @__quantum__rt__array_reference(%Array* %287)
  store %Callable* %289, %Callable** %298
  call void @__quantum__rt__callable_reference(%Callable* %289)
  store %Array* %292, %Array** %299
  call void @__quantum__rt__array_reference(%Array* %292)
  store %Array* %294, %Array** %300
  call void @__quantum__rt__array_reference(%Array* %294)
  %301 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %285, i64 0, i32 0
  %302 = load %Callable*, %Callable** %301
  %303 = call %Callable* @__quantum__rt__callable_copy(%Callable* %302, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %303)
  call void @__quantum__rt__callable_invoke(%Callable* %303, %Tuple* %295, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %287)
  call void @__quantum__rt__callable_unreference(%Callable* %289)
  call void @__quantum__rt__array_unreference(%Array* %292)
  call void @__quantum__rt__array_unreference(%Array* %294)
  call void @__quantum__rt__tuple_unreference(%Tuple* %295)
  call void @__quantum__rt__callable_unreference(%Callable* %303)
  ret void

entry13:                                          ; No predecessors!
  %304 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %305 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %304, i64 0, i32 1
  %306 = load double, double* %305
  %307 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %304, i64 0, i32 2
  %308 = load %Array*, %Array** %307
  %309 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %304, i64 0, i32 3
  %310 = load { %Array* }*, { %Array* }** %309
  %311 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %312 = getelementptr { %Qubit* }, { %Qubit* }* %311, i64 0, i32 0
  %313 = load %Qubit*, %Qubit** %312
  %314 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %315 = bitcast %Tuple* %314 to { double, %Array*, { %Array* }*, %Qubit* }*
  %316 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %315, i64 0, i32 0
  %317 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %315, i64 0, i32 1
  %318 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %315, i64 0, i32 2
  %319 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %315, i64 0, i32 3
  store double %306, double* %316
  store %Array* %308, %Array** %317
  call void @__quantum__rt__array_reference(%Array* %308)
  store { %Array* }* %310, { %Array* }** %318
  %320 = getelementptr { %Array* }, { %Array* }* %310, i64 0, i32 0
  %321 = load %Array*, %Array** %320
  call void @__quantum__rt__array_reference(%Array* %321)
  %322 = bitcast { %Array* }* %310 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %322)
  store %Qubit* %313, %Qubit** %319
  %323 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %304, i64 0, i32 0
  %324 = load %Callable*, %Callable** %323
  %325 = call %Callable* @__quantum__rt__callable_copy(%Callable* %324, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %325)
  call void @__quantum__rt__callable_invoke(%Callable* %325, %Tuple* %314, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %308)
  call void @__quantum__rt__array_unreference(%Array* %321)
  call void @__quantum__rt__tuple_unreference(%Tuple* %322)
  call void @__quantum__rt__tuple_unreference(%Tuple* %314)
  call void @__quantum__rt__callable_unreference(%Callable* %325)
  ret void

entry14:                                          ; No predecessors!
  %326 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %327 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %326, i64 0, i32 1
  %328 = load double, double* %327
  %329 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %326, i64 0, i32 2
  %330 = load %Array*, %Array** %329
  %331 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %326, i64 0, i32 3
  %332 = load { %Array* }*, { %Array* }** %331
  %333 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %334 = getelementptr { %Qubit* }, { %Qubit* }* %333, i64 0, i32 0
  %335 = load %Qubit*, %Qubit** %334
  %336 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %337 = bitcast %Tuple* %336 to { double, %Array*, { %Array* }*, %Qubit* }*
  %338 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %337, i64 0, i32 0
  %339 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %337, i64 0, i32 1
  %340 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %337, i64 0, i32 2
  %341 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %337, i64 0, i32 3
  store double %328, double* %338
  store %Array* %330, %Array** %339
  call void @__quantum__rt__array_reference(%Array* %330)
  store { %Array* }* %332, { %Array* }** %340
  %342 = getelementptr { %Array* }, { %Array* }* %332, i64 0, i32 0
  %343 = load %Array*, %Array** %342
  call void @__quantum__rt__array_reference(%Array* %343)
  %344 = bitcast { %Array* }* %332 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %344)
  store %Qubit* %335, %Qubit** %341
  %345 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %326, i64 0, i32 0
  %346 = load %Callable*, %Callable** %345
  %347 = call %Callable* @__quantum__rt__callable_copy(%Callable* %346, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %347)
  call void @__quantum__rt__callable_invoke(%Callable* %347, %Tuple* %336, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %330)
  call void @__quantum__rt__array_unreference(%Array* %343)
  call void @__quantum__rt__tuple_unreference(%Tuple* %344)
  call void @__quantum__rt__tuple_unreference(%Tuple* %336)
  call void @__quantum__rt__callable_unreference(%Callable* %347)
  ret void

entry15:                                          ; No predecessors!
  %348 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %349 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %348, i64 0, i32 1
  %350 = load double, double* %349
  %351 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %348, i64 0, i32 2
  %352 = load %Array*, %Array** %351
  %353 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %348, i64 0, i32 3
  %354 = load { %Array* }*, { %Array* }** %353
  %355 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %356 = getelementptr { %Qubit* }, { %Qubit* }* %355, i64 0, i32 0
  %357 = load %Qubit*, %Qubit** %356
  %358 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %359 = bitcast %Tuple* %358 to { double, %Array*, { %Array* }*, %Qubit* }*
  %360 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %359, i64 0, i32 0
  %361 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %359, i64 0, i32 1
  %362 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %359, i64 0, i32 2
  %363 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %359, i64 0, i32 3
  store double %350, double* %360
  store %Array* %352, %Array** %361
  call void @__quantum__rt__array_reference(%Array* %352)
  store { %Array* }* %354, { %Array* }** %362
  %364 = getelementptr { %Array* }, { %Array* }* %354, i64 0, i32 0
  %365 = load %Array*, %Array** %364
  call void @__quantum__rt__array_reference(%Array* %365)
  %366 = bitcast { %Array* }* %354 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %366)
  store %Qubit* %357, %Qubit** %363
  %367 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %348, i64 0, i32 0
  %368 = load %Callable*, %Callable** %367
  %369 = call %Callable* @__quantum__rt__callable_copy(%Callable* %368, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %369)
  call void @__quantum__rt__callable_invoke(%Callable* %369, %Tuple* %358, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %352)
  call void @__quantum__rt__array_unreference(%Array* %365)
  call void @__quantum__rt__tuple_unreference(%Tuple* %366)
  call void @__quantum__rt__tuple_unreference(%Tuple* %358)
  call void @__quantum__rt__callable_unreference(%Callable* %369)
  ret void

entry16:                                          ; No predecessors!
  %370 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %371 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %370, i64 0, i32 1
  %372 = load double, double* %371
  %373 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %370, i64 0, i32 2
  %374 = load %Array*, %Array** %373
  %375 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %370, i64 0, i32 3
  %376 = load { %Array* }*, { %Array* }** %375
  %377 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %378 = getelementptr { %Qubit* }, { %Qubit* }* %377, i64 0, i32 0
  %379 = load %Qubit*, %Qubit** %378
  %380 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %381 = bitcast %Tuple* %380 to { double, %Array*, { %Array* }*, %Qubit* }*
  %382 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %381, i64 0, i32 0
  %383 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %381, i64 0, i32 1
  %384 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %381, i64 0, i32 2
  %385 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %381, i64 0, i32 3
  store double %372, double* %382
  store %Array* %374, %Array** %383
  call void @__quantum__rt__array_reference(%Array* %374)
  store { %Array* }* %376, { %Array* }** %384
  %386 = getelementptr { %Array* }, { %Array* }* %376, i64 0, i32 0
  %387 = load %Array*, %Array** %386
  call void @__quantum__rt__array_reference(%Array* %387)
  %388 = bitcast { %Array* }* %376 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %388)
  store %Qubit* %379, %Qubit** %385
  %389 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %370, i64 0, i32 0
  %390 = load %Callable*, %Callable** %389
  %391 = call %Callable* @__quantum__rt__callable_copy(%Callable* %390, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %391)
  call void @__quantum__rt__callable_invoke(%Callable* %391, %Tuple* %380, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %374)
  call void @__quantum__rt__array_unreference(%Array* %387)
  call void @__quantum__rt__tuple_unreference(%Tuple* %388)
  call void @__quantum__rt__tuple_unreference(%Tuple* %380)
  call void @__quantum__rt__callable_unreference(%Callable* %391)
  ret void

entry17:                                          ; No predecessors!
  %392 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %393 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %392, i64 0, i32 1
  %394 = load %Array*, %Array** %393
  %395 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %396 = getelementptr { %Array* }, { %Array* }* %395, i64 0, i32 0
  %397 = load %Array*, %Array** %396
  %398 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %399 = bitcast %Tuple* %398 to { %Array*, %Array* }*
  %400 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %399, i64 0, i32 0
  %401 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %399, i64 0, i32 1
  store %Array* %394, %Array** %400
  call void @__quantum__rt__array_reference(%Array* %394)
  store %Array* %397, %Array** %401
  call void @__quantum__rt__array_reference(%Array* %397)
  %402 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %392, i64 0, i32 0
  %403 = load %Callable*, %Callable** %402
  %404 = call %Callable* @__quantum__rt__callable_copy(%Callable* %403, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %404)
  call void @__quantum__rt__callable_invoke(%Callable* %404, %Tuple* %398, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %394)
  call void @__quantum__rt__array_unreference(%Array* %397)
  call void @__quantum__rt__tuple_unreference(%Tuple* %398)
  call void @__quantum__rt__callable_unreference(%Callable* %404)
  ret void

entry18:                                          ; No predecessors!
  %405 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %406 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %405, i64 0, i32 1
  %407 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %406
  %408 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %409 = getelementptr { double, %Array* }, { double, %Array* }* %408, i64 0, i32 0
  %410 = load double, double* %409
  %411 = getelementptr { double, %Array* }, { double, %Array* }* %408, i64 0, i32 1
  %412 = load %Array*, %Array** %411
  %413 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %414 = bitcast %Tuple* %413 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %415 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %414, i64 0, i32 0
  %416 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %414, i64 0, i32 1
  %417 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %414, i64 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %407, { { %Array*, %Array* }*, %Array* }** %415
  %418 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %407, i64 0, i32 0
  %419 = load { %Array*, %Array* }*, { %Array*, %Array* }** %418
  %420 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %419, i64 0, i32 0
  %421 = load %Array*, %Array** %420
  call void @__quantum__rt__array_reference(%Array* %421)
  %422 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %419, i64 0, i32 1
  %423 = load %Array*, %Array** %422
  call void @__quantum__rt__array_reference(%Array* %423)
  %424 = bitcast { %Array*, %Array* }* %419 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %424)
  %425 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %407, i64 0, i32 1
  %426 = load %Array*, %Array** %425
  call void @__quantum__rt__array_reference(%Array* %426)
  %427 = bitcast { { %Array*, %Array* }*, %Array* }* %407 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %427)
  store double %410, double* %416
  store %Array* %412, %Array** %417
  call void @__quantum__rt__array_reference(%Array* %412)
  %428 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %405, i64 0, i32 0
  %429 = load %Callable*, %Callable** %428
  %430 = call %Callable* @__quantum__rt__callable_copy(%Callable* %429, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %430)
  call void @__quantum__rt__callable_invoke(%Callable* %430, %Tuple* %413, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %421)
  call void @__quantum__rt__array_unreference(%Array* %423)
  call void @__quantum__rt__tuple_unreference(%Tuple* %424)
  call void @__quantum__rt__array_unreference(%Array* %426)
  call void @__quantum__rt__tuple_unreference(%Tuple* %427)
  call void @__quantum__rt__array_unreference(%Array* %412)
  call void @__quantum__rt__tuple_unreference(%Tuple* %413)
  call void @__quantum__rt__callable_unreference(%Callable* %430)
  ret void

entry19:                                          ; No predecessors!
  %431 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %432 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %431, i64 0, i32 1
  %433 = load double, double* %432
  %434 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %431, i64 0, i32 2
  %435 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %434
  %436 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %437 = getelementptr { %Array* }, { %Array* }* %436, i64 0, i32 0
  %438 = load %Array*, %Array** %437
  %439 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %440 = bitcast %Tuple* %439 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %441 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %440, i64 0, i32 0
  %442 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %440, i64 0, i32 1
  %443 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %440, i64 0, i32 2
  store double %433, double* %441
  store { { %Callable* }*, { i64, %Callable* }* }* %435, { { %Callable* }*, { i64, %Callable* }* }** %442
  %444 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %435, i64 0, i32 0
  %445 = load { %Callable* }*, { %Callable* }** %444
  %446 = getelementptr { %Callable* }, { %Callable* }* %445, i64 0, i32 0
  %447 = load %Callable*, %Callable** %446
  call void @__quantum__rt__callable_reference(%Callable* %447)
  %448 = bitcast { %Callable* }* %445 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %448)
  %449 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %435, i64 0, i32 1
  %450 = load { i64, %Callable* }*, { i64, %Callable* }** %449
  %451 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %450, i64 0, i32 1
  %452 = load %Callable*, %Callable** %451
  call void @__quantum__rt__callable_reference(%Callable* %452)
  %453 = bitcast { i64, %Callable* }* %450 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %453)
  %454 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %435 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %454)
  store %Array* %438, %Array** %443
  call void @__quantum__rt__array_reference(%Array* %438)
  %455 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %431, i64 0, i32 0
  %456 = load %Callable*, %Callable** %455
  %457 = call %Callable* @__quantum__rt__callable_copy(%Callable* %456, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %457)
  call void @__quantum__rt__callable_invoke(%Callable* %457, %Tuple* %439, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %447)
  call void @__quantum__rt__tuple_unreference(%Tuple* %448)
  call void @__quantum__rt__callable_unreference(%Callable* %452)
  call void @__quantum__rt__tuple_unreference(%Tuple* %453)
  call void @__quantum__rt__tuple_unreference(%Tuple* %454)
  call void @__quantum__rt__array_unreference(%Array* %438)
  call void @__quantum__rt__tuple_unreference(%Tuple* %439)
  call void @__quantum__rt__callable_unreference(%Callable* %457)
  ret void
}

define void @Lifted__PartialApplication__1__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i64 0, i32 1
  store %Array* %7, %Array** %10
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %7)
  %13 = sub i64 %12, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %entry
  %14 = phi i64 [ 0, %entry ], [ %20, %exiting__5 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %14)
  %17 = bitcast i8* %16 to { double, double }**
  %18 = load { double, double }*, { double, double }** %17
  %19 = bitcast { double, double }* %18 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %19)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %20 = add i64 %14, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_reference(%Array* %7)
  store { %Array* }* %4, { %Array* }** %11
  %21 = getelementptr { %Array* }, { %Array* }* %4, i64 0, i32 0
  %22 = load %Array*, %Array** %21
  call void @__quantum__rt__array_reference(%Array* %22)
  %23 = bitcast { %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %25 = bitcast %Tuple* %24 to { %Array*, { %Array*, { %Array* }* }* }*
  %26 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %25, i64 0, i32 0
  %27 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %25, i64 0, i32 1
  store %Array* %3, %Array** %26
  call void @__quantum__rt__array_reference(%Array* %3)
  store { %Array*, { %Array* }* }* %9, { %Array*, { %Array* }* }** %27
  %28 = sub i64 %12, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %29 = phi i64 [ 0, %exit__5 ], [ %35, %exiting__6 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %34)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %35 = add i64 %29, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_reference(%Array* %7)
  call void @__quantum__rt__array_reference(%Array* %22)
  call void @__quantum__rt__tuple_reference(%Tuple* %23)
  call void @__quantum__rt__tuple_reference(%Tuple* %8)
  %36 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 0
  %37 = load %Callable*, %Callable** %36
  %38 = call %Callable* @__quantum__rt__callable_copy(%Callable* %37, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %38)
  call void @__quantum__rt__callable_invoke(%Callable* %38, %Tuple* %24, %Tuple* %result-tuple)
  %39 = sub i64 %12, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %40 = phi i64 [ 0, %exit__6 ], [ %46, %exiting__7 ]
  %41 = icmp sle i64 %40, %39
  br i1 %41, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %40)
  %43 = bitcast i8* %42 to { double, double }**
  %44 = load { double, double }*, { double, double }** %43
  %45 = bitcast { double, double }* %44 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %45)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %46 = add i64 %40, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_unreference(%Array* %7)
  call void @__quantum__rt__array_unreference(%Array* %22)
  call void @__quantum__rt__tuple_unreference(%Tuple* %23)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  call void @__quantum__rt__array_unreference(%Array* %3)
  %47 = sub i64 %12, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %48 = phi i64 [ 0, %exit__7 ], [ %54, %exiting__8 ]
  %49 = icmp sle i64 %48, %47
  br i1 %49, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %48)
  %51 = bitcast i8* %50 to { double, double }**
  %52 = load { double, double }*, { double, double }** %51
  %53 = bitcast { double, double }* %52 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %53)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %54 = add i64 %48, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_unreference(%Array* %7)
  call void @__quantum__rt__array_unreference(%Array* %22)
  call void @__quantum__rt__tuple_unreference(%Tuple* %23)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  call void @__quantum__rt__callable_unreference(%Callable* %38)
  ret void

entry1:                                           ; No predecessors!
  %55 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %56 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %55, i64 0, i32 0
  %57 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %55, i64 0, i32 1
  %58 = load %Array*, %Array** %56
  %59 = load %Array*, %Array** %57
  %60 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %61 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %60, i64 0, i32 1
  %62 = load double, double* %61
  %63 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %60, i64 0, i32 2
  %64 = load %Array*, %Array** %63
  %65 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %60, i64 0, i32 3
  %66 = load i2, i2* %65
  %67 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %60, i64 0, i32 4
  %68 = load %Range, %Range* %67
  %69 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %60, i64 0, i32 5
  %70 = load i64, i64* %69
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { %Range, i64 }*
  %73 = getelementptr { %Range, i64 }, { %Range, i64 }* %72, i64 0, i32 0
  %74 = getelementptr { %Range, i64 }, { %Range, i64 }* %72, i64 0, i32 1
  store %Range %68, %Range* %73
  store i64 %70, i64* %74
  %75 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %76 = bitcast %Tuple* %75 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %77 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %76, i64 0, i32 0
  %78 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %76, i64 0, i32 1
  %79 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %76, i64 0, i32 2
  %80 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %76, i64 0, i32 3
  %81 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %76, i64 0, i32 4
  store double %62, double* %77
  store %Array* %64, %Array** %78
  call void @__quantum__rt__array_reference(%Array* %64)
  store i2 %66, i2* %79
  store { %Range, i64 }* %72, { %Range, i64 }** %80
  call void @__quantum__rt__tuple_reference(%Tuple* %71)
  store %Array* %59, %Array** %81
  call void @__quantum__rt__array_reference(%Array* %59)
  %82 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %83 = bitcast %Tuple* %82 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %84 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %83, i64 0, i32 0
  %85 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %83, i64 0, i32 1
  store %Array* %58, %Array** %84
  call void @__quantum__rt__array_reference(%Array* %58)
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %76, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %85
  call void @__quantum__rt__array_reference(%Array* %64)
  call void @__quantum__rt__tuple_reference(%Tuple* %71)
  call void @__quantum__rt__array_reference(%Array* %59)
  call void @__quantum__rt__tuple_reference(%Tuple* %75)
  %86 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %60, i64 0, i32 0
  %87 = load %Callable*, %Callable** %86
  %88 = call %Callable* @__quantum__rt__callable_copy(%Callable* %87, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %88)
  call void @__quantum__rt__callable_invoke(%Callable* %88, %Tuple* %82, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  call void @__quantum__rt__array_unreference(%Array* %64)
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  call void @__quantum__rt__array_unreference(%Array* %59)
  call void @__quantum__rt__tuple_unreference(%Tuple* %75)
  call void @__quantum__rt__array_unreference(%Array* %58)
  call void @__quantum__rt__array_unreference(%Array* %64)
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  call void @__quantum__rt__array_unreference(%Array* %59)
  call void @__quantum__rt__tuple_unreference(%Tuple* %75)
  call void @__quantum__rt__tuple_unreference(%Tuple* %82)
  call void @__quantum__rt__callable_unreference(%Callable* %88)
  ret void

entry2:                                           ; No predecessors!
  %89 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %90 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %89, i64 0, i32 0
  %91 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %89, i64 0, i32 1
  %92 = load %Array*, %Array** %90
  %93 = load { %Array* }*, { %Array* }** %91
  %94 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %95 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %94, i64 0, i32 1
  %96 = load %Callable*, %Callable** %95
  %97 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %98 = bitcast %Tuple* %97 to { %Callable*, { %Array* }* }*
  %99 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %98, i64 0, i32 0
  %100 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %98, i64 0, i32 1
  store %Callable* %96, %Callable** %99
  call void @__quantum__rt__callable_reference(%Callable* %96)
  store { %Array* }* %93, { %Array* }** %100
  %101 = getelementptr { %Array* }, { %Array* }* %93, i64 0, i32 0
  %102 = load %Array*, %Array** %101
  call void @__quantum__rt__array_reference(%Array* %102)
  %103 = bitcast { %Array* }* %93 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %103)
  %104 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %105 = bitcast %Tuple* %104 to { %Array*, { %Callable*, { %Array* }* }* }*
  %106 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %105, i64 0, i32 0
  %107 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %105, i64 0, i32 1
  store %Array* %92, %Array** %106
  call void @__quantum__rt__array_reference(%Array* %92)
  store { %Callable*, { %Array* }* }* %98, { %Callable*, { %Array* }* }** %107
  call void @__quantum__rt__callable_reference(%Callable* %96)
  call void @__quantum__rt__array_reference(%Array* %102)
  call void @__quantum__rt__tuple_reference(%Tuple* %103)
  call void @__quantum__rt__tuple_reference(%Tuple* %97)
  %108 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %94, i64 0, i32 0
  %109 = load %Callable*, %Callable** %108
  %110 = call %Callable* @__quantum__rt__callable_copy(%Callable* %109, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %110)
  call void @__quantum__rt__callable_invoke(%Callable* %110, %Tuple* %104, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %96)
  call void @__quantum__rt__array_unreference(%Array* %102)
  call void @__quantum__rt__tuple_unreference(%Tuple* %103)
  call void @__quantum__rt__tuple_unreference(%Tuple* %97)
  call void @__quantum__rt__array_unreference(%Array* %92)
  call void @__quantum__rt__callable_unreference(%Callable* %96)
  call void @__quantum__rt__array_unreference(%Array* %102)
  call void @__quantum__rt__tuple_unreference(%Tuple* %103)
  call void @__quantum__rt__tuple_unreference(%Tuple* %97)
  call void @__quantum__rt__tuple_unreference(%Tuple* %104)
  call void @__quantum__rt__callable_unreference(%Callable* %110)
  ret void

entry3:                                           ; No predecessors!
  %111 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %112 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %111, i64 0, i32 0
  %113 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %111, i64 0, i32 1
  %114 = load %Array*, %Array** %112
  %115 = load { %Array* }*, { %Array* }** %113
  %116 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %117 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %116, i64 0, i32 1
  %118 = load %Array*, %Array** %117
  %119 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %120 = bitcast %Tuple* %119 to { %Array*, { %Array* }* }*
  %121 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %120, i64 0, i32 0
  %122 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %120, i64 0, i32 1
  store %Array* %118, %Array** %121
  call void @__quantum__rt__array_reference(%Array* %118)
  store { %Array* }* %115, { %Array* }** %122
  %123 = getelementptr { %Array* }, { %Array* }* %115, i64 0, i32 0
  %124 = load %Array*, %Array** %123
  call void @__quantum__rt__array_reference(%Array* %124)
  %125 = bitcast { %Array* }* %115 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %125)
  %126 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %127 = bitcast %Tuple* %126 to { %Array*, { %Array*, { %Array* }* }* }*
  %128 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %127, i64 0, i32 0
  %129 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %127, i64 0, i32 1
  store %Array* %114, %Array** %128
  call void @__quantum__rt__array_reference(%Array* %114)
  store { %Array*, { %Array* }* }* %120, { %Array*, { %Array* }* }** %129
  call void @__quantum__rt__array_reference(%Array* %118)
  call void @__quantum__rt__array_reference(%Array* %124)
  call void @__quantum__rt__tuple_reference(%Tuple* %125)
  call void @__quantum__rt__tuple_reference(%Tuple* %119)
  %130 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %116, i64 0, i32 0
  %131 = load %Callable*, %Callable** %130
  %132 = call %Callable* @__quantum__rt__callable_copy(%Callable* %131, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %132)
  call void @__quantum__rt__callable_invoke(%Callable* %132, %Tuple* %126, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %118)
  call void @__quantum__rt__array_unreference(%Array* %124)
  call void @__quantum__rt__tuple_unreference(%Tuple* %125)
  call void @__quantum__rt__tuple_unreference(%Tuple* %119)
  call void @__quantum__rt__array_unreference(%Array* %114)
  call void @__quantum__rt__array_unreference(%Array* %118)
  call void @__quantum__rt__array_unreference(%Array* %124)
  call void @__quantum__rt__tuple_unreference(%Tuple* %125)
  call void @__quantum__rt__tuple_unreference(%Tuple* %119)
  call void @__quantum__rt__tuple_unreference(%Tuple* %126)
  call void @__quantum__rt__callable_unreference(%Callable* %132)
  ret void

entry4:                                           ; No predecessors!
  %133 = bitcast %Tuple* %arg-tuple to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %134 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %133, i64 0, i32 0
  %135 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %133, i64 0, i32 1
  %136 = load %Array*, %Array** %134
  %137 = load { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %135
  %138 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %139 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %138, i64 0, i32 1
  %140 = load double, double* %139
  %141 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %138, i64 0, i32 2
  %142 = load i64, i64* %141
  %143 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %137, i64 0, i32 0
  %144 = load double, double* %143
  %145 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %137, i64 0, i32 1
  %146 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %145
  %147 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %137, i64 0, i32 2
  %148 = load %Array*, %Array** %147
  %149 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %150 = bitcast %Tuple* %149 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %151 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 0
  %152 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 1
  %153 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 2
  %154 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 3
  %155 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 4
  store double %140, double* %151
  store i64 %142, i64* %152
  store double %144, double* %153
  store { { %Callable* }*, { i64, %Callable* }* }* %146, { { %Callable* }*, { i64, %Callable* }* }** %154
  %156 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %146, i64 0, i32 0
  %157 = load { %Callable* }*, { %Callable* }** %156
  %158 = getelementptr { %Callable* }, { %Callable* }* %157, i64 0, i32 0
  %159 = load %Callable*, %Callable** %158
  call void @__quantum__rt__callable_reference(%Callable* %159)
  %160 = bitcast { %Callable* }* %157 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %160)
  %161 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %146, i64 0, i32 1
  %162 = load { i64, %Callable* }*, { i64, %Callable* }** %161
  %163 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %162, i64 0, i32 1
  %164 = load %Callable*, %Callable** %163
  call void @__quantum__rt__callable_reference(%Callable* %164)
  %165 = bitcast { i64, %Callable* }* %162 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %165)
  %166 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %146 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %166)
  store %Array* %148, %Array** %155
  call void @__quantum__rt__array_reference(%Array* %148)
  %167 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %168 = bitcast %Tuple* %167 to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %169 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %168, i64 0, i32 0
  %170 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %168, i64 0, i32 1
  store %Array* %136, %Array** %169
  call void @__quantum__rt__array_reference(%Array* %136)
  store { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %170
  call void @__quantum__rt__callable_reference(%Callable* %159)
  call void @__quantum__rt__tuple_reference(%Tuple* %160)
  call void @__quantum__rt__callable_reference(%Callable* %164)
  call void @__quantum__rt__tuple_reference(%Tuple* %165)
  call void @__quantum__rt__tuple_reference(%Tuple* %166)
  call void @__quantum__rt__array_reference(%Array* %148)
  call void @__quantum__rt__tuple_reference(%Tuple* %149)
  %171 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %138, i64 0, i32 0
  %172 = load %Callable*, %Callable** %171
  %173 = call %Callable* @__quantum__rt__callable_copy(%Callable* %172, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %173)
  call void @__quantum__rt__callable_invoke(%Callable* %173, %Tuple* %167, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %159)
  call void @__quantum__rt__tuple_unreference(%Tuple* %160)
  call void @__quantum__rt__callable_unreference(%Callable* %164)
  call void @__quantum__rt__tuple_unreference(%Tuple* %165)
  call void @__quantum__rt__tuple_unreference(%Tuple* %166)
  call void @__quantum__rt__array_unreference(%Array* %148)
  call void @__quantum__rt__tuple_unreference(%Tuple* %149)
  call void @__quantum__rt__array_unreference(%Array* %136)
  call void @__quantum__rt__callable_unreference(%Callable* %159)
  call void @__quantum__rt__tuple_unreference(%Tuple* %160)
  call void @__quantum__rt__callable_unreference(%Callable* %164)
  call void @__quantum__rt__tuple_unreference(%Tuple* %165)
  call void @__quantum__rt__tuple_unreference(%Tuple* %166)
  call void @__quantum__rt__array_unreference(%Array* %148)
  call void @__quantum__rt__tuple_unreference(%Tuple* %149)
  call void @__quantum__rt__tuple_unreference(%Tuple* %167)
  call void @__quantum__rt__callable_unreference(%Callable* %173)
  ret void

entry5:                                           ; No predecessors!
  %174 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, double, %Array* }* }*
  %175 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %174, i64 0, i32 0
  %176 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %174, i64 0, i32 1
  %177 = load %Array*, %Array** %175
  %178 = load { i64, double, %Array* }*, { i64, double, %Array* }** %176
  %179 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %180 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %179, i64 0, i32 1
  %181 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %180
  %182 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %178, i64 0, i32 0
  %183 = load i64, i64* %182
  %184 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %178, i64 0, i32 1
  %185 = load double, double* %184
  %186 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %178, i64 0, i32 2
  %187 = load %Array*, %Array** %186
  %188 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %189 = bitcast %Tuple* %188 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %190 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %189, i64 0, i32 0
  %191 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %189, i64 0, i32 1
  %192 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %189, i64 0, i32 2
  %193 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %189, i64 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %181, { { %Callable* }*, { i64, %Callable* }* }** %190
  %194 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %181, i64 0, i32 0
  %195 = load { %Callable* }*, { %Callable* }** %194
  %196 = getelementptr { %Callable* }, { %Callable* }* %195, i64 0, i32 0
  %197 = load %Callable*, %Callable** %196
  call void @__quantum__rt__callable_reference(%Callable* %197)
  %198 = bitcast { %Callable* }* %195 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %198)
  %199 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %181, i64 0, i32 1
  %200 = load { i64, %Callable* }*, { i64, %Callable* }** %199
  %201 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %200, i64 0, i32 1
  %202 = load %Callable*, %Callable** %201
  call void @__quantum__rt__callable_reference(%Callable* %202)
  %203 = bitcast { i64, %Callable* }* %200 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %203)
  %204 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %181 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %204)
  store i64 %183, i64* %191
  store double %185, double* %192
  store %Array* %187, %Array** %193
  call void @__quantum__rt__array_reference(%Array* %187)
  %205 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %206 = bitcast %Tuple* %205 to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %207 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %206, i64 0, i32 0
  %208 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %206, i64 0, i32 1
  store %Array* %177, %Array** %207
  call void @__quantum__rt__array_reference(%Array* %177)
  store { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %189, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %208
  call void @__quantum__rt__callable_reference(%Callable* %197)
  call void @__quantum__rt__tuple_reference(%Tuple* %198)
  call void @__quantum__rt__callable_reference(%Callable* %202)
  call void @__quantum__rt__tuple_reference(%Tuple* %203)
  call void @__quantum__rt__tuple_reference(%Tuple* %204)
  call void @__quantum__rt__array_reference(%Array* %187)
  call void @__quantum__rt__tuple_reference(%Tuple* %188)
  %209 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %179, i64 0, i32 0
  %210 = load %Callable*, %Callable** %209
  %211 = call %Callable* @__quantum__rt__callable_copy(%Callable* %210, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %211)
  call void @__quantum__rt__callable_invoke(%Callable* %211, %Tuple* %205, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %197)
  call void @__quantum__rt__tuple_unreference(%Tuple* %198)
  call void @__quantum__rt__callable_unreference(%Callable* %202)
  call void @__quantum__rt__tuple_unreference(%Tuple* %203)
  call void @__quantum__rt__tuple_unreference(%Tuple* %204)
  call void @__quantum__rt__array_unreference(%Array* %187)
  call void @__quantum__rt__tuple_unreference(%Tuple* %188)
  call void @__quantum__rt__array_unreference(%Array* %177)
  call void @__quantum__rt__callable_unreference(%Callable* %197)
  call void @__quantum__rt__tuple_unreference(%Tuple* %198)
  call void @__quantum__rt__callable_unreference(%Callable* %202)
  call void @__quantum__rt__tuple_unreference(%Tuple* %203)
  call void @__quantum__rt__tuple_unreference(%Tuple* %204)
  call void @__quantum__rt__array_unreference(%Array* %187)
  call void @__quantum__rt__tuple_unreference(%Tuple* %188)
  call void @__quantum__rt__tuple_unreference(%Tuple* %205)
  call void @__quantum__rt__callable_unreference(%Callable* %211)
  ret void

entry6:                                           ; No predecessors!
  %212 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %213 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %212, i64 0, i32 0
  %214 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %212, i64 0, i32 1
  %215 = load %Array*, %Array** %213
  %216 = load %Array*, %Array** %214
  %217 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %218 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %217, i64 0, i32 1
  %219 = load %Array*, %Array** %218
  %220 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %221 = bitcast %Tuple* %220 to { %Array*, %Array* }*
  %222 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %221, i64 0, i32 0
  %223 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %221, i64 0, i32 1
  store %Array* %219, %Array** %222
  %224 = call i64 @__quantum__rt__array_get_size_1d(%Array* %219)
  %225 = sub i64 %224, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %entry6
  %226 = phi i64 [ 0, %entry6 ], [ %231, %exiting__17 ]
  %227 = icmp sle i64 %226, %225
  br i1 %227, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %228 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %219, i64 %226)
  %229 = bitcast i8* %228 to %Callable**
  %230 = load %Callable*, %Callable** %229
  call void @__quantum__rt__callable_reference(%Callable* %230)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %231 = add i64 %226, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_reference(%Array* %219)
  store %Array* %216, %Array** %223
  call void @__quantum__rt__array_reference(%Array* %216)
  %232 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %233 = bitcast %Tuple* %232 to { %Array*, { %Array*, %Array* }* }*
  %234 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %233, i64 0, i32 0
  %235 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %233, i64 0, i32 1
  store %Array* %215, %Array** %234
  call void @__quantum__rt__array_reference(%Array* %215)
  store { %Array*, %Array* }* %221, { %Array*, %Array* }** %235
  %236 = sub i64 %224, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %237 = phi i64 [ 0, %exit__17 ], [ %242, %exiting__18 ]
  %238 = icmp sle i64 %237, %236
  br i1 %238, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %239 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %219, i64 %237)
  %240 = bitcast i8* %239 to %Callable**
  %241 = load %Callable*, %Callable** %240
  call void @__quantum__rt__callable_reference(%Callable* %241)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %242 = add i64 %237, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_reference(%Array* %219)
  call void @__quantum__rt__array_reference(%Array* %216)
  call void @__quantum__rt__tuple_reference(%Tuple* %220)
  %243 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %217, i64 0, i32 0
  %244 = load %Callable*, %Callable** %243
  %245 = call %Callable* @__quantum__rt__callable_copy(%Callable* %244, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %245)
  call void @__quantum__rt__callable_invoke(%Callable* %245, %Tuple* %232, %Tuple* %result-tuple)
  %246 = sub i64 %224, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %247 = phi i64 [ 0, %exit__18 ], [ %252, %exiting__19 ]
  %248 = icmp sle i64 %247, %246
  br i1 %248, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %249 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %219, i64 %247)
  %250 = bitcast i8* %249 to %Callable**
  %251 = load %Callable*, %Callable** %250
  call void @__quantum__rt__callable_unreference(%Callable* %251)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %252 = add i64 %247, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_unreference(%Array* %219)
  call void @__quantum__rt__array_unreference(%Array* %216)
  call void @__quantum__rt__tuple_unreference(%Tuple* %220)
  call void @__quantum__rt__array_unreference(%Array* %215)
  %253 = sub i64 %224, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %254 = phi i64 [ 0, %exit__19 ], [ %259, %exiting__20 ]
  %255 = icmp sle i64 %254, %253
  br i1 %255, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %256 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %219, i64 %254)
  %257 = bitcast i8* %256 to %Callable**
  %258 = load %Callable*, %Callable** %257
  call void @__quantum__rt__callable_unreference(%Callable* %258)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %259 = add i64 %254, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_unreference(%Array* %219)
  call void @__quantum__rt__array_unreference(%Array* %216)
  call void @__quantum__rt__tuple_unreference(%Tuple* %220)
  call void @__quantum__rt__tuple_unreference(%Tuple* %232)
  call void @__quantum__rt__callable_unreference(%Callable* %245)
  ret void

entry7:                                           ; No predecessors!
  %260 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %261 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %260, i64 0, i32 0
  %262 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %260, i64 0, i32 1
  %263 = load %Array*, %Array** %261
  %264 = load { %Array*, %Array* }*, { %Array*, %Array* }** %262
  %265 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %266 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %265, i64 0, i32 1
  %267 = load i64, i64* %266
  %268 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %265, i64 0, i32 2
  %269 = load %Callable*, %Callable** %268
  %270 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %264, i64 0, i32 0
  %271 = load %Array*, %Array** %270
  %272 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %264, i64 0, i32 1
  %273 = load %Array*, %Array** %272
  %274 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %275 = bitcast %Tuple* %274 to { i64, %Callable*, %Array*, %Array* }*
  %276 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %275, i64 0, i32 0
  %277 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %275, i64 0, i32 1
  %278 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %275, i64 0, i32 2
  %279 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %275, i64 0, i32 3
  store i64 %267, i64* %276
  store %Callable* %269, %Callable** %277
  call void @__quantum__rt__callable_reference(%Callable* %269)
  store %Array* %271, %Array** %278
  call void @__quantum__rt__array_reference(%Array* %271)
  store %Array* %273, %Array** %279
  call void @__quantum__rt__array_reference(%Array* %273)
  %280 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %281 = bitcast %Tuple* %280 to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %282 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %281, i64 0, i32 0
  %283 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %281, i64 0, i32 1
  store %Array* %263, %Array** %282
  call void @__quantum__rt__array_reference(%Array* %263)
  store { i64, %Callable*, %Array*, %Array* }* %275, { i64, %Callable*, %Array*, %Array* }** %283
  call void @__quantum__rt__callable_reference(%Callable* %269)
  call void @__quantum__rt__array_reference(%Array* %271)
  call void @__quantum__rt__array_reference(%Array* %273)
  call void @__quantum__rt__tuple_reference(%Tuple* %274)
  %284 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %265, i64 0, i32 0
  %285 = load %Callable*, %Callable** %284
  %286 = call %Callable* @__quantum__rt__callable_copy(%Callable* %285, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %286)
  call void @__quantum__rt__callable_invoke(%Callable* %286, %Tuple* %280, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %269)
  call void @__quantum__rt__array_unreference(%Array* %271)
  call void @__quantum__rt__array_unreference(%Array* %273)
  call void @__quantum__rt__tuple_unreference(%Tuple* %274)
  call void @__quantum__rt__array_unreference(%Array* %263)
  call void @__quantum__rt__callable_unreference(%Callable* %269)
  call void @__quantum__rt__array_unreference(%Array* %271)
  call void @__quantum__rt__array_unreference(%Array* %273)
  call void @__quantum__rt__tuple_unreference(%Tuple* %274)
  call void @__quantum__rt__tuple_unreference(%Tuple* %280)
  call void @__quantum__rt__callable_unreference(%Callable* %286)
  ret void

entry8:                                           ; No predecessors!
  %287 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %288 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %287, i64 0, i32 0
  %289 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %287, i64 0, i32 1
  %290 = load %Array*, %Array** %288
  %291 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %289
  %292 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %293 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %292, i64 0, i32 1
  %294 = load i64, i64* %293
  %295 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %292, i64 0, i32 2
  %296 = load %Callable*, %Callable** %295
  %297 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %291, i64 0, i32 0
  %298 = load %Array*, %Array** %297
  %299 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %291, i64 0, i32 1
  %300 = load %Qubit*, %Qubit** %299
  %301 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %302 = bitcast %Tuple* %301 to { i64, %Callable*, %Array*, %Qubit* }*
  %303 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %302, i64 0, i32 0
  %304 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %302, i64 0, i32 1
  %305 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %302, i64 0, i32 2
  %306 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %302, i64 0, i32 3
  store i64 %294, i64* %303
  store %Callable* %296, %Callable** %304
  call void @__quantum__rt__callable_reference(%Callable* %296)
  store %Array* %298, %Array** %305
  call void @__quantum__rt__array_reference(%Array* %298)
  store %Qubit* %300, %Qubit** %306
  %307 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %308 = bitcast %Tuple* %307 to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %309 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %308, i64 0, i32 0
  %310 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %308, i64 0, i32 1
  store %Array* %290, %Array** %309
  call void @__quantum__rt__array_reference(%Array* %290)
  store { i64, %Callable*, %Array*, %Qubit* }* %302, { i64, %Callable*, %Array*, %Qubit* }** %310
  call void @__quantum__rt__callable_reference(%Callable* %296)
  call void @__quantum__rt__array_reference(%Array* %298)
  call void @__quantum__rt__tuple_reference(%Tuple* %301)
  %311 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %292, i64 0, i32 0
  %312 = load %Callable*, %Callable** %311
  %313 = call %Callable* @__quantum__rt__callable_copy(%Callable* %312, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %313)
  call void @__quantum__rt__callable_invoke(%Callable* %313, %Tuple* %307, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %296)
  call void @__quantum__rt__array_unreference(%Array* %298)
  call void @__quantum__rt__tuple_unreference(%Tuple* %301)
  call void @__quantum__rt__array_unreference(%Array* %290)
  call void @__quantum__rt__callable_unreference(%Callable* %296)
  call void @__quantum__rt__array_unreference(%Array* %298)
  call void @__quantum__rt__tuple_unreference(%Tuple* %301)
  call void @__quantum__rt__tuple_unreference(%Tuple* %307)
  call void @__quantum__rt__callable_unreference(%Callable* %313)
  ret void

entry9:                                           ; No predecessors!
  %314 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %315 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %314, i64 0, i32 0
  %316 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %314, i64 0, i32 1
  %317 = load %Array*, %Array** %315
  %318 = load { double, %Array* }*, { double, %Array* }** %316
  %319 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %320 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %319, i64 0, i32 1
  %321 = load i64, i64* %320
  %322 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %319, i64 0, i32 2
  %323 = load %Callable*, %Callable** %322
  %324 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %325 = bitcast %Tuple* %324 to { i64, %Callable* }*
  %326 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %325, i64 0, i32 0
  %327 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %325, i64 0, i32 1
  store i64 %321, i64* %326
  store %Callable* %323, %Callable** %327
  call void @__quantum__rt__callable_reference(%Callable* %323)
  %328 = getelementptr { double, %Array* }, { double, %Array* }* %318, i64 0, i32 0
  %329 = load double, double* %328
  %330 = getelementptr { double, %Array* }, { double, %Array* }* %318, i64 0, i32 1
  %331 = load %Array*, %Array** %330
  %332 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %333 = bitcast %Tuple* %332 to { { i64, %Callable* }*, double, %Array* }*
  %334 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %333, i64 0, i32 0
  %335 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %333, i64 0, i32 1
  %336 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %333, i64 0, i32 2
  store { i64, %Callable* }* %325, { i64, %Callable* }** %334
  call void @__quantum__rt__callable_reference(%Callable* %323)
  call void @__quantum__rt__tuple_reference(%Tuple* %324)
  store double %329, double* %335
  store %Array* %331, %Array** %336
  call void @__quantum__rt__array_reference(%Array* %331)
  %337 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %338 = bitcast %Tuple* %337 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %339 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %338, i64 0, i32 0
  %340 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %338, i64 0, i32 1
  store %Array* %317, %Array** %339
  call void @__quantum__rt__array_reference(%Array* %317)
  store { { i64, %Callable* }*, double, %Array* }* %333, { { i64, %Callable* }*, double, %Array* }** %340
  call void @__quantum__rt__callable_reference(%Callable* %323)
  call void @__quantum__rt__tuple_reference(%Tuple* %324)
  call void @__quantum__rt__array_reference(%Array* %331)
  call void @__quantum__rt__tuple_reference(%Tuple* %332)
  %341 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %319, i64 0, i32 0
  %342 = load %Callable*, %Callable** %341
  %343 = call %Callable* @__quantum__rt__callable_copy(%Callable* %342, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %343)
  call void @__quantum__rt__callable_invoke(%Callable* %343, %Tuple* %337, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %323)
  call void @__quantum__rt__tuple_unreference(%Tuple* %324)
  call void @__quantum__rt__callable_unreference(%Callable* %323)
  call void @__quantum__rt__tuple_unreference(%Tuple* %324)
  call void @__quantum__rt__array_unreference(%Array* %331)
  call void @__quantum__rt__tuple_unreference(%Tuple* %332)
  call void @__quantum__rt__array_unreference(%Array* %317)
  call void @__quantum__rt__callable_unreference(%Callable* %323)
  call void @__quantum__rt__tuple_unreference(%Tuple* %324)
  call void @__quantum__rt__array_unreference(%Array* %331)
  call void @__quantum__rt__tuple_unreference(%Tuple* %332)
  call void @__quantum__rt__tuple_unreference(%Tuple* %337)
  call void @__quantum__rt__callable_unreference(%Callable* %343)
  ret void

entry10:                                          ; No predecessors!
  %344 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array* }*, %Array* }* }*
  %345 = getelementptr { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %344, i64 0, i32 0
  %346 = getelementptr { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %344, i64 0, i32 1
  %347 = load %Array*, %Array** %345
  %348 = load { { %Array* }*, %Array* }*, { { %Array* }*, %Array* }** %346
  %349 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %350 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %349, i64 0, i32 1
  %351 = load { i64, %Callable* }*, { i64, %Callable* }** %350
  %352 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %348, i64 0, i32 0
  %353 = load { %Array* }*, { %Array* }** %352
  %354 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %348, i64 0, i32 1
  %355 = load %Array*, %Array** %354
  %356 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %357 = bitcast %Tuple* %356 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %358 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %357, i64 0, i32 0
  %359 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %357, i64 0, i32 1
  %360 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %357, i64 0, i32 2
  store { i64, %Callable* }* %351, { i64, %Callable* }** %358
  %361 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %351, i64 0, i32 1
  %362 = load %Callable*, %Callable** %361
  call void @__quantum__rt__callable_reference(%Callable* %362)
  %363 = bitcast { i64, %Callable* }* %351 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %363)
  store { %Array* }* %353, { %Array* }** %359
  %364 = getelementptr { %Array* }, { %Array* }* %353, i64 0, i32 0
  %365 = load %Array*, %Array** %364
  call void @__quantum__rt__array_reference(%Array* %365)
  %366 = bitcast { %Array* }* %353 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %366)
  store %Array* %355, %Array** %360
  call void @__quantum__rt__array_reference(%Array* %355)
  %367 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %368 = bitcast %Tuple* %367 to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %369 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %368, i64 0, i32 0
  %370 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %368, i64 0, i32 1
  store %Array* %347, %Array** %369
  call void @__quantum__rt__array_reference(%Array* %347)
  store { { i64, %Callable* }*, { %Array* }*, %Array* }* %357, { { i64, %Callable* }*, { %Array* }*, %Array* }** %370
  call void @__quantum__rt__callable_reference(%Callable* %362)
  call void @__quantum__rt__tuple_reference(%Tuple* %363)
  call void @__quantum__rt__array_reference(%Array* %365)
  call void @__quantum__rt__tuple_reference(%Tuple* %366)
  call void @__quantum__rt__array_reference(%Array* %355)
  call void @__quantum__rt__tuple_reference(%Tuple* %356)
  %371 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %349, i64 0, i32 0
  %372 = load %Callable*, %Callable** %371
  %373 = call %Callable* @__quantum__rt__callable_copy(%Callable* %372, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %373)
  call void @__quantum__rt__callable_invoke(%Callable* %373, %Tuple* %367, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %362)
  call void @__quantum__rt__tuple_unreference(%Tuple* %363)
  call void @__quantum__rt__array_unreference(%Array* %365)
  call void @__quantum__rt__tuple_unreference(%Tuple* %366)
  call void @__quantum__rt__array_unreference(%Array* %355)
  call void @__quantum__rt__tuple_unreference(%Tuple* %356)
  call void @__quantum__rt__array_unreference(%Array* %347)
  call void @__quantum__rt__callable_unreference(%Callable* %362)
  call void @__quantum__rt__tuple_unreference(%Tuple* %363)
  call void @__quantum__rt__array_unreference(%Array* %365)
  call void @__quantum__rt__tuple_unreference(%Tuple* %366)
  call void @__quantum__rt__array_unreference(%Array* %355)
  call void @__quantum__rt__tuple_unreference(%Tuple* %356)
  call void @__quantum__rt__tuple_unreference(%Tuple* %367)
  call void @__quantum__rt__callable_unreference(%Callable* %373)
  ret void

entry11:                                          ; No predecessors!
  %374 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %375 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %374, i64 0, i32 0
  %376 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %374, i64 0, i32 1
  %377 = load %Array*, %Array** %375
  %378 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %376
  %379 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %380 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %379, i64 0, i32 1
  %381 = load %Array*, %Array** %380
  %382 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %379, i64 0, i32 2
  %383 = load %Callable*, %Callable** %382
  %384 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %378, i64 0, i32 0
  %385 = load %Array*, %Array** %384
  %386 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %378, i64 0, i32 1
  %387 = load %Qubit*, %Qubit** %386
  %388 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %389 = bitcast %Tuple* %388 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %390 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %389, i64 0, i32 0
  %391 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %389, i64 0, i32 1
  %392 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %389, i64 0, i32 2
  %393 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %389, i64 0, i32 3
  store %Array* %381, %Array** %390
  call void @__quantum__rt__array_reference(%Array* %381)
  store %Callable* %383, %Callable** %391
  call void @__quantum__rt__callable_reference(%Callable* %383)
  store %Array* %385, %Array** %392
  call void @__quantum__rt__array_reference(%Array* %385)
  store %Qubit* %387, %Qubit** %393
  %394 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %395 = bitcast %Tuple* %394 to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %396 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %395, i64 0, i32 0
  %397 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %395, i64 0, i32 1
  store %Array* %377, %Array** %396
  call void @__quantum__rt__array_reference(%Array* %377)
  store { %Array*, %Callable*, %Array*, %Qubit* }* %389, { %Array*, %Callable*, %Array*, %Qubit* }** %397
  call void @__quantum__rt__array_reference(%Array* %381)
  call void @__quantum__rt__callable_reference(%Callable* %383)
  call void @__quantum__rt__array_reference(%Array* %385)
  call void @__quantum__rt__tuple_reference(%Tuple* %388)
  %398 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %379, i64 0, i32 0
  %399 = load %Callable*, %Callable** %398
  %400 = call %Callable* @__quantum__rt__callable_copy(%Callable* %399, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %400)
  call void @__quantum__rt__callable_invoke(%Callable* %400, %Tuple* %394, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %381)
  call void @__quantum__rt__callable_unreference(%Callable* %383)
  call void @__quantum__rt__array_unreference(%Array* %385)
  call void @__quantum__rt__tuple_unreference(%Tuple* %388)
  call void @__quantum__rt__array_unreference(%Array* %377)
  call void @__quantum__rt__array_unreference(%Array* %381)
  call void @__quantum__rt__callable_unreference(%Callable* %383)
  call void @__quantum__rt__array_unreference(%Array* %385)
  call void @__quantum__rt__tuple_unreference(%Tuple* %388)
  call void @__quantum__rt__tuple_unreference(%Tuple* %394)
  call void @__quantum__rt__callable_unreference(%Callable* %400)
  ret void

entry12:                                          ; No predecessors!
  %401 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %402 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %401, i64 0, i32 0
  %403 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %401, i64 0, i32 1
  %404 = load %Array*, %Array** %402
  %405 = load { %Array*, %Array* }*, { %Array*, %Array* }** %403
  %406 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %407 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %406, i64 0, i32 1
  %408 = load %Array*, %Array** %407
  %409 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %406, i64 0, i32 2
  %410 = load %Callable*, %Callable** %409
  %411 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %405, i64 0, i32 0
  %412 = load %Array*, %Array** %411
  %413 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %405, i64 0, i32 1
  %414 = load %Array*, %Array** %413
  %415 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %416 = bitcast %Tuple* %415 to { %Array*, %Callable*, %Array*, %Array* }*
  %417 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %416, i64 0, i32 0
  %418 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %416, i64 0, i32 1
  %419 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %416, i64 0, i32 2
  %420 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %416, i64 0, i32 3
  store %Array* %408, %Array** %417
  call void @__quantum__rt__array_reference(%Array* %408)
  store %Callable* %410, %Callable** %418
  call void @__quantum__rt__callable_reference(%Callable* %410)
  store %Array* %412, %Array** %419
  call void @__quantum__rt__array_reference(%Array* %412)
  store %Array* %414, %Array** %420
  call void @__quantum__rt__array_reference(%Array* %414)
  %421 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %422 = bitcast %Tuple* %421 to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %423 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %422, i64 0, i32 0
  %424 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %422, i64 0, i32 1
  store %Array* %404, %Array** %423
  call void @__quantum__rt__array_reference(%Array* %404)
  store { %Array*, %Callable*, %Array*, %Array* }* %416, { %Array*, %Callable*, %Array*, %Array* }** %424
  call void @__quantum__rt__array_reference(%Array* %408)
  call void @__quantum__rt__callable_reference(%Callable* %410)
  call void @__quantum__rt__array_reference(%Array* %412)
  call void @__quantum__rt__array_reference(%Array* %414)
  call void @__quantum__rt__tuple_reference(%Tuple* %415)
  %425 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %406, i64 0, i32 0
  %426 = load %Callable*, %Callable** %425
  %427 = call %Callable* @__quantum__rt__callable_copy(%Callable* %426, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %427)
  call void @__quantum__rt__callable_invoke(%Callable* %427, %Tuple* %421, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %408)
  call void @__quantum__rt__callable_unreference(%Callable* %410)
  call void @__quantum__rt__array_unreference(%Array* %412)
  call void @__quantum__rt__array_unreference(%Array* %414)
  call void @__quantum__rt__tuple_unreference(%Tuple* %415)
  call void @__quantum__rt__array_unreference(%Array* %404)
  call void @__quantum__rt__array_unreference(%Array* %408)
  call void @__quantum__rt__callable_unreference(%Callable* %410)
  call void @__quantum__rt__array_unreference(%Array* %412)
  call void @__quantum__rt__array_unreference(%Array* %414)
  call void @__quantum__rt__tuple_unreference(%Tuple* %415)
  call void @__quantum__rt__tuple_unreference(%Tuple* %421)
  call void @__quantum__rt__callable_unreference(%Callable* %427)
  ret void

entry13:                                          ; No predecessors!
  %428 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %429 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %428, i64 0, i32 0
  %430 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %428, i64 0, i32 1
  %431 = load %Array*, %Array** %429
  %432 = load %Qubit*, %Qubit** %430
  %433 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %434 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %433, i64 0, i32 1
  %435 = load double, double* %434
  %436 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %433, i64 0, i32 2
  %437 = load %Array*, %Array** %436
  %438 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %433, i64 0, i32 3
  %439 = load { %Array* }*, { %Array* }** %438
  %440 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %441 = bitcast %Tuple* %440 to { double, %Array*, { %Array* }*, %Qubit* }*
  %442 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %441, i64 0, i32 0
  %443 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %441, i64 0, i32 1
  %444 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %441, i64 0, i32 2
  %445 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %441, i64 0, i32 3
  store double %435, double* %442
  store %Array* %437, %Array** %443
  call void @__quantum__rt__array_reference(%Array* %437)
  store { %Array* }* %439, { %Array* }** %444
  %446 = getelementptr { %Array* }, { %Array* }* %439, i64 0, i32 0
  %447 = load %Array*, %Array** %446
  call void @__quantum__rt__array_reference(%Array* %447)
  %448 = bitcast { %Array* }* %439 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %448)
  store %Qubit* %432, %Qubit** %445
  %449 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %450 = bitcast %Tuple* %449 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %451 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %450, i64 0, i32 0
  %452 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %450, i64 0, i32 1
  store %Array* %431, %Array** %451
  call void @__quantum__rt__array_reference(%Array* %431)
  store { double, %Array*, { %Array* }*, %Qubit* }* %441, { double, %Array*, { %Array* }*, %Qubit* }** %452
  call void @__quantum__rt__array_reference(%Array* %437)
  call void @__quantum__rt__array_reference(%Array* %447)
  call void @__quantum__rt__tuple_reference(%Tuple* %448)
  call void @__quantum__rt__tuple_reference(%Tuple* %440)
  %453 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %433, i64 0, i32 0
  %454 = load %Callable*, %Callable** %453
  %455 = call %Callable* @__quantum__rt__callable_copy(%Callable* %454, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %455)
  call void @__quantum__rt__callable_invoke(%Callable* %455, %Tuple* %449, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %437)
  call void @__quantum__rt__array_unreference(%Array* %447)
  call void @__quantum__rt__tuple_unreference(%Tuple* %448)
  call void @__quantum__rt__tuple_unreference(%Tuple* %440)
  call void @__quantum__rt__array_unreference(%Array* %431)
  call void @__quantum__rt__array_unreference(%Array* %437)
  call void @__quantum__rt__array_unreference(%Array* %447)
  call void @__quantum__rt__tuple_unreference(%Tuple* %448)
  call void @__quantum__rt__tuple_unreference(%Tuple* %440)
  call void @__quantum__rt__tuple_unreference(%Tuple* %449)
  call void @__quantum__rt__callable_unreference(%Callable* %455)
  ret void

entry14:                                          ; No predecessors!
  %456 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %457 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %456, i64 0, i32 0
  %458 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %456, i64 0, i32 1
  %459 = load %Array*, %Array** %457
  %460 = load %Qubit*, %Qubit** %458
  %461 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %462 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %461, i64 0, i32 1
  %463 = load double, double* %462
  %464 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %461, i64 0, i32 2
  %465 = load %Array*, %Array** %464
  %466 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %461, i64 0, i32 3
  %467 = load { %Array* }*, { %Array* }** %466
  %468 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %469 = bitcast %Tuple* %468 to { double, %Array*, { %Array* }*, %Qubit* }*
  %470 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %469, i64 0, i32 0
  %471 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %469, i64 0, i32 1
  %472 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %469, i64 0, i32 2
  %473 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %469, i64 0, i32 3
  store double %463, double* %470
  store %Array* %465, %Array** %471
  call void @__quantum__rt__array_reference(%Array* %465)
  store { %Array* }* %467, { %Array* }** %472
  %474 = getelementptr { %Array* }, { %Array* }* %467, i64 0, i32 0
  %475 = load %Array*, %Array** %474
  call void @__quantum__rt__array_reference(%Array* %475)
  %476 = bitcast { %Array* }* %467 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %476)
  store %Qubit* %460, %Qubit** %473
  %477 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %478 = bitcast %Tuple* %477 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %479 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %478, i64 0, i32 0
  %480 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %478, i64 0, i32 1
  store %Array* %459, %Array** %479
  call void @__quantum__rt__array_reference(%Array* %459)
  store { double, %Array*, { %Array* }*, %Qubit* }* %469, { double, %Array*, { %Array* }*, %Qubit* }** %480
  call void @__quantum__rt__array_reference(%Array* %465)
  call void @__quantum__rt__array_reference(%Array* %475)
  call void @__quantum__rt__tuple_reference(%Tuple* %476)
  call void @__quantum__rt__tuple_reference(%Tuple* %468)
  %481 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %461, i64 0, i32 0
  %482 = load %Callable*, %Callable** %481
  %483 = call %Callable* @__quantum__rt__callable_copy(%Callable* %482, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %483)
  call void @__quantum__rt__callable_invoke(%Callable* %483, %Tuple* %477, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %465)
  call void @__quantum__rt__array_unreference(%Array* %475)
  call void @__quantum__rt__tuple_unreference(%Tuple* %476)
  call void @__quantum__rt__tuple_unreference(%Tuple* %468)
  call void @__quantum__rt__array_unreference(%Array* %459)
  call void @__quantum__rt__array_unreference(%Array* %465)
  call void @__quantum__rt__array_unreference(%Array* %475)
  call void @__quantum__rt__tuple_unreference(%Tuple* %476)
  call void @__quantum__rt__tuple_unreference(%Tuple* %468)
  call void @__quantum__rt__tuple_unreference(%Tuple* %477)
  call void @__quantum__rt__callable_unreference(%Callable* %483)
  ret void

entry15:                                          ; No predecessors!
  %484 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %485 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %484, i64 0, i32 0
  %486 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %484, i64 0, i32 1
  %487 = load %Array*, %Array** %485
  %488 = load %Qubit*, %Qubit** %486
  %489 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %490 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %489, i64 0, i32 1
  %491 = load double, double* %490
  %492 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %489, i64 0, i32 2
  %493 = load %Array*, %Array** %492
  %494 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %489, i64 0, i32 3
  %495 = load { %Array* }*, { %Array* }** %494
  %496 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %497 = bitcast %Tuple* %496 to { double, %Array*, { %Array* }*, %Qubit* }*
  %498 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %497, i64 0, i32 0
  %499 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %497, i64 0, i32 1
  %500 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %497, i64 0, i32 2
  %501 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %497, i64 0, i32 3
  store double %491, double* %498
  store %Array* %493, %Array** %499
  call void @__quantum__rt__array_reference(%Array* %493)
  store { %Array* }* %495, { %Array* }** %500
  %502 = getelementptr { %Array* }, { %Array* }* %495, i64 0, i32 0
  %503 = load %Array*, %Array** %502
  call void @__quantum__rt__array_reference(%Array* %503)
  %504 = bitcast { %Array* }* %495 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %504)
  store %Qubit* %488, %Qubit** %501
  %505 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %506 = bitcast %Tuple* %505 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %507 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %506, i64 0, i32 0
  %508 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %506, i64 0, i32 1
  store %Array* %487, %Array** %507
  call void @__quantum__rt__array_reference(%Array* %487)
  store { double, %Array*, { %Array* }*, %Qubit* }* %497, { double, %Array*, { %Array* }*, %Qubit* }** %508
  call void @__quantum__rt__array_reference(%Array* %493)
  call void @__quantum__rt__array_reference(%Array* %503)
  call void @__quantum__rt__tuple_reference(%Tuple* %504)
  call void @__quantum__rt__tuple_reference(%Tuple* %496)
  %509 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %489, i64 0, i32 0
  %510 = load %Callable*, %Callable** %509
  %511 = call %Callable* @__quantum__rt__callable_copy(%Callable* %510, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %511)
  call void @__quantum__rt__callable_invoke(%Callable* %511, %Tuple* %505, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %493)
  call void @__quantum__rt__array_unreference(%Array* %503)
  call void @__quantum__rt__tuple_unreference(%Tuple* %504)
  call void @__quantum__rt__tuple_unreference(%Tuple* %496)
  call void @__quantum__rt__array_unreference(%Array* %487)
  call void @__quantum__rt__array_unreference(%Array* %493)
  call void @__quantum__rt__array_unreference(%Array* %503)
  call void @__quantum__rt__tuple_unreference(%Tuple* %504)
  call void @__quantum__rt__tuple_unreference(%Tuple* %496)
  call void @__quantum__rt__tuple_unreference(%Tuple* %505)
  call void @__quantum__rt__callable_unreference(%Callable* %511)
  ret void

entry16:                                          ; No predecessors!
  %512 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %513 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %512, i64 0, i32 0
  %514 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %512, i64 0, i32 1
  %515 = load %Array*, %Array** %513
  %516 = load %Qubit*, %Qubit** %514
  %517 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %518 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %517, i64 0, i32 1
  %519 = load double, double* %518
  %520 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %517, i64 0, i32 2
  %521 = load %Array*, %Array** %520
  %522 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %517, i64 0, i32 3
  %523 = load { %Array* }*, { %Array* }** %522
  %524 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %525 = bitcast %Tuple* %524 to { double, %Array*, { %Array* }*, %Qubit* }*
  %526 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %525, i64 0, i32 0
  %527 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %525, i64 0, i32 1
  %528 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %525, i64 0, i32 2
  %529 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %525, i64 0, i32 3
  store double %519, double* %526
  store %Array* %521, %Array** %527
  call void @__quantum__rt__array_reference(%Array* %521)
  store { %Array* }* %523, { %Array* }** %528
  %530 = getelementptr { %Array* }, { %Array* }* %523, i64 0, i32 0
  %531 = load %Array*, %Array** %530
  call void @__quantum__rt__array_reference(%Array* %531)
  %532 = bitcast { %Array* }* %523 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %532)
  store %Qubit* %516, %Qubit** %529
  %533 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %534 = bitcast %Tuple* %533 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %535 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %534, i64 0, i32 0
  %536 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %534, i64 0, i32 1
  store %Array* %515, %Array** %535
  call void @__quantum__rt__array_reference(%Array* %515)
  store { double, %Array*, { %Array* }*, %Qubit* }* %525, { double, %Array*, { %Array* }*, %Qubit* }** %536
  call void @__quantum__rt__array_reference(%Array* %521)
  call void @__quantum__rt__array_reference(%Array* %531)
  call void @__quantum__rt__tuple_reference(%Tuple* %532)
  call void @__quantum__rt__tuple_reference(%Tuple* %524)
  %537 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %517, i64 0, i32 0
  %538 = load %Callable*, %Callable** %537
  %539 = call %Callable* @__quantum__rt__callable_copy(%Callable* %538, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %539)
  call void @__quantum__rt__callable_invoke(%Callable* %539, %Tuple* %533, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %521)
  call void @__quantum__rt__array_unreference(%Array* %531)
  call void @__quantum__rt__tuple_unreference(%Tuple* %532)
  call void @__quantum__rt__tuple_unreference(%Tuple* %524)
  call void @__quantum__rt__array_unreference(%Array* %515)
  call void @__quantum__rt__array_unreference(%Array* %521)
  call void @__quantum__rt__array_unreference(%Array* %531)
  call void @__quantum__rt__tuple_unreference(%Tuple* %532)
  call void @__quantum__rt__tuple_unreference(%Tuple* %524)
  call void @__quantum__rt__tuple_unreference(%Tuple* %533)
  call void @__quantum__rt__callable_unreference(%Callable* %539)
  ret void

entry17:                                          ; No predecessors!
  %540 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %541 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %540, i64 0, i32 0
  %542 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %540, i64 0, i32 1
  %543 = load %Array*, %Array** %541
  %544 = load %Array*, %Array** %542
  %545 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %546 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %545, i64 0, i32 1
  %547 = load %Array*, %Array** %546
  %548 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %549 = bitcast %Tuple* %548 to { %Array*, %Array* }*
  %550 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %549, i64 0, i32 0
  %551 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %549, i64 0, i32 1
  store %Array* %547, %Array** %550
  call void @__quantum__rt__array_reference(%Array* %547)
  store %Array* %544, %Array** %551
  call void @__quantum__rt__array_reference(%Array* %544)
  %552 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %553 = bitcast %Tuple* %552 to { %Array*, { %Array*, %Array* }* }*
  %554 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %553, i64 0, i32 0
  %555 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %553, i64 0, i32 1
  store %Array* %543, %Array** %554
  call void @__quantum__rt__array_reference(%Array* %543)
  store { %Array*, %Array* }* %549, { %Array*, %Array* }** %555
  call void @__quantum__rt__array_reference(%Array* %547)
  call void @__quantum__rt__array_reference(%Array* %544)
  call void @__quantum__rt__tuple_reference(%Tuple* %548)
  %556 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %545, i64 0, i32 0
  %557 = load %Callable*, %Callable** %556
  %558 = call %Callable* @__quantum__rt__callable_copy(%Callable* %557, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %558)
  call void @__quantum__rt__callable_invoke(%Callable* %558, %Tuple* %552, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %547)
  call void @__quantum__rt__array_unreference(%Array* %544)
  call void @__quantum__rt__tuple_unreference(%Tuple* %548)
  call void @__quantum__rt__array_unreference(%Array* %543)
  call void @__quantum__rt__array_unreference(%Array* %547)
  call void @__quantum__rt__array_unreference(%Array* %544)
  call void @__quantum__rt__tuple_unreference(%Tuple* %548)
  call void @__quantum__rt__tuple_unreference(%Tuple* %552)
  call void @__quantum__rt__callable_unreference(%Callable* %558)
  ret void

entry18:                                          ; No predecessors!
  %559 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %560 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %559, i64 0, i32 0
  %561 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %559, i64 0, i32 1
  %562 = load %Array*, %Array** %560
  %563 = load { double, %Array* }*, { double, %Array* }** %561
  %564 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %565 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %564, i64 0, i32 1
  %566 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %565
  %567 = getelementptr { double, %Array* }, { double, %Array* }* %563, i64 0, i32 0
  %568 = load double, double* %567
  %569 = getelementptr { double, %Array* }, { double, %Array* }* %563, i64 0, i32 1
  %570 = load %Array*, %Array** %569
  %571 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %572 = bitcast %Tuple* %571 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %573 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %572, i64 0, i32 0
  %574 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %572, i64 0, i32 1
  %575 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %572, i64 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %566, { { %Array*, %Array* }*, %Array* }** %573
  %576 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %566, i64 0, i32 0
  %577 = load { %Array*, %Array* }*, { %Array*, %Array* }** %576
  %578 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %577, i64 0, i32 0
  %579 = load %Array*, %Array** %578
  call void @__quantum__rt__array_reference(%Array* %579)
  %580 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %577, i64 0, i32 1
  %581 = load %Array*, %Array** %580
  call void @__quantum__rt__array_reference(%Array* %581)
  %582 = bitcast { %Array*, %Array* }* %577 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %582)
  %583 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %566, i64 0, i32 1
  %584 = load %Array*, %Array** %583
  call void @__quantum__rt__array_reference(%Array* %584)
  %585 = bitcast { { %Array*, %Array* }*, %Array* }* %566 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %585)
  store double %568, double* %574
  store %Array* %570, %Array** %575
  call void @__quantum__rt__array_reference(%Array* %570)
  %586 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %587 = bitcast %Tuple* %586 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %588 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %587, i64 0, i32 0
  %589 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %587, i64 0, i32 1
  store %Array* %562, %Array** %588
  call void @__quantum__rt__array_reference(%Array* %562)
  store { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %572, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %589
  call void @__quantum__rt__array_reference(%Array* %579)
  call void @__quantum__rt__array_reference(%Array* %581)
  call void @__quantum__rt__tuple_reference(%Tuple* %582)
  call void @__quantum__rt__array_reference(%Array* %584)
  call void @__quantum__rt__tuple_reference(%Tuple* %585)
  call void @__quantum__rt__array_reference(%Array* %570)
  call void @__quantum__rt__tuple_reference(%Tuple* %571)
  %590 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %564, i64 0, i32 0
  %591 = load %Callable*, %Callable** %590
  %592 = call %Callable* @__quantum__rt__callable_copy(%Callable* %591, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %592)
  call void @__quantum__rt__callable_invoke(%Callable* %592, %Tuple* %586, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %579)
  call void @__quantum__rt__array_unreference(%Array* %581)
  call void @__quantum__rt__tuple_unreference(%Tuple* %582)
  call void @__quantum__rt__array_unreference(%Array* %584)
  call void @__quantum__rt__tuple_unreference(%Tuple* %585)
  call void @__quantum__rt__array_unreference(%Array* %570)
  call void @__quantum__rt__tuple_unreference(%Tuple* %571)
  call void @__quantum__rt__array_unreference(%Array* %562)
  call void @__quantum__rt__array_unreference(%Array* %579)
  call void @__quantum__rt__array_unreference(%Array* %581)
  call void @__quantum__rt__tuple_unreference(%Tuple* %582)
  call void @__quantum__rt__array_unreference(%Array* %584)
  call void @__quantum__rt__tuple_unreference(%Tuple* %585)
  call void @__quantum__rt__array_unreference(%Array* %570)
  call void @__quantum__rt__tuple_unreference(%Tuple* %571)
  call void @__quantum__rt__tuple_unreference(%Tuple* %586)
  call void @__quantum__rt__callable_unreference(%Callable* %592)
  ret void

entry19:                                          ; No predecessors!
  %593 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %594 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %593, i64 0, i32 0
  %595 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %593, i64 0, i32 1
  %596 = load %Array*, %Array** %594
  %597 = load %Array*, %Array** %595
  %598 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %599 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %598, i64 0, i32 1
  %600 = load double, double* %599
  %601 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %598, i64 0, i32 2
  %602 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %601
  %603 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %604 = bitcast %Tuple* %603 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %605 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %604, i64 0, i32 0
  %606 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %604, i64 0, i32 1
  %607 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %604, i64 0, i32 2
  store double %600, double* %605
  store { { %Callable* }*, { i64, %Callable* }* }* %602, { { %Callable* }*, { i64, %Callable* }* }** %606
  %608 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %602, i64 0, i32 0
  %609 = load { %Callable* }*, { %Callable* }** %608
  %610 = getelementptr { %Callable* }, { %Callable* }* %609, i64 0, i32 0
  %611 = load %Callable*, %Callable** %610
  call void @__quantum__rt__callable_reference(%Callable* %611)
  %612 = bitcast { %Callable* }* %609 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %612)
  %613 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %602, i64 0, i32 1
  %614 = load { i64, %Callable* }*, { i64, %Callable* }** %613
  %615 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %614, i64 0, i32 1
  %616 = load %Callable*, %Callable** %615
  call void @__quantum__rt__callable_reference(%Callable* %616)
  %617 = bitcast { i64, %Callable* }* %614 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %617)
  %618 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %602 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %618)
  store %Array* %597, %Array** %607
  call void @__quantum__rt__array_reference(%Array* %597)
  %619 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %620 = bitcast %Tuple* %619 to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %621 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %620, i64 0, i32 0
  %622 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %620, i64 0, i32 1
  store %Array* %596, %Array** %621
  call void @__quantum__rt__array_reference(%Array* %596)
  store { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %604, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %622
  call void @__quantum__rt__callable_reference(%Callable* %611)
  call void @__quantum__rt__tuple_reference(%Tuple* %612)
  call void @__quantum__rt__callable_reference(%Callable* %616)
  call void @__quantum__rt__tuple_reference(%Tuple* %617)
  call void @__quantum__rt__tuple_reference(%Tuple* %618)
  call void @__quantum__rt__array_reference(%Array* %597)
  call void @__quantum__rt__tuple_reference(%Tuple* %603)
  %623 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %598, i64 0, i32 0
  %624 = load %Callable*, %Callable** %623
  %625 = call %Callable* @__quantum__rt__callable_copy(%Callable* %624, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %625)
  call void @__quantum__rt__callable_invoke(%Callable* %625, %Tuple* %619, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %611)
  call void @__quantum__rt__tuple_unreference(%Tuple* %612)
  call void @__quantum__rt__callable_unreference(%Callable* %616)
  call void @__quantum__rt__tuple_unreference(%Tuple* %617)
  call void @__quantum__rt__tuple_unreference(%Tuple* %618)
  call void @__quantum__rt__array_unreference(%Array* %597)
  call void @__quantum__rt__tuple_unreference(%Tuple* %603)
  call void @__quantum__rt__array_unreference(%Array* %596)
  call void @__quantum__rt__callable_unreference(%Callable* %611)
  call void @__quantum__rt__tuple_unreference(%Tuple* %612)
  call void @__quantum__rt__callable_unreference(%Callable* %616)
  call void @__quantum__rt__tuple_unreference(%Tuple* %617)
  call void @__quantum__rt__tuple_unreference(%Tuple* %618)
  call void @__quantum__rt__array_unreference(%Array* %597)
  call void @__quantum__rt__tuple_unreference(%Tuple* %603)
  call void @__quantum__rt__tuple_unreference(%Tuple* %619)
  call void @__quantum__rt__callable_unreference(%Callable* %625)
  ret void
}

define void @Lifted__PartialApplication__1__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 1
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array* }* }*
  %10 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %9, i64 0, i32 1
  store %Array* %7, %Array** %10
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %7)
  %13 = sub i64 %12, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %entry
  %14 = phi i64 [ 0, %entry ], [ %20, %exiting__9 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %14)
  %17 = bitcast i8* %16 to { double, double }**
  %18 = load { double, double }*, { double, double }** %17
  %19 = bitcast { double, double }* %18 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %19)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %20 = add i64 %14, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_reference(%Array* %7)
  store { %Array* }* %4, { %Array* }** %11
  %21 = getelementptr { %Array* }, { %Array* }* %4, i64 0, i32 0
  %22 = load %Array*, %Array** %21
  call void @__quantum__rt__array_reference(%Array* %22)
  %23 = bitcast { %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %25 = bitcast %Tuple* %24 to { %Array*, { %Array*, { %Array* }* }* }*
  %26 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %25, i64 0, i32 0
  %27 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %25, i64 0, i32 1
  store %Array* %3, %Array** %26
  call void @__quantum__rt__array_reference(%Array* %3)
  store { %Array*, { %Array* }* }* %9, { %Array*, { %Array* }* }** %27
  %28 = sub i64 %12, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %29 = phi i64 [ 0, %exit__9 ], [ %35, %exiting__10 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %34)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %35 = add i64 %29, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_reference(%Array* %7)
  call void @__quantum__rt__array_reference(%Array* %22)
  call void @__quantum__rt__tuple_reference(%Tuple* %23)
  call void @__quantum__rt__tuple_reference(%Tuple* %8)
  %36 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i64 0, i32 0
  %37 = load %Callable*, %Callable** %36
  %38 = call %Callable* @__quantum__rt__callable_copy(%Callable* %37, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %38)
  call void @__quantum__rt__callable_make_controlled(%Callable* %38)
  call void @__quantum__rt__callable_invoke(%Callable* %38, %Tuple* %24, %Tuple* %result-tuple)
  %39 = sub i64 %12, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %40 = phi i64 [ 0, %exit__10 ], [ %46, %exiting__11 ]
  %41 = icmp sle i64 %40, %39
  br i1 %41, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %40)
  %43 = bitcast i8* %42 to { double, double }**
  %44 = load { double, double }*, { double, double }** %43
  %45 = bitcast { double, double }* %44 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %45)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %46 = add i64 %40, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_unreference(%Array* %7)
  call void @__quantum__rt__array_unreference(%Array* %22)
  call void @__quantum__rt__tuple_unreference(%Tuple* %23)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  call void @__quantum__rt__array_unreference(%Array* %3)
  %47 = sub i64 %12, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %48 = phi i64 [ 0, %exit__11 ], [ %54, %exiting__12 ]
  %49 = icmp sle i64 %48, %47
  br i1 %49, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %48)
  %51 = bitcast i8* %50 to { double, double }**
  %52 = load { double, double }*, { double, double }** %51
  %53 = bitcast { double, double }* %52 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %53)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %54 = add i64 %48, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_unreference(%Array* %7)
  call void @__quantum__rt__array_unreference(%Array* %22)
  call void @__quantum__rt__tuple_unreference(%Tuple* %23)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  call void @__quantum__rt__callable_unreference(%Callable* %38)
  ret void

entry1:                                           ; No predecessors!
  %55 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %56 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %55, i64 0, i32 0
  %57 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %55, i64 0, i32 1
  %58 = load %Array*, %Array** %56
  %59 = load %Array*, %Array** %57
  %60 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %61 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %60, i64 0, i32 1
  %62 = load double, double* %61
  %63 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %60, i64 0, i32 2
  %64 = load %Array*, %Array** %63
  %65 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %60, i64 0, i32 3
  %66 = load i2, i2* %65
  %67 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %60, i64 0, i32 4
  %68 = load %Range, %Range* %67
  %69 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %60, i64 0, i32 5
  %70 = load i64, i64* %69
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { %Range, i64 }*
  %73 = getelementptr { %Range, i64 }, { %Range, i64 }* %72, i64 0, i32 0
  %74 = getelementptr { %Range, i64 }, { %Range, i64 }* %72, i64 0, i32 1
  store %Range %68, %Range* %73
  store i64 %70, i64* %74
  %75 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %76 = bitcast %Tuple* %75 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %77 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %76, i64 0, i32 0
  %78 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %76, i64 0, i32 1
  %79 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %76, i64 0, i32 2
  %80 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %76, i64 0, i32 3
  %81 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %76, i64 0, i32 4
  store double %62, double* %77
  store %Array* %64, %Array** %78
  call void @__quantum__rt__array_reference(%Array* %64)
  store i2 %66, i2* %79
  store { %Range, i64 }* %72, { %Range, i64 }** %80
  call void @__quantum__rt__tuple_reference(%Tuple* %71)
  store %Array* %59, %Array** %81
  call void @__quantum__rt__array_reference(%Array* %59)
  %82 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %83 = bitcast %Tuple* %82 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %84 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %83, i64 0, i32 0
  %85 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %83, i64 0, i32 1
  store %Array* %58, %Array** %84
  call void @__quantum__rt__array_reference(%Array* %58)
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %76, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %85
  call void @__quantum__rt__array_reference(%Array* %64)
  call void @__quantum__rt__tuple_reference(%Tuple* %71)
  call void @__quantum__rt__array_reference(%Array* %59)
  call void @__quantum__rt__tuple_reference(%Tuple* %75)
  %86 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %60, i64 0, i32 0
  %87 = load %Callable*, %Callable** %86
  %88 = call %Callable* @__quantum__rt__callable_copy(%Callable* %87, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %88)
  call void @__quantum__rt__callable_make_controlled(%Callable* %88)
  call void @__quantum__rt__callable_invoke(%Callable* %88, %Tuple* %82, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  call void @__quantum__rt__array_unreference(%Array* %64)
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  call void @__quantum__rt__array_unreference(%Array* %59)
  call void @__quantum__rt__tuple_unreference(%Tuple* %75)
  call void @__quantum__rt__array_unreference(%Array* %58)
  call void @__quantum__rt__array_unreference(%Array* %64)
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  call void @__quantum__rt__array_unreference(%Array* %59)
  call void @__quantum__rt__tuple_unreference(%Tuple* %75)
  call void @__quantum__rt__tuple_unreference(%Tuple* %82)
  call void @__quantum__rt__callable_unreference(%Callable* %88)
  ret void

entry2:                                           ; No predecessors!
  %89 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %90 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %89, i64 0, i32 0
  %91 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %89, i64 0, i32 1
  %92 = load %Array*, %Array** %90
  %93 = load { %Array* }*, { %Array* }** %91
  %94 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %95 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %94, i64 0, i32 1
  %96 = load %Callable*, %Callable** %95
  %97 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %98 = bitcast %Tuple* %97 to { %Callable*, { %Array* }* }*
  %99 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %98, i64 0, i32 0
  %100 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %98, i64 0, i32 1
  store %Callable* %96, %Callable** %99
  call void @__quantum__rt__callable_reference(%Callable* %96)
  store { %Array* }* %93, { %Array* }** %100
  %101 = getelementptr { %Array* }, { %Array* }* %93, i64 0, i32 0
  %102 = load %Array*, %Array** %101
  call void @__quantum__rt__array_reference(%Array* %102)
  %103 = bitcast { %Array* }* %93 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %103)
  %104 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %105 = bitcast %Tuple* %104 to { %Array*, { %Callable*, { %Array* }* }* }*
  %106 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %105, i64 0, i32 0
  %107 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %105, i64 0, i32 1
  store %Array* %92, %Array** %106
  call void @__quantum__rt__array_reference(%Array* %92)
  store { %Callable*, { %Array* }* }* %98, { %Callable*, { %Array* }* }** %107
  call void @__quantum__rt__callable_reference(%Callable* %96)
  call void @__quantum__rt__array_reference(%Array* %102)
  call void @__quantum__rt__tuple_reference(%Tuple* %103)
  call void @__quantum__rt__tuple_reference(%Tuple* %97)
  %108 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %94, i64 0, i32 0
  %109 = load %Callable*, %Callable** %108
  %110 = call %Callable* @__quantum__rt__callable_copy(%Callable* %109, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %110)
  call void @__quantum__rt__callable_make_controlled(%Callable* %110)
  call void @__quantum__rt__callable_invoke(%Callable* %110, %Tuple* %104, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %96)
  call void @__quantum__rt__array_unreference(%Array* %102)
  call void @__quantum__rt__tuple_unreference(%Tuple* %103)
  call void @__quantum__rt__tuple_unreference(%Tuple* %97)
  call void @__quantum__rt__array_unreference(%Array* %92)
  call void @__quantum__rt__callable_unreference(%Callable* %96)
  call void @__quantum__rt__array_unreference(%Array* %102)
  call void @__quantum__rt__tuple_unreference(%Tuple* %103)
  call void @__quantum__rt__tuple_unreference(%Tuple* %97)
  call void @__quantum__rt__tuple_unreference(%Tuple* %104)
  call void @__quantum__rt__callable_unreference(%Callable* %110)
  ret void

entry3:                                           ; No predecessors!
  %111 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %112 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %111, i64 0, i32 0
  %113 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %111, i64 0, i32 1
  %114 = load %Array*, %Array** %112
  %115 = load { %Array* }*, { %Array* }** %113
  %116 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %117 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %116, i64 0, i32 1
  %118 = load %Array*, %Array** %117
  %119 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %120 = bitcast %Tuple* %119 to { %Array*, { %Array* }* }*
  %121 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %120, i64 0, i32 0
  %122 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %120, i64 0, i32 1
  store %Array* %118, %Array** %121
  call void @__quantum__rt__array_reference(%Array* %118)
  store { %Array* }* %115, { %Array* }** %122
  %123 = getelementptr { %Array* }, { %Array* }* %115, i64 0, i32 0
  %124 = load %Array*, %Array** %123
  call void @__quantum__rt__array_reference(%Array* %124)
  %125 = bitcast { %Array* }* %115 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %125)
  %126 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %127 = bitcast %Tuple* %126 to { %Array*, { %Array*, { %Array* }* }* }*
  %128 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %127, i64 0, i32 0
  %129 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %127, i64 0, i32 1
  store %Array* %114, %Array** %128
  call void @__quantum__rt__array_reference(%Array* %114)
  store { %Array*, { %Array* }* }* %120, { %Array*, { %Array* }* }** %129
  call void @__quantum__rt__array_reference(%Array* %118)
  call void @__quantum__rt__array_reference(%Array* %124)
  call void @__quantum__rt__tuple_reference(%Tuple* %125)
  call void @__quantum__rt__tuple_reference(%Tuple* %119)
  %130 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %116, i64 0, i32 0
  %131 = load %Callable*, %Callable** %130
  %132 = call %Callable* @__quantum__rt__callable_copy(%Callable* %131, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %132)
  call void @__quantum__rt__callable_make_controlled(%Callable* %132)
  call void @__quantum__rt__callable_invoke(%Callable* %132, %Tuple* %126, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %118)
  call void @__quantum__rt__array_unreference(%Array* %124)
  call void @__quantum__rt__tuple_unreference(%Tuple* %125)
  call void @__quantum__rt__tuple_unreference(%Tuple* %119)
  call void @__quantum__rt__array_unreference(%Array* %114)
  call void @__quantum__rt__array_unreference(%Array* %118)
  call void @__quantum__rt__array_unreference(%Array* %124)
  call void @__quantum__rt__tuple_unreference(%Tuple* %125)
  call void @__quantum__rt__tuple_unreference(%Tuple* %119)
  call void @__quantum__rt__tuple_unreference(%Tuple* %126)
  call void @__quantum__rt__callable_unreference(%Callable* %132)
  ret void

entry4:                                           ; No predecessors!
  %133 = bitcast %Tuple* %arg-tuple to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %134 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %133, i64 0, i32 0
  %135 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %133, i64 0, i32 1
  %136 = load %Array*, %Array** %134
  %137 = load { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %135
  %138 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %139 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %138, i64 0, i32 1
  %140 = load double, double* %139
  %141 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %138, i64 0, i32 2
  %142 = load i64, i64* %141
  %143 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %137, i64 0, i32 0
  %144 = load double, double* %143
  %145 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %137, i64 0, i32 1
  %146 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %145
  %147 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %137, i64 0, i32 2
  %148 = load %Array*, %Array** %147
  %149 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %150 = bitcast %Tuple* %149 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %151 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 0
  %152 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 1
  %153 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 2
  %154 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 3
  %155 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, i64 0, i32 4
  store double %140, double* %151
  store i64 %142, i64* %152
  store double %144, double* %153
  store { { %Callable* }*, { i64, %Callable* }* }* %146, { { %Callable* }*, { i64, %Callable* }* }** %154
  %156 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %146, i64 0, i32 0
  %157 = load { %Callable* }*, { %Callable* }** %156
  %158 = getelementptr { %Callable* }, { %Callable* }* %157, i64 0, i32 0
  %159 = load %Callable*, %Callable** %158
  call void @__quantum__rt__callable_reference(%Callable* %159)
  %160 = bitcast { %Callable* }* %157 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %160)
  %161 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %146, i64 0, i32 1
  %162 = load { i64, %Callable* }*, { i64, %Callable* }** %161
  %163 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %162, i64 0, i32 1
  %164 = load %Callable*, %Callable** %163
  call void @__quantum__rt__callable_reference(%Callable* %164)
  %165 = bitcast { i64, %Callable* }* %162 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %165)
  %166 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %146 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %166)
  store %Array* %148, %Array** %155
  call void @__quantum__rt__array_reference(%Array* %148)
  %167 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %168 = bitcast %Tuple* %167 to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %169 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %168, i64 0, i32 0
  %170 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %168, i64 0, i32 1
  store %Array* %136, %Array** %169
  call void @__quantum__rt__array_reference(%Array* %136)
  store { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %150, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %170
  call void @__quantum__rt__callable_reference(%Callable* %159)
  call void @__quantum__rt__tuple_reference(%Tuple* %160)
  call void @__quantum__rt__callable_reference(%Callable* %164)
  call void @__quantum__rt__tuple_reference(%Tuple* %165)
  call void @__quantum__rt__tuple_reference(%Tuple* %166)
  call void @__quantum__rt__array_reference(%Array* %148)
  call void @__quantum__rt__tuple_reference(%Tuple* %149)
  %171 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %138, i64 0, i32 0
  %172 = load %Callable*, %Callable** %171
  %173 = call %Callable* @__quantum__rt__callable_copy(%Callable* %172, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %173)
  call void @__quantum__rt__callable_make_controlled(%Callable* %173)
  call void @__quantum__rt__callable_invoke(%Callable* %173, %Tuple* %167, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %159)
  call void @__quantum__rt__tuple_unreference(%Tuple* %160)
  call void @__quantum__rt__callable_unreference(%Callable* %164)
  call void @__quantum__rt__tuple_unreference(%Tuple* %165)
  call void @__quantum__rt__tuple_unreference(%Tuple* %166)
  call void @__quantum__rt__array_unreference(%Array* %148)
  call void @__quantum__rt__tuple_unreference(%Tuple* %149)
  call void @__quantum__rt__array_unreference(%Array* %136)
  call void @__quantum__rt__callable_unreference(%Callable* %159)
  call void @__quantum__rt__tuple_unreference(%Tuple* %160)
  call void @__quantum__rt__callable_unreference(%Callable* %164)
  call void @__quantum__rt__tuple_unreference(%Tuple* %165)
  call void @__quantum__rt__tuple_unreference(%Tuple* %166)
  call void @__quantum__rt__array_unreference(%Array* %148)
  call void @__quantum__rt__tuple_unreference(%Tuple* %149)
  call void @__quantum__rt__tuple_unreference(%Tuple* %167)
  call void @__quantum__rt__callable_unreference(%Callable* %173)
  ret void

entry5:                                           ; No predecessors!
  %174 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, double, %Array* }* }*
  %175 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %174, i64 0, i32 0
  %176 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %174, i64 0, i32 1
  %177 = load %Array*, %Array** %175
  %178 = load { i64, double, %Array* }*, { i64, double, %Array* }** %176
  %179 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %180 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %179, i64 0, i32 1
  %181 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %180
  %182 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %178, i64 0, i32 0
  %183 = load i64, i64* %182
  %184 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %178, i64 0, i32 1
  %185 = load double, double* %184
  %186 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %178, i64 0, i32 2
  %187 = load %Array*, %Array** %186
  %188 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %189 = bitcast %Tuple* %188 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %190 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %189, i64 0, i32 0
  %191 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %189, i64 0, i32 1
  %192 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %189, i64 0, i32 2
  %193 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %189, i64 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %181, { { %Callable* }*, { i64, %Callable* }* }** %190
  %194 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %181, i64 0, i32 0
  %195 = load { %Callable* }*, { %Callable* }** %194
  %196 = getelementptr { %Callable* }, { %Callable* }* %195, i64 0, i32 0
  %197 = load %Callable*, %Callable** %196
  call void @__quantum__rt__callable_reference(%Callable* %197)
  %198 = bitcast { %Callable* }* %195 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %198)
  %199 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %181, i64 0, i32 1
  %200 = load { i64, %Callable* }*, { i64, %Callable* }** %199
  %201 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %200, i64 0, i32 1
  %202 = load %Callable*, %Callable** %201
  call void @__quantum__rt__callable_reference(%Callable* %202)
  %203 = bitcast { i64, %Callable* }* %200 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %203)
  %204 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %181 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %204)
  store i64 %183, i64* %191
  store double %185, double* %192
  store %Array* %187, %Array** %193
  call void @__quantum__rt__array_reference(%Array* %187)
  %205 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %206 = bitcast %Tuple* %205 to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %207 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %206, i64 0, i32 0
  %208 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %206, i64 0, i32 1
  store %Array* %177, %Array** %207
  call void @__quantum__rt__array_reference(%Array* %177)
  store { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %189, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %208
  call void @__quantum__rt__callable_reference(%Callable* %197)
  call void @__quantum__rt__tuple_reference(%Tuple* %198)
  call void @__quantum__rt__callable_reference(%Callable* %202)
  call void @__quantum__rt__tuple_reference(%Tuple* %203)
  call void @__quantum__rt__tuple_reference(%Tuple* %204)
  call void @__quantum__rt__array_reference(%Array* %187)
  call void @__quantum__rt__tuple_reference(%Tuple* %188)
  %209 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %179, i64 0, i32 0
  %210 = load %Callable*, %Callable** %209
  %211 = call %Callable* @__quantum__rt__callable_copy(%Callable* %210, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %211)
  call void @__quantum__rt__callable_make_controlled(%Callable* %211)
  call void @__quantum__rt__callable_invoke(%Callable* %211, %Tuple* %205, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %197)
  call void @__quantum__rt__tuple_unreference(%Tuple* %198)
  call void @__quantum__rt__callable_unreference(%Callable* %202)
  call void @__quantum__rt__tuple_unreference(%Tuple* %203)
  call void @__quantum__rt__tuple_unreference(%Tuple* %204)
  call void @__quantum__rt__array_unreference(%Array* %187)
  call void @__quantum__rt__tuple_unreference(%Tuple* %188)
  call void @__quantum__rt__array_unreference(%Array* %177)
  call void @__quantum__rt__callable_unreference(%Callable* %197)
  call void @__quantum__rt__tuple_unreference(%Tuple* %198)
  call void @__quantum__rt__callable_unreference(%Callable* %202)
  call void @__quantum__rt__tuple_unreference(%Tuple* %203)
  call void @__quantum__rt__tuple_unreference(%Tuple* %204)
  call void @__quantum__rt__array_unreference(%Array* %187)
  call void @__quantum__rt__tuple_unreference(%Tuple* %188)
  call void @__quantum__rt__tuple_unreference(%Tuple* %205)
  call void @__quantum__rt__callable_unreference(%Callable* %211)
  ret void

entry6:                                           ; No predecessors!
  %212 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %213 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %212, i64 0, i32 0
  %214 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %212, i64 0, i32 1
  %215 = load %Array*, %Array** %213
  %216 = load %Array*, %Array** %214
  %217 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %218 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %217, i64 0, i32 1
  %219 = load %Array*, %Array** %218
  %220 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %221 = bitcast %Tuple* %220 to { %Array*, %Array* }*
  %222 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %221, i64 0, i32 0
  %223 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %221, i64 0, i32 1
  store %Array* %219, %Array** %222
  %224 = call i64 @__quantum__rt__array_get_size_1d(%Array* %219)
  %225 = sub i64 %224, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %entry6
  %226 = phi i64 [ 0, %entry6 ], [ %231, %exiting__21 ]
  %227 = icmp sle i64 %226, %225
  br i1 %227, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %228 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %219, i64 %226)
  %229 = bitcast i8* %228 to %Callable**
  %230 = load %Callable*, %Callable** %229
  call void @__quantum__rt__callable_reference(%Callable* %230)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %231 = add i64 %226, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_reference(%Array* %219)
  store %Array* %216, %Array** %223
  call void @__quantum__rt__array_reference(%Array* %216)
  %232 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %233 = bitcast %Tuple* %232 to { %Array*, { %Array*, %Array* }* }*
  %234 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %233, i64 0, i32 0
  %235 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %233, i64 0, i32 1
  store %Array* %215, %Array** %234
  call void @__quantum__rt__array_reference(%Array* %215)
  store { %Array*, %Array* }* %221, { %Array*, %Array* }** %235
  %236 = sub i64 %224, 1
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %237 = phi i64 [ 0, %exit__21 ], [ %242, %exiting__22 ]
  %238 = icmp sle i64 %237, %236
  br i1 %238, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %239 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %219, i64 %237)
  %240 = bitcast i8* %239 to %Callable**
  %241 = load %Callable*, %Callable** %240
  call void @__quantum__rt__callable_reference(%Callable* %241)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %242 = add i64 %237, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_reference(%Array* %219)
  call void @__quantum__rt__array_reference(%Array* %216)
  call void @__quantum__rt__tuple_reference(%Tuple* %220)
  %243 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %217, i64 0, i32 0
  %244 = load %Callable*, %Callable** %243
  %245 = call %Callable* @__quantum__rt__callable_copy(%Callable* %244, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %245)
  call void @__quantum__rt__callable_make_controlled(%Callable* %245)
  call void @__quantum__rt__callable_invoke(%Callable* %245, %Tuple* %232, %Tuple* %result-tuple)
  %246 = sub i64 %224, 1
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %247 = phi i64 [ 0, %exit__22 ], [ %252, %exiting__23 ]
  %248 = icmp sle i64 %247, %246
  br i1 %248, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %249 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %219, i64 %247)
  %250 = bitcast i8* %249 to %Callable**
  %251 = load %Callable*, %Callable** %250
  call void @__quantum__rt__callable_unreference(%Callable* %251)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %252 = add i64 %247, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_unreference(%Array* %219)
  call void @__quantum__rt__array_unreference(%Array* %216)
  call void @__quantum__rt__tuple_unreference(%Tuple* %220)
  call void @__quantum__rt__array_unreference(%Array* %215)
  %253 = sub i64 %224, 1
  br label %header__24

header__24:                                       ; preds = %exiting__24, %exit__23
  %254 = phi i64 [ 0, %exit__23 ], [ %259, %exiting__24 ]
  %255 = icmp sle i64 %254, %253
  br i1 %255, label %body__24, label %exit__24

body__24:                                         ; preds = %header__24
  %256 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %219, i64 %254)
  %257 = bitcast i8* %256 to %Callable**
  %258 = load %Callable*, %Callable** %257
  call void @__quantum__rt__callable_unreference(%Callable* %258)
  br label %exiting__24

exiting__24:                                      ; preds = %body__24
  %259 = add i64 %254, 1
  br label %header__24

exit__24:                                         ; preds = %header__24
  call void @__quantum__rt__array_unreference(%Array* %219)
  call void @__quantum__rt__array_unreference(%Array* %216)
  call void @__quantum__rt__tuple_unreference(%Tuple* %220)
  call void @__quantum__rt__tuple_unreference(%Tuple* %232)
  call void @__quantum__rt__callable_unreference(%Callable* %245)
  ret void

entry7:                                           ; No predecessors!
  %260 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %261 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %260, i64 0, i32 0
  %262 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %260, i64 0, i32 1
  %263 = load %Array*, %Array** %261
  %264 = load { %Array*, %Array* }*, { %Array*, %Array* }** %262
  %265 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %266 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %265, i64 0, i32 1
  %267 = load i64, i64* %266
  %268 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %265, i64 0, i32 2
  %269 = load %Callable*, %Callable** %268
  %270 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %264, i64 0, i32 0
  %271 = load %Array*, %Array** %270
  %272 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %264, i64 0, i32 1
  %273 = load %Array*, %Array** %272
  %274 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %275 = bitcast %Tuple* %274 to { i64, %Callable*, %Array*, %Array* }*
  %276 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %275, i64 0, i32 0
  %277 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %275, i64 0, i32 1
  %278 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %275, i64 0, i32 2
  %279 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %275, i64 0, i32 3
  store i64 %267, i64* %276
  store %Callable* %269, %Callable** %277
  call void @__quantum__rt__callable_reference(%Callable* %269)
  store %Array* %271, %Array** %278
  call void @__quantum__rt__array_reference(%Array* %271)
  store %Array* %273, %Array** %279
  call void @__quantum__rt__array_reference(%Array* %273)
  %280 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %281 = bitcast %Tuple* %280 to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %282 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %281, i64 0, i32 0
  %283 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %281, i64 0, i32 1
  store %Array* %263, %Array** %282
  call void @__quantum__rt__array_reference(%Array* %263)
  store { i64, %Callable*, %Array*, %Array* }* %275, { i64, %Callable*, %Array*, %Array* }** %283
  call void @__quantum__rt__callable_reference(%Callable* %269)
  call void @__quantum__rt__array_reference(%Array* %271)
  call void @__quantum__rt__array_reference(%Array* %273)
  call void @__quantum__rt__tuple_reference(%Tuple* %274)
  %284 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %265, i64 0, i32 0
  %285 = load %Callable*, %Callable** %284
  %286 = call %Callable* @__quantum__rt__callable_copy(%Callable* %285, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %286)
  call void @__quantum__rt__callable_make_controlled(%Callable* %286)
  call void @__quantum__rt__callable_invoke(%Callable* %286, %Tuple* %280, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %269)
  call void @__quantum__rt__array_unreference(%Array* %271)
  call void @__quantum__rt__array_unreference(%Array* %273)
  call void @__quantum__rt__tuple_unreference(%Tuple* %274)
  call void @__quantum__rt__array_unreference(%Array* %263)
  call void @__quantum__rt__callable_unreference(%Callable* %269)
  call void @__quantum__rt__array_unreference(%Array* %271)
  call void @__quantum__rt__array_unreference(%Array* %273)
  call void @__quantum__rt__tuple_unreference(%Tuple* %274)
  call void @__quantum__rt__tuple_unreference(%Tuple* %280)
  call void @__quantum__rt__callable_unreference(%Callable* %286)
  ret void

entry8:                                           ; No predecessors!
  %287 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %288 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %287, i64 0, i32 0
  %289 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %287, i64 0, i32 1
  %290 = load %Array*, %Array** %288
  %291 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %289
  %292 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %293 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %292, i64 0, i32 1
  %294 = load i64, i64* %293
  %295 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %292, i64 0, i32 2
  %296 = load %Callable*, %Callable** %295
  %297 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %291, i64 0, i32 0
  %298 = load %Array*, %Array** %297
  %299 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %291, i64 0, i32 1
  %300 = load %Qubit*, %Qubit** %299
  %301 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %302 = bitcast %Tuple* %301 to { i64, %Callable*, %Array*, %Qubit* }*
  %303 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %302, i64 0, i32 0
  %304 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %302, i64 0, i32 1
  %305 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %302, i64 0, i32 2
  %306 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %302, i64 0, i32 3
  store i64 %294, i64* %303
  store %Callable* %296, %Callable** %304
  call void @__quantum__rt__callable_reference(%Callable* %296)
  store %Array* %298, %Array** %305
  call void @__quantum__rt__array_reference(%Array* %298)
  store %Qubit* %300, %Qubit** %306
  %307 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %308 = bitcast %Tuple* %307 to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %309 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %308, i64 0, i32 0
  %310 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %308, i64 0, i32 1
  store %Array* %290, %Array** %309
  call void @__quantum__rt__array_reference(%Array* %290)
  store { i64, %Callable*, %Array*, %Qubit* }* %302, { i64, %Callable*, %Array*, %Qubit* }** %310
  call void @__quantum__rt__callable_reference(%Callable* %296)
  call void @__quantum__rt__array_reference(%Array* %298)
  call void @__quantum__rt__tuple_reference(%Tuple* %301)
  %311 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %292, i64 0, i32 0
  %312 = load %Callable*, %Callable** %311
  %313 = call %Callable* @__quantum__rt__callable_copy(%Callable* %312, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %313)
  call void @__quantum__rt__callable_make_controlled(%Callable* %313)
  call void @__quantum__rt__callable_invoke(%Callable* %313, %Tuple* %307, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %296)
  call void @__quantum__rt__array_unreference(%Array* %298)
  call void @__quantum__rt__tuple_unreference(%Tuple* %301)
  call void @__quantum__rt__array_unreference(%Array* %290)
  call void @__quantum__rt__callable_unreference(%Callable* %296)
  call void @__quantum__rt__array_unreference(%Array* %298)
  call void @__quantum__rt__tuple_unreference(%Tuple* %301)
  call void @__quantum__rt__tuple_unreference(%Tuple* %307)
  call void @__quantum__rt__callable_unreference(%Callable* %313)
  ret void

entry9:                                           ; No predecessors!
  %314 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %315 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %314, i64 0, i32 0
  %316 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %314, i64 0, i32 1
  %317 = load %Array*, %Array** %315
  %318 = load { double, %Array* }*, { double, %Array* }** %316
  %319 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %320 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %319, i64 0, i32 1
  %321 = load i64, i64* %320
  %322 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %319, i64 0, i32 2
  %323 = load %Callable*, %Callable** %322
  %324 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %325 = bitcast %Tuple* %324 to { i64, %Callable* }*
  %326 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %325, i64 0, i32 0
  %327 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %325, i64 0, i32 1
  store i64 %321, i64* %326
  store %Callable* %323, %Callable** %327
  call void @__quantum__rt__callable_reference(%Callable* %323)
  %328 = getelementptr { double, %Array* }, { double, %Array* }* %318, i64 0, i32 0
  %329 = load double, double* %328
  %330 = getelementptr { double, %Array* }, { double, %Array* }* %318, i64 0, i32 1
  %331 = load %Array*, %Array** %330
  %332 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %333 = bitcast %Tuple* %332 to { { i64, %Callable* }*, double, %Array* }*
  %334 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %333, i64 0, i32 0
  %335 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %333, i64 0, i32 1
  %336 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %333, i64 0, i32 2
  store { i64, %Callable* }* %325, { i64, %Callable* }** %334
  call void @__quantum__rt__callable_reference(%Callable* %323)
  call void @__quantum__rt__tuple_reference(%Tuple* %324)
  store double %329, double* %335
  store %Array* %331, %Array** %336
  call void @__quantum__rt__array_reference(%Array* %331)
  %337 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %338 = bitcast %Tuple* %337 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %339 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %338, i64 0, i32 0
  %340 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %338, i64 0, i32 1
  store %Array* %317, %Array** %339
  call void @__quantum__rt__array_reference(%Array* %317)
  store { { i64, %Callable* }*, double, %Array* }* %333, { { i64, %Callable* }*, double, %Array* }** %340
  call void @__quantum__rt__callable_reference(%Callable* %323)
  call void @__quantum__rt__tuple_reference(%Tuple* %324)
  call void @__quantum__rt__array_reference(%Array* %331)
  call void @__quantum__rt__tuple_reference(%Tuple* %332)
  %341 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %319, i64 0, i32 0
  %342 = load %Callable*, %Callable** %341
  %343 = call %Callable* @__quantum__rt__callable_copy(%Callable* %342, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %343)
  call void @__quantum__rt__callable_make_controlled(%Callable* %343)
  call void @__quantum__rt__callable_invoke(%Callable* %343, %Tuple* %337, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %323)
  call void @__quantum__rt__tuple_unreference(%Tuple* %324)
  call void @__quantum__rt__callable_unreference(%Callable* %323)
  call void @__quantum__rt__tuple_unreference(%Tuple* %324)
  call void @__quantum__rt__array_unreference(%Array* %331)
  call void @__quantum__rt__tuple_unreference(%Tuple* %332)
  call void @__quantum__rt__array_unreference(%Array* %317)
  call void @__quantum__rt__callable_unreference(%Callable* %323)
  call void @__quantum__rt__tuple_unreference(%Tuple* %324)
  call void @__quantum__rt__array_unreference(%Array* %331)
  call void @__quantum__rt__tuple_unreference(%Tuple* %332)
  call void @__quantum__rt__tuple_unreference(%Tuple* %337)
  call void @__quantum__rt__callable_unreference(%Callable* %343)
  ret void

entry10:                                          ; No predecessors!
  %344 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array* }*, %Array* }* }*
  %345 = getelementptr { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %344, i64 0, i32 0
  %346 = getelementptr { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %344, i64 0, i32 1
  %347 = load %Array*, %Array** %345
  %348 = load { { %Array* }*, %Array* }*, { { %Array* }*, %Array* }** %346
  %349 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %350 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %349, i64 0, i32 1
  %351 = load { i64, %Callable* }*, { i64, %Callable* }** %350
  %352 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %348, i64 0, i32 0
  %353 = load { %Array* }*, { %Array* }** %352
  %354 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %348, i64 0, i32 1
  %355 = load %Array*, %Array** %354
  %356 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %357 = bitcast %Tuple* %356 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %358 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %357, i64 0, i32 0
  %359 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %357, i64 0, i32 1
  %360 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %357, i64 0, i32 2
  store { i64, %Callable* }* %351, { i64, %Callable* }** %358
  %361 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %351, i64 0, i32 1
  %362 = load %Callable*, %Callable** %361
  call void @__quantum__rt__callable_reference(%Callable* %362)
  %363 = bitcast { i64, %Callable* }* %351 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %363)
  store { %Array* }* %353, { %Array* }** %359
  %364 = getelementptr { %Array* }, { %Array* }* %353, i64 0, i32 0
  %365 = load %Array*, %Array** %364
  call void @__quantum__rt__array_reference(%Array* %365)
  %366 = bitcast { %Array* }* %353 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %366)
  store %Array* %355, %Array** %360
  call void @__quantum__rt__array_reference(%Array* %355)
  %367 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %368 = bitcast %Tuple* %367 to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %369 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %368, i64 0, i32 0
  %370 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %368, i64 0, i32 1
  store %Array* %347, %Array** %369
  call void @__quantum__rt__array_reference(%Array* %347)
  store { { i64, %Callable* }*, { %Array* }*, %Array* }* %357, { { i64, %Callable* }*, { %Array* }*, %Array* }** %370
  call void @__quantum__rt__callable_reference(%Callable* %362)
  call void @__quantum__rt__tuple_reference(%Tuple* %363)
  call void @__quantum__rt__array_reference(%Array* %365)
  call void @__quantum__rt__tuple_reference(%Tuple* %366)
  call void @__quantum__rt__array_reference(%Array* %355)
  call void @__quantum__rt__tuple_reference(%Tuple* %356)
  %371 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %349, i64 0, i32 0
  %372 = load %Callable*, %Callable** %371
  %373 = call %Callable* @__quantum__rt__callable_copy(%Callable* %372, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %373)
  call void @__quantum__rt__callable_make_controlled(%Callable* %373)
  call void @__quantum__rt__callable_invoke(%Callable* %373, %Tuple* %367, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %362)
  call void @__quantum__rt__tuple_unreference(%Tuple* %363)
  call void @__quantum__rt__array_unreference(%Array* %365)
  call void @__quantum__rt__tuple_unreference(%Tuple* %366)
  call void @__quantum__rt__array_unreference(%Array* %355)
  call void @__quantum__rt__tuple_unreference(%Tuple* %356)
  call void @__quantum__rt__array_unreference(%Array* %347)
  call void @__quantum__rt__callable_unreference(%Callable* %362)
  call void @__quantum__rt__tuple_unreference(%Tuple* %363)
  call void @__quantum__rt__array_unreference(%Array* %365)
  call void @__quantum__rt__tuple_unreference(%Tuple* %366)
  call void @__quantum__rt__array_unreference(%Array* %355)
  call void @__quantum__rt__tuple_unreference(%Tuple* %356)
  call void @__quantum__rt__tuple_unreference(%Tuple* %367)
  call void @__quantum__rt__callable_unreference(%Callable* %373)
  ret void

entry11:                                          ; No predecessors!
  %374 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %375 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %374, i64 0, i32 0
  %376 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %374, i64 0, i32 1
  %377 = load %Array*, %Array** %375
  %378 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %376
  %379 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %380 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %379, i64 0, i32 1
  %381 = load %Array*, %Array** %380
  %382 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %379, i64 0, i32 2
  %383 = load %Callable*, %Callable** %382
  %384 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %378, i64 0, i32 0
  %385 = load %Array*, %Array** %384
  %386 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %378, i64 0, i32 1
  %387 = load %Qubit*, %Qubit** %386
  %388 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %389 = bitcast %Tuple* %388 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %390 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %389, i64 0, i32 0
  %391 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %389, i64 0, i32 1
  %392 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %389, i64 0, i32 2
  %393 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %389, i64 0, i32 3
  store %Array* %381, %Array** %390
  call void @__quantum__rt__array_reference(%Array* %381)
  store %Callable* %383, %Callable** %391
  call void @__quantum__rt__callable_reference(%Callable* %383)
  store %Array* %385, %Array** %392
  call void @__quantum__rt__array_reference(%Array* %385)
  store %Qubit* %387, %Qubit** %393
  %394 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %395 = bitcast %Tuple* %394 to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %396 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %395, i64 0, i32 0
  %397 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %395, i64 0, i32 1
  store %Array* %377, %Array** %396
  call void @__quantum__rt__array_reference(%Array* %377)
  store { %Array*, %Callable*, %Array*, %Qubit* }* %389, { %Array*, %Callable*, %Array*, %Qubit* }** %397
  call void @__quantum__rt__array_reference(%Array* %381)
  call void @__quantum__rt__callable_reference(%Callable* %383)
  call void @__quantum__rt__array_reference(%Array* %385)
  call void @__quantum__rt__tuple_reference(%Tuple* %388)
  %398 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %379, i64 0, i32 0
  %399 = load %Callable*, %Callable** %398
  %400 = call %Callable* @__quantum__rt__callable_copy(%Callable* %399, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %400)
  call void @__quantum__rt__callable_make_controlled(%Callable* %400)
  call void @__quantum__rt__callable_invoke(%Callable* %400, %Tuple* %394, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %381)
  call void @__quantum__rt__callable_unreference(%Callable* %383)
  call void @__quantum__rt__array_unreference(%Array* %385)
  call void @__quantum__rt__tuple_unreference(%Tuple* %388)
  call void @__quantum__rt__array_unreference(%Array* %377)
  call void @__quantum__rt__array_unreference(%Array* %381)
  call void @__quantum__rt__callable_unreference(%Callable* %383)
  call void @__quantum__rt__array_unreference(%Array* %385)
  call void @__quantum__rt__tuple_unreference(%Tuple* %388)
  call void @__quantum__rt__tuple_unreference(%Tuple* %394)
  call void @__quantum__rt__callable_unreference(%Callable* %400)
  ret void

entry12:                                          ; No predecessors!
  %401 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %402 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %401, i64 0, i32 0
  %403 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %401, i64 0, i32 1
  %404 = load %Array*, %Array** %402
  %405 = load { %Array*, %Array* }*, { %Array*, %Array* }** %403
  %406 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %407 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %406, i64 0, i32 1
  %408 = load %Array*, %Array** %407
  %409 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %406, i64 0, i32 2
  %410 = load %Callable*, %Callable** %409
  %411 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %405, i64 0, i32 0
  %412 = load %Array*, %Array** %411
  %413 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %405, i64 0, i32 1
  %414 = load %Array*, %Array** %413
  %415 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 4))
  %416 = bitcast %Tuple* %415 to { %Array*, %Callable*, %Array*, %Array* }*
  %417 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %416, i64 0, i32 0
  %418 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %416, i64 0, i32 1
  %419 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %416, i64 0, i32 2
  %420 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %416, i64 0, i32 3
  store %Array* %408, %Array** %417
  call void @__quantum__rt__array_reference(%Array* %408)
  store %Callable* %410, %Callable** %418
  call void @__quantum__rt__callable_reference(%Callable* %410)
  store %Array* %412, %Array** %419
  call void @__quantum__rt__array_reference(%Array* %412)
  store %Array* %414, %Array** %420
  call void @__quantum__rt__array_reference(%Array* %414)
  %421 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %422 = bitcast %Tuple* %421 to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %423 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %422, i64 0, i32 0
  %424 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %422, i64 0, i32 1
  store %Array* %404, %Array** %423
  call void @__quantum__rt__array_reference(%Array* %404)
  store { %Array*, %Callable*, %Array*, %Array* }* %416, { %Array*, %Callable*, %Array*, %Array* }** %424
  call void @__quantum__rt__array_reference(%Array* %408)
  call void @__quantum__rt__callable_reference(%Callable* %410)
  call void @__quantum__rt__array_reference(%Array* %412)
  call void @__quantum__rt__array_reference(%Array* %414)
  call void @__quantum__rt__tuple_reference(%Tuple* %415)
  %425 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %406, i64 0, i32 0
  %426 = load %Callable*, %Callable** %425
  %427 = call %Callable* @__quantum__rt__callable_copy(%Callable* %426, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %427)
  call void @__quantum__rt__callable_make_controlled(%Callable* %427)
  call void @__quantum__rt__callable_invoke(%Callable* %427, %Tuple* %421, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %408)
  call void @__quantum__rt__callable_unreference(%Callable* %410)
  call void @__quantum__rt__array_unreference(%Array* %412)
  call void @__quantum__rt__array_unreference(%Array* %414)
  call void @__quantum__rt__tuple_unreference(%Tuple* %415)
  call void @__quantum__rt__array_unreference(%Array* %404)
  call void @__quantum__rt__array_unreference(%Array* %408)
  call void @__quantum__rt__callable_unreference(%Callable* %410)
  call void @__quantum__rt__array_unreference(%Array* %412)
  call void @__quantum__rt__array_unreference(%Array* %414)
  call void @__quantum__rt__tuple_unreference(%Tuple* %415)
  call void @__quantum__rt__tuple_unreference(%Tuple* %421)
  call void @__quantum__rt__callable_unreference(%Callable* %427)
  ret void

entry13:                                          ; No predecessors!
  %428 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %429 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %428, i64 0, i32 0
  %430 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %428, i64 0, i32 1
  %431 = load %Array*, %Array** %429
  %432 = load %Qubit*, %Qubit** %430
  %433 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %434 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %433, i64 0, i32 1
  %435 = load double, double* %434
  %436 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %433, i64 0, i32 2
  %437 = load %Array*, %Array** %436
  %438 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %433, i64 0, i32 3
  %439 = load { %Array* }*, { %Array* }** %438
  %440 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %441 = bitcast %Tuple* %440 to { double, %Array*, { %Array* }*, %Qubit* }*
  %442 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %441, i64 0, i32 0
  %443 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %441, i64 0, i32 1
  %444 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %441, i64 0, i32 2
  %445 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %441, i64 0, i32 3
  store double %435, double* %442
  store %Array* %437, %Array** %443
  call void @__quantum__rt__array_reference(%Array* %437)
  store { %Array* }* %439, { %Array* }** %444
  %446 = getelementptr { %Array* }, { %Array* }* %439, i64 0, i32 0
  %447 = load %Array*, %Array** %446
  call void @__quantum__rt__array_reference(%Array* %447)
  %448 = bitcast { %Array* }* %439 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %448)
  store %Qubit* %432, %Qubit** %445
  %449 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %450 = bitcast %Tuple* %449 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %451 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %450, i64 0, i32 0
  %452 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %450, i64 0, i32 1
  store %Array* %431, %Array** %451
  call void @__quantum__rt__array_reference(%Array* %431)
  store { double, %Array*, { %Array* }*, %Qubit* }* %441, { double, %Array*, { %Array* }*, %Qubit* }** %452
  call void @__quantum__rt__array_reference(%Array* %437)
  call void @__quantum__rt__array_reference(%Array* %447)
  call void @__quantum__rt__tuple_reference(%Tuple* %448)
  call void @__quantum__rt__tuple_reference(%Tuple* %440)
  %453 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %433, i64 0, i32 0
  %454 = load %Callable*, %Callable** %453
  %455 = call %Callable* @__quantum__rt__callable_copy(%Callable* %454, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %455)
  call void @__quantum__rt__callable_make_controlled(%Callable* %455)
  call void @__quantum__rt__callable_invoke(%Callable* %455, %Tuple* %449, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %437)
  call void @__quantum__rt__array_unreference(%Array* %447)
  call void @__quantum__rt__tuple_unreference(%Tuple* %448)
  call void @__quantum__rt__tuple_unreference(%Tuple* %440)
  call void @__quantum__rt__array_unreference(%Array* %431)
  call void @__quantum__rt__array_unreference(%Array* %437)
  call void @__quantum__rt__array_unreference(%Array* %447)
  call void @__quantum__rt__tuple_unreference(%Tuple* %448)
  call void @__quantum__rt__tuple_unreference(%Tuple* %440)
  call void @__quantum__rt__tuple_unreference(%Tuple* %449)
  call void @__quantum__rt__callable_unreference(%Callable* %455)
  ret void

entry14:                                          ; No predecessors!
  %456 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %457 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %456, i64 0, i32 0
  %458 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %456, i64 0, i32 1
  %459 = load %Array*, %Array** %457
  %460 = load %Qubit*, %Qubit** %458
  %461 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %462 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %461, i64 0, i32 1
  %463 = load double, double* %462
  %464 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %461, i64 0, i32 2
  %465 = load %Array*, %Array** %464
  %466 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %461, i64 0, i32 3
  %467 = load { %Array* }*, { %Array* }** %466
  %468 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %469 = bitcast %Tuple* %468 to { double, %Array*, { %Array* }*, %Qubit* }*
  %470 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %469, i64 0, i32 0
  %471 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %469, i64 0, i32 1
  %472 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %469, i64 0, i32 2
  %473 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %469, i64 0, i32 3
  store double %463, double* %470
  store %Array* %465, %Array** %471
  call void @__quantum__rt__array_reference(%Array* %465)
  store { %Array* }* %467, { %Array* }** %472
  %474 = getelementptr { %Array* }, { %Array* }* %467, i64 0, i32 0
  %475 = load %Array*, %Array** %474
  call void @__quantum__rt__array_reference(%Array* %475)
  %476 = bitcast { %Array* }* %467 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %476)
  store %Qubit* %460, %Qubit** %473
  %477 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %478 = bitcast %Tuple* %477 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %479 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %478, i64 0, i32 0
  %480 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %478, i64 0, i32 1
  store %Array* %459, %Array** %479
  call void @__quantum__rt__array_reference(%Array* %459)
  store { double, %Array*, { %Array* }*, %Qubit* }* %469, { double, %Array*, { %Array* }*, %Qubit* }** %480
  call void @__quantum__rt__array_reference(%Array* %465)
  call void @__quantum__rt__array_reference(%Array* %475)
  call void @__quantum__rt__tuple_reference(%Tuple* %476)
  call void @__quantum__rt__tuple_reference(%Tuple* %468)
  %481 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %461, i64 0, i32 0
  %482 = load %Callable*, %Callable** %481
  %483 = call %Callable* @__quantum__rt__callable_copy(%Callable* %482, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %483)
  call void @__quantum__rt__callable_make_controlled(%Callable* %483)
  call void @__quantum__rt__callable_invoke(%Callable* %483, %Tuple* %477, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %465)
  call void @__quantum__rt__array_unreference(%Array* %475)
  call void @__quantum__rt__tuple_unreference(%Tuple* %476)
  call void @__quantum__rt__tuple_unreference(%Tuple* %468)
  call void @__quantum__rt__array_unreference(%Array* %459)
  call void @__quantum__rt__array_unreference(%Array* %465)
  call void @__quantum__rt__array_unreference(%Array* %475)
  call void @__quantum__rt__tuple_unreference(%Tuple* %476)
  call void @__quantum__rt__tuple_unreference(%Tuple* %468)
  call void @__quantum__rt__tuple_unreference(%Tuple* %477)
  call void @__quantum__rt__callable_unreference(%Callable* %483)
  ret void

entry15:                                          ; No predecessors!
  %484 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %485 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %484, i64 0, i32 0
  %486 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %484, i64 0, i32 1
  %487 = load %Array*, %Array** %485
  %488 = load %Qubit*, %Qubit** %486
  %489 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %490 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %489, i64 0, i32 1
  %491 = load double, double* %490
  %492 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %489, i64 0, i32 2
  %493 = load %Array*, %Array** %492
  %494 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %489, i64 0, i32 3
  %495 = load { %Array* }*, { %Array* }** %494
  %496 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %497 = bitcast %Tuple* %496 to { double, %Array*, { %Array* }*, %Qubit* }*
  %498 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %497, i64 0, i32 0
  %499 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %497, i64 0, i32 1
  %500 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %497, i64 0, i32 2
  %501 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %497, i64 0, i32 3
  store double %491, double* %498
  store %Array* %493, %Array** %499
  call void @__quantum__rt__array_reference(%Array* %493)
  store { %Array* }* %495, { %Array* }** %500
  %502 = getelementptr { %Array* }, { %Array* }* %495, i64 0, i32 0
  %503 = load %Array*, %Array** %502
  call void @__quantum__rt__array_reference(%Array* %503)
  %504 = bitcast { %Array* }* %495 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %504)
  store %Qubit* %488, %Qubit** %501
  %505 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %506 = bitcast %Tuple* %505 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %507 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %506, i64 0, i32 0
  %508 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %506, i64 0, i32 1
  store %Array* %487, %Array** %507
  call void @__quantum__rt__array_reference(%Array* %487)
  store { double, %Array*, { %Array* }*, %Qubit* }* %497, { double, %Array*, { %Array* }*, %Qubit* }** %508
  call void @__quantum__rt__array_reference(%Array* %493)
  call void @__quantum__rt__array_reference(%Array* %503)
  call void @__quantum__rt__tuple_reference(%Tuple* %504)
  call void @__quantum__rt__tuple_reference(%Tuple* %496)
  %509 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %489, i64 0, i32 0
  %510 = load %Callable*, %Callable** %509
  %511 = call %Callable* @__quantum__rt__callable_copy(%Callable* %510, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %511)
  call void @__quantum__rt__callable_make_controlled(%Callable* %511)
  call void @__quantum__rt__callable_invoke(%Callable* %511, %Tuple* %505, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %493)
  call void @__quantum__rt__array_unreference(%Array* %503)
  call void @__quantum__rt__tuple_unreference(%Tuple* %504)
  call void @__quantum__rt__tuple_unreference(%Tuple* %496)
  call void @__quantum__rt__array_unreference(%Array* %487)
  call void @__quantum__rt__array_unreference(%Array* %493)
  call void @__quantum__rt__array_unreference(%Array* %503)
  call void @__quantum__rt__tuple_unreference(%Tuple* %504)
  call void @__quantum__rt__tuple_unreference(%Tuple* %496)
  call void @__quantum__rt__tuple_unreference(%Tuple* %505)
  call void @__quantum__rt__callable_unreference(%Callable* %511)
  ret void

entry16:                                          ; No predecessors!
  %512 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %513 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %512, i64 0, i32 0
  %514 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %512, i64 0, i32 1
  %515 = load %Array*, %Array** %513
  %516 = load %Qubit*, %Qubit** %514
  %517 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %518 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %517, i64 0, i32 1
  %519 = load double, double* %518
  %520 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %517, i64 0, i32 2
  %521 = load %Array*, %Array** %520
  %522 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %517, i64 0, i32 3
  %523 = load { %Array* }*, { %Array* }** %522
  %524 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %525 = bitcast %Tuple* %524 to { double, %Array*, { %Array* }*, %Qubit* }*
  %526 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %525, i64 0, i32 0
  %527 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %525, i64 0, i32 1
  %528 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %525, i64 0, i32 2
  %529 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %525, i64 0, i32 3
  store double %519, double* %526
  store %Array* %521, %Array** %527
  call void @__quantum__rt__array_reference(%Array* %521)
  store { %Array* }* %523, { %Array* }** %528
  %530 = getelementptr { %Array* }, { %Array* }* %523, i64 0, i32 0
  %531 = load %Array*, %Array** %530
  call void @__quantum__rt__array_reference(%Array* %531)
  %532 = bitcast { %Array* }* %523 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %532)
  store %Qubit* %516, %Qubit** %529
  %533 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %534 = bitcast %Tuple* %533 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %535 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %534, i64 0, i32 0
  %536 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %534, i64 0, i32 1
  store %Array* %515, %Array** %535
  call void @__quantum__rt__array_reference(%Array* %515)
  store { double, %Array*, { %Array* }*, %Qubit* }* %525, { double, %Array*, { %Array* }*, %Qubit* }** %536
  call void @__quantum__rt__array_reference(%Array* %521)
  call void @__quantum__rt__array_reference(%Array* %531)
  call void @__quantum__rt__tuple_reference(%Tuple* %532)
  call void @__quantum__rt__tuple_reference(%Tuple* %524)
  %537 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %517, i64 0, i32 0
  %538 = load %Callable*, %Callable** %537
  %539 = call %Callable* @__quantum__rt__callable_copy(%Callable* %538, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %539)
  call void @__quantum__rt__callable_make_controlled(%Callable* %539)
  call void @__quantum__rt__callable_invoke(%Callable* %539, %Tuple* %533, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %521)
  call void @__quantum__rt__array_unreference(%Array* %531)
  call void @__quantum__rt__tuple_unreference(%Tuple* %532)
  call void @__quantum__rt__tuple_unreference(%Tuple* %524)
  call void @__quantum__rt__array_unreference(%Array* %515)
  call void @__quantum__rt__array_unreference(%Array* %521)
  call void @__quantum__rt__array_unreference(%Array* %531)
  call void @__quantum__rt__tuple_unreference(%Tuple* %532)
  call void @__quantum__rt__tuple_unreference(%Tuple* %524)
  call void @__quantum__rt__tuple_unreference(%Tuple* %533)
  call void @__quantum__rt__callable_unreference(%Callable* %539)
  ret void

entry17:                                          ; No predecessors!
  %540 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %541 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %540, i64 0, i32 0
  %542 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %540, i64 0, i32 1
  %543 = load %Array*, %Array** %541
  %544 = load %Array*, %Array** %542
  %545 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %546 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %545, i64 0, i32 1
  %547 = load %Array*, %Array** %546
  %548 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %549 = bitcast %Tuple* %548 to { %Array*, %Array* }*
  %550 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %549, i64 0, i32 0
  %551 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %549, i64 0, i32 1
  store %Array* %547, %Array** %550
  call void @__quantum__rt__array_reference(%Array* %547)
  store %Array* %544, %Array** %551
  call void @__quantum__rt__array_reference(%Array* %544)
  %552 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %553 = bitcast %Tuple* %552 to { %Array*, { %Array*, %Array* }* }*
  %554 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %553, i64 0, i32 0
  %555 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %553, i64 0, i32 1
  store %Array* %543, %Array** %554
  call void @__quantum__rt__array_reference(%Array* %543)
  store { %Array*, %Array* }* %549, { %Array*, %Array* }** %555
  call void @__quantum__rt__array_reference(%Array* %547)
  call void @__quantum__rt__array_reference(%Array* %544)
  call void @__quantum__rt__tuple_reference(%Tuple* %548)
  %556 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %545, i64 0, i32 0
  %557 = load %Callable*, %Callable** %556
  %558 = call %Callable* @__quantum__rt__callable_copy(%Callable* %557, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %558)
  call void @__quantum__rt__callable_make_controlled(%Callable* %558)
  call void @__quantum__rt__callable_invoke(%Callable* %558, %Tuple* %552, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %547)
  call void @__quantum__rt__array_unreference(%Array* %544)
  call void @__quantum__rt__tuple_unreference(%Tuple* %548)
  call void @__quantum__rt__array_unreference(%Array* %543)
  call void @__quantum__rt__array_unreference(%Array* %547)
  call void @__quantum__rt__array_unreference(%Array* %544)
  call void @__quantum__rt__tuple_unreference(%Tuple* %548)
  call void @__quantum__rt__tuple_unreference(%Tuple* %552)
  call void @__quantum__rt__callable_unreference(%Callable* %558)
  ret void

entry18:                                          ; No predecessors!
  %559 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %560 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %559, i64 0, i32 0
  %561 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %559, i64 0, i32 1
  %562 = load %Array*, %Array** %560
  %563 = load { double, %Array* }*, { double, %Array* }** %561
  %564 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %565 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %564, i64 0, i32 1
  %566 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %565
  %567 = getelementptr { double, %Array* }, { double, %Array* }* %563, i64 0, i32 0
  %568 = load double, double* %567
  %569 = getelementptr { double, %Array* }, { double, %Array* }* %563, i64 0, i32 1
  %570 = load %Array*, %Array** %569
  %571 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %572 = bitcast %Tuple* %571 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %573 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %572, i64 0, i32 0
  %574 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %572, i64 0, i32 1
  %575 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %572, i64 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %566, { { %Array*, %Array* }*, %Array* }** %573
  %576 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %566, i64 0, i32 0
  %577 = load { %Array*, %Array* }*, { %Array*, %Array* }** %576
  %578 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %577, i64 0, i32 0
  %579 = load %Array*, %Array** %578
  call void @__quantum__rt__array_reference(%Array* %579)
  %580 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %577, i64 0, i32 1
  %581 = load %Array*, %Array** %580
  call void @__quantum__rt__array_reference(%Array* %581)
  %582 = bitcast { %Array*, %Array* }* %577 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %582)
  %583 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %566, i64 0, i32 1
  %584 = load %Array*, %Array** %583
  call void @__quantum__rt__array_reference(%Array* %584)
  %585 = bitcast { { %Array*, %Array* }*, %Array* }* %566 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %585)
  store double %568, double* %574
  store %Array* %570, %Array** %575
  call void @__quantum__rt__array_reference(%Array* %570)
  %586 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %587 = bitcast %Tuple* %586 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %588 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %587, i64 0, i32 0
  %589 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %587, i64 0, i32 1
  store %Array* %562, %Array** %588
  call void @__quantum__rt__array_reference(%Array* %562)
  store { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %572, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %589
  call void @__quantum__rt__array_reference(%Array* %579)
  call void @__quantum__rt__array_reference(%Array* %581)
  call void @__quantum__rt__tuple_reference(%Tuple* %582)
  call void @__quantum__rt__array_reference(%Array* %584)
  call void @__quantum__rt__tuple_reference(%Tuple* %585)
  call void @__quantum__rt__array_reference(%Array* %570)
  call void @__quantum__rt__tuple_reference(%Tuple* %571)
  %590 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %564, i64 0, i32 0
  %591 = load %Callable*, %Callable** %590
  %592 = call %Callable* @__quantum__rt__callable_copy(%Callable* %591, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %592)
  call void @__quantum__rt__callable_make_controlled(%Callable* %592)
  call void @__quantum__rt__callable_invoke(%Callable* %592, %Tuple* %586, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %579)
  call void @__quantum__rt__array_unreference(%Array* %581)
  call void @__quantum__rt__tuple_unreference(%Tuple* %582)
  call void @__quantum__rt__array_unreference(%Array* %584)
  call void @__quantum__rt__tuple_unreference(%Tuple* %585)
  call void @__quantum__rt__array_unreference(%Array* %570)
  call void @__quantum__rt__tuple_unreference(%Tuple* %571)
  call void @__quantum__rt__array_unreference(%Array* %562)
  call void @__quantum__rt__array_unreference(%Array* %579)
  call void @__quantum__rt__array_unreference(%Array* %581)
  call void @__quantum__rt__tuple_unreference(%Tuple* %582)
  call void @__quantum__rt__array_unreference(%Array* %584)
  call void @__quantum__rt__tuple_unreference(%Tuple* %585)
  call void @__quantum__rt__array_unreference(%Array* %570)
  call void @__quantum__rt__tuple_unreference(%Tuple* %571)
  call void @__quantum__rt__tuple_unreference(%Tuple* %586)
  call void @__quantum__rt__callable_unreference(%Callable* %592)
  ret void

entry19:                                          ; No predecessors!
  %593 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %594 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %593, i64 0, i32 0
  %595 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %593, i64 0, i32 1
  %596 = load %Array*, %Array** %594
  %597 = load %Array*, %Array** %595
  %598 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %599 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %598, i64 0, i32 1
  %600 = load double, double* %599
  %601 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %598, i64 0, i32 2
  %602 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %601
  %603 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %604 = bitcast %Tuple* %603 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %605 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %604, i64 0, i32 0
  %606 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %604, i64 0, i32 1
  %607 = getelementptr { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %604, i64 0, i32 2
  store double %600, double* %605
  store { { %Callable* }*, { i64, %Callable* }* }* %602, { { %Callable* }*, { i64, %Callable* }* }** %606
  %608 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %602, i64 0, i32 0
  %609 = load { %Callable* }*, { %Callable* }** %608
  %610 = getelementptr { %Callable* }, { %Callable* }* %609, i64 0, i32 0
  %611 = load %Callable*, %Callable** %610
  call void @__quantum__rt__callable_reference(%Callable* %611)
  %612 = bitcast { %Callable* }* %609 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %612)
  %613 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %602, i64 0, i32 1
  %614 = load { i64, %Callable* }*, { i64, %Callable* }** %613
  %615 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %614, i64 0, i32 1
  %616 = load %Callable*, %Callable** %615
  call void @__quantum__rt__callable_reference(%Callable* %616)
  %617 = bitcast { i64, %Callable* }* %614 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %617)
  %618 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %602 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %618)
  store %Array* %597, %Array** %607
  call void @__quantum__rt__array_reference(%Array* %597)
  %619 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %620 = bitcast %Tuple* %619 to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %621 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %620, i64 0, i32 0
  %622 = getelementptr { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %620, i64 0, i32 1
  store %Array* %596, %Array** %621
  call void @__quantum__rt__array_reference(%Array* %596)
  store { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %604, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %622
  call void @__quantum__rt__callable_reference(%Callable* %611)
  call void @__quantum__rt__tuple_reference(%Tuple* %612)
  call void @__quantum__rt__callable_reference(%Callable* %616)
  call void @__quantum__rt__tuple_reference(%Tuple* %617)
  call void @__quantum__rt__tuple_reference(%Tuple* %618)
  call void @__quantum__rt__array_reference(%Array* %597)
  call void @__quantum__rt__tuple_reference(%Tuple* %603)
  %623 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %598, i64 0, i32 0
  %624 = load %Callable*, %Callable** %623
  %625 = call %Callable* @__quantum__rt__callable_copy(%Callable* %624, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %625)
  call void @__quantum__rt__callable_make_controlled(%Callable* %625)
  call void @__quantum__rt__callable_invoke(%Callable* %625, %Tuple* %619, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %611)
  call void @__quantum__rt__tuple_unreference(%Tuple* %612)
  call void @__quantum__rt__callable_unreference(%Callable* %616)
  call void @__quantum__rt__tuple_unreference(%Tuple* %617)
  call void @__quantum__rt__tuple_unreference(%Tuple* %618)
  call void @__quantum__rt__array_unreference(%Array* %597)
  call void @__quantum__rt__tuple_unreference(%Tuple* %603)
  call void @__quantum__rt__array_unreference(%Array* %596)
  call void @__quantum__rt__callable_unreference(%Callable* %611)
  call void @__quantum__rt__tuple_unreference(%Tuple* %612)
  call void @__quantum__rt__callable_unreference(%Callable* %616)
  call void @__quantum__rt__tuple_unreference(%Tuple* %617)
  call void @__quantum__rt__tuple_unreference(%Tuple* %618)
  call void @__quantum__rt__array_unreference(%Array* %597)
  call void @__quantum__rt__tuple_unreference(%Tuple* %603)
  call void @__quantum__rt__tuple_unreference(%Tuple* %619)
  call void @__quantum__rt__callable_unreference(%Callable* %625)
  ret void
}

define { { double, double }*, double, double }* @Microsoft__Quantum__Preparation__BlochSphereCoordinates__body({ double, double }* %a0, { double, double }* %a1) {
entry:
  %0 = bitcast { double, double }* %a0 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %0)
  %1 = bitcast { double, double }* %a1 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %1)
  %abs0 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %a0)
  %abs1 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %a1)
  %arg0 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %a0)
  %arg1 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %a1)
  %2 = fmul double %abs0, %abs0
  %3 = fmul double %abs1, %abs1
  %d__inline__1 = fadd double %2, %3
  %r = call double @__quantum__qis__sqrt__body(double %d__inline__1)
  %4 = fadd double %arg0, %arg1
  %t = fmul double 5.000000e-01, %4
  %phi = fsub double %arg1, %arg0
  %5 = call double @__quantum__qis__arctan2__body(double %abs1, double %abs0)
  %theta = fmul double 2.000000e+00, %5
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }*, double, double }* getelementptr ({ { double, double }*, double, double }, { { double, double }*, double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { double, double }*, double, double }*
  %8 = getelementptr { { double, double }*, double, double }, { { double, double }*, double, double }* %7, i64 0, i32 0
  %9 = getelementptr { { double, double }*, double, double }, { { double, double }*, double, double }* %7, i64 0, i32 1
  %10 = getelementptr { { double, double }*, double, double }, { { double, double }*, double, double }* %7, i64 0, i32 2
  %11 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %r, double %t)
  store { double, double }* %11, { double, double }** %8
  store double %phi, double* %9
  store double %theta, double* %10
  call void @__quantum__rt__tuple_remove_access(%Tuple* %0)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %1)
  ret { { double, double }*, double, double }* %7
}

define double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %0)
  %1 = getelementptr { double, double }, { double, double }* %input, i64 0, i32 0
  %2 = load double, double* %1
  call void @__quantum__rt__tuple_remove_access(%Tuple* %0)
  ret double %2
}

define double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %0)
  %1 = getelementptr { double, double }, { double, double }* %input, i64 0, i32 1
  %2 = load double, double* %1
  call void @__quantum__rt__tuple_remove_access(%Tuple* %0)
  ret double %2
}

declare double @__quantum__qis__sqrt__body(double)

declare double @__quantum__qis__arctan2__body(double, double)

define { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %Magnitude, double %Argument) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr { double, double }, { double, double }* %1, i64 0, i32 0
  %3 = getelementptr { double, double }, { double, double }* %1, i64 0, i32 1
  store double %Magnitude, double* %2
  store double %Argument, double* %3
  ret { double, double }* %1
}

define { %Array*, %Array*, %Array* }* @Microsoft__Quantum__Preparation____QsRef0__StatePreparationSBMComputeCoefficients____body(%Array* %coefficients) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %9 = udiv i64 %0, 2
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %9)
  %disentanglingZ = alloca %Array*
  store %Array* %10, %Array** %disentanglingZ
  call void @__quantum__rt__array_add_access(%Array* %10)
  %11 = udiv i64 %0, 2
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %11)
  %disentanglingY = alloca %Array*
  store %Array* %12, %Array** %disentanglingY
  call void @__quantum__rt__array_add_access(%Array* %12)
  %13 = udiv i64 %0, 2
  %14 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %13)
  %newCoefficients = alloca %Array*
  store %Array* %14, %Array** %newCoefficients
  %15 = sub i64 %13, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %16)
  %19 = bitcast i8* %18 to { double, double }**
  %20 = load { double, double }*, { double, double }** %19
  %21 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %21)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %14)
  %23 = sub i64 %0, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__2
  br label %header__3

header__3:                                        ; preds = %exiting__3, %preheader__1
  %idxCoeff = phi i64 [ 0, %preheader__1 ], [ %59, %exiting__3 ]
  %24 = icmp sge i64 %idxCoeff, %23
  %25 = icmp sle i64 %idxCoeff, %23
  %26 = select i1 true, i1 %25, i1 %24
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %28 = bitcast i8* %27 to { double, double }**
  %29 = load { double, double }*, { double, double }** %28
  %30 = add i64 %idxCoeff, 1
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %30)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32
  %34 = call { { double, double }*, double, double }* @Microsoft__Quantum__Preparation__BlochSphereCoordinates__body({ double, double }* %29, { double, double }* %33)
  %35 = getelementptr { { double, double }*, double, double }, { { double, double }*, double, double }* %34, i64 0, i32 0
  %rt = load { double, double }*, { double, double }** %35
  %36 = bitcast { double, double }* %rt to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %36)
  %37 = getelementptr { { double, double }*, double, double }, { { double, double }*, double, double }* %34, i64 0, i32 1
  %phi = load double, double* %37
  %38 = getelementptr { { double, double }*, double, double }, { { double, double }*, double, double }* %34, i64 0, i32 2
  %theta = load double, double* %38
  %39 = load %Array*, %Array** %disentanglingZ
  %40 = call %Array* @__quantum__rt__array_copy(%Array* %39, i1 false)
  %41 = fmul double 5.000000e-01, %phi
  %42 = udiv i64 %idxCoeff, 2
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 %42)
  %44 = bitcast i8* %43 to double*
  %45 = load double, double* %44
  store double %41, double* %44
  %46 = load %Array*, %Array** %disentanglingZ
  call void @__quantum__rt__array_remove_access(%Array* %46)
  store %Array* %40, %Array** %disentanglingZ
  call void @__quantum__rt__array_add_access(%Array* %40)
  %47 = load %Array*, %Array** %disentanglingY
  %48 = call %Array* @__quantum__rt__array_copy(%Array* %47, i1 false)
  %49 = fmul double 5.000000e-01, %theta
  %50 = udiv i64 %idxCoeff, 2
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %48, i64 %50)
  %52 = bitcast i8* %51 to double*
  %53 = load double, double* %52
  store double %49, double* %52
  %54 = load %Array*, %Array** %disentanglingY
  call void @__quantum__rt__array_remove_access(%Array* %54)
  store %Array* %48, %Array** %disentanglingY
  call void @__quantum__rt__array_add_access(%Array* %48)
  %55 = load %Array*, %Array** %newCoefficients
  %56 = call %Array* @__quantum__rt__array_copy(%Array* %55, i1 false)
  %57 = call i64 @__quantum__rt__array_get_size_1d(%Array* %56)
  %58 = sub i64 %57, 1
  br label %header__4

exiting__3:                                       ; preds = %exit__7
  %59 = add i64 %idxCoeff, 2
  br label %header__3

exit__3:                                          ; preds = %header__3
  %60 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %61 = bitcast %Tuple* %60 to { %Array*, %Array*, %Array* }*
  %62 = getelementptr { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %61, i64 0, i32 0
  %63 = getelementptr { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %61, i64 0, i32 1
  %64 = getelementptr { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %61, i64 0, i32 2
  %65 = load %Array*, %Array** %disentanglingY
  call void @__quantum__rt__array_reference(%Array* %65)
  %66 = load %Array*, %Array** %disentanglingZ
  call void @__quantum__rt__array_reference(%Array* %66)
  %67 = load %Array*, %Array** %newCoefficients
  %68 = call i64 @__quantum__rt__array_get_size_1d(%Array* %67)
  %69 = sub i64 %68, 1
  br label %header__8

header__4:                                        ; preds = %exiting__4, %body__3
  %70 = phi i64 [ 0, %body__3 ], [ %76, %exiting__4 ]
  %71 = icmp sle i64 %70, %58
  br i1 %71, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 %70)
  %73 = bitcast i8* %72 to { double, double }**
  %74 = load { double, double }*, { double, double }** %73
  %75 = bitcast { double, double }* %74 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %75)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %76 = add i64 %70, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__tuple_reference(%Tuple* %36)
  %77 = udiv i64 %idxCoeff, 2
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 %77)
  %79 = bitcast i8* %78 to { double, double }**
  %80 = load { double, double }*, { double, double }** %79
  %81 = bitcast { double, double }* %80 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %81)
  store { double, double }* %rt, { double, double }** %79
  %82 = load %Array*, %Array** %newCoefficients
  %83 = call i64 @__quantum__rt__array_get_size_1d(%Array* %82)
  %84 = sub i64 %83, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %85 = phi i64 [ 0, %exit__4 ], [ %91, %exiting__5 ]
  %86 = icmp sle i64 %85, %84
  br i1 %86, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %82, i64 %85)
  %88 = bitcast i8* %87 to { double, double }**
  %89 = load { double, double }*, { double, double }** %88
  %90 = bitcast { double, double }* %89 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %90)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %91 = add i64 %85, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_remove_access(%Array* %82)
  store %Array* %56, %Array** %newCoefficients
  %92 = sub i64 %57, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %93 = phi i64 [ 0, %exit__5 ], [ %99, %exiting__6 ]
  %94 = icmp sle i64 %93, %92
  br i1 %94, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 %93)
  %96 = bitcast i8* %95 to { double, double }**
  %97 = load { double, double }*, { double, double }** %96
  %98 = bitcast { double, double }* %97 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %98)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %99 = add i64 %93, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_add_access(%Array* %56)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %36)
  %100 = load { double, double }*, { double, double }** %35
  %101 = bitcast { double, double }* %100 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %101)
  %102 = bitcast { { double, double }*, double, double }* %34 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %102)
  call void @__quantum__rt__array_unreference(%Array* %40)
  call void @__quantum__rt__array_unreference(%Array* %48)
  %103 = sub i64 %57, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %104 = phi i64 [ 0, %exit__6 ], [ %110, %exiting__7 ]
  %105 = icmp sle i64 %104, %103
  br i1 %105, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 %104)
  %107 = bitcast i8* %106 to { double, double }**
  %108 = load { double, double }*, { double, double }** %107
  %109 = bitcast { double, double }* %108 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %109)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %110 = add i64 %104, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_unreference(%Array* %56)
  br label %exiting__3

header__8:                                        ; preds = %exiting__8, %exit__3
  %111 = phi i64 [ 0, %exit__3 ], [ %117, %exiting__8 ]
  %112 = icmp sle i64 %111, %69
  br i1 %112, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 %111)
  %114 = bitcast i8* %113 to { double, double }**
  %115 = load { double, double }*, { double, double }** %114
  %116 = bitcast { double, double }* %115 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %116)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %117 = add i64 %111, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_reference(%Array* %67)
  store %Array* %65, %Array** %62
  store %Array* %66, %Array** %63
  store %Array* %67, %Array** %64
  %118 = sub i64 %0, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %119 = phi i64 [ 0, %exit__8 ], [ %125, %exiting__9 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %119)
  %122 = bitcast i8* %121 to { double, double }**
  %123 = load { double, double }*, { double, double }** %122
  %124 = bitcast { double, double }* %123 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %124)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %125 = add i64 %119, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %66)
  call void @__quantum__rt__array_remove_access(%Array* %65)
  %126 = sub i64 %68, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %127 = phi i64 [ 0, %exit__9 ], [ %133, %exiting__10 ]
  %128 = icmp sle i64 %127, %126
  br i1 %128, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 %127)
  %130 = bitcast i8* %129 to { double, double }**
  %131 = load { double, double }*, { double, double }** %130
  %132 = bitcast { double, double }* %131 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %132)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %133 = add i64 %127, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_remove_access(%Array* %67)
  call void @__quantum__rt__array_unreference(%Array* %10)
  call void @__quantum__rt__array_unreference(%Array* %12)
  %134 = sub i64 %13, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %135 = phi i64 [ 0, %exit__10 ], [ %141, %exiting__11 ]
  %136 = icmp sle i64 %135, %134
  br i1 %136, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %135)
  %138 = bitcast i8* %137 to { double, double }**
  %139 = load { double, double }*, { double, double }** %138
  %140 = bitcast { double, double }* %139 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %140)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %141 = add i64 %135, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_unreference(%Array* %14)
  ret { %Array*, %Array*, %Array* }* %61
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____body(double %tolerance, %Array* %disentangling, i2 %axis, { %Range, i64 }* %0, %Array* %register) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %disentangling)
  call void @__quantum__rt__array_add_access(%Array* %register)
  %1 = getelementptr { %Range, i64 }, { %Range, i64 }* %0, i64 0, i32 0
  %rngControl = load %Range, %Range* %1
  %2 = getelementptr { %Range, i64 }, { %Range, i64 }* %0, i64 0, i32 1
  %idxTarget = load i64, i64* %2
  %3 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %rngControl, i1 false)
  %actualControl = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %3)
  %4 = getelementptr { %Array* }, { %Array* }* %actualControl, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %5)
  %6 = bitcast { %Array* }* %actualControl to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %tolerance, %Array* %disentangling, i2 %axis, { %Array* }* %actualControl, %Qubit* %9)
  call void @__quantum__rt__array_remove_access(%Array* %disentangling)
  call void @__quantum__rt__array_remove_access(%Array* %register)
  call void @__quantum__rt__array_remove_access(%Array* %5)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_unreference(%Array* %3)
  call void @__quantum__rt__array_unreference(%Array* %5)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  ret void
}

declare %Array* @__quantum__rt__array_slice_1d(%Array*, %Range, i1)

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %tolerance, %Array* %coefficients, i2 %pauli, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_add_access(%Array* %1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = load i2, i2* @PauliZ
  %4 = icmp eq i2 %pauli, %3
  br i1 %4, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, double, %Array*, { %Array* }* }*
  %7 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 0
  %8 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 1
  %9 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 2
  %10 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 3
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  call void @__quantum__rt__array_reference(%Array* %1)
  call void @__quantum__rt__tuple_reference(%Tuple* %2)
  store %Callable* %11, %Callable** %7
  store double %tolerance, double* %8
  store %Array* %coefficients, %Array** %9
  store { %Array* }* %control, { %Array* }** %10
  %op = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.21, %Tuple* %5)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Qubit* }*
  %14 = getelementptr { %Qubit* }, { %Qubit* }* %13, i64 0, i32 0
  store %Qubit* %target, %Qubit** %14
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %15 = load i2, i2* @PauliX
  %16 = icmp eq i2 %pauli, %15
  br i1 %16, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %19 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i64 0, i32 0
  %20 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i64 0, i32 1
  %21 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i64 0, i32 2
  %22 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i64 0, i32 3
  %23 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i64 0, i32 4
  %24 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  %25 = load i2, i2* @PauliZ
  call void @__quantum__rt__array_reference(%Array* %1)
  call void @__quantum__rt__tuple_reference(%Tuple* %2)
  store %Callable* %24, %Callable** %19
  store double %tolerance, double* %20
  store %Array* %coefficients, %Array** %21
  store i2 %25, i2* %22
  store { %Array* }* %control, { %Array* }** %23
  %op1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__2.22, %Tuple* %17)
  %26 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H, %Tuple* null)
  call void @Microsoft__Quantum__Canon___64296e0a5b7546ff9012499eddaeb34d_ApplyWithCA__body(%Callable* %26, %Callable* %op1, %Qubit* %target)
  call void @__quantum__rt__callable_unreference(%Callable* %op1)
  call void @__quantum__rt__callable_unreference(%Callable* %26)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %27 = load i2, i2* @PauliY
  %28 = icmp eq i2 %pauli, %27
  br i1 %28, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %31 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i64 0, i32 0
  %32 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i64 0, i32 1
  %33 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i64 0, i32 2
  %34 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i64 0, i32 3
  %35 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i64 0, i32 4
  %36 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  %37 = load i2, i2* @PauliX
  call void @__quantum__rt__array_reference(%Array* %1)
  call void @__quantum__rt__tuple_reference(%Tuple* %2)
  store %Callable* %36, %Callable** %31
  store double %tolerance, double* %32
  store %Array* %coefficients, %Array** %33
  store i2 %37, i2* %34
  store { %Array* }* %control, { %Array* }** %35
  %op2 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__3.23, %Tuple* %29)
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %38)
  call void @Microsoft__Quantum__Canon___64296e0a5b7546ff9012499eddaeb34d_ApplyWithCA__body(%Callable* %38, %Callable* %op2, %Qubit* %target)
  call void @__quantum__rt__callable_unreference(%Callable* %op2)
  call void @__quantum__rt__callable_unreference(%Callable* %38)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %39 = load i2, i2* @PauliI
  %40 = icmp eq i2 %pauli, %39
  br i1 %40, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients, { %Array* }* %control)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %41 = call %String* @__quantum__rt__string_create(i32 37, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @14, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__pauli_to_string(i2 %pauli)
  %43 = call %String* @__quantum__rt__string_concatenate(%String* %41, %String* %42)
  call void @__quantum__rt__string_unreference(%String* %41)
  call void @__quantum__rt__string_unreference(%String* %42)
  %44 = call %String* @__quantum__rt__string_create(i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @15, i32 0, i32 0))
  %45 = call %String* @__quantum__rt__string_concatenate(%String* %43, %String* %44)
  call void @__quantum__rt__string_unreference(%String* %43)
  call void @__quantum__rt__string_unreference(%String* %44)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  call void @__quantum__rt__fail(%String* %45)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____adj(double %tolerance, %Array* %disentangling, i2 %axis, { %Range, i64 }* %0, %Array* %register) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %disentangling)
  call void @__quantum__rt__array_add_access(%Array* %register)
  %1 = getelementptr { %Range, i64 }, { %Range, i64 }* %0, i64 0, i32 0
  %rngControl = load %Range, %Range* %1
  %2 = getelementptr { %Range, i64 }, { %Range, i64 }* %0, i64 0, i32 1
  %idxTarget = load i64, i64* %2
  %3 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %rngControl, i1 false)
  %__qsVar0__actualControl__ = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %3)
  %4 = getelementptr { %Array* }, { %Array* }* %__qsVar0__actualControl__, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %5)
  %6 = bitcast { %Array* }* %__qsVar0__actualControl__ to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %tolerance, %Array* %disentangling, i2 %axis, { %Array* }* %__qsVar0__actualControl__, %Qubit* %9)
  call void @__quantum__rt__array_remove_access(%Array* %disentangling)
  call void @__quantum__rt__array_remove_access(%Array* %register)
  call void @__quantum__rt__array_remove_access(%Array* %5)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_unreference(%Array* %3)
  call void @__quantum__rt__array_unreference(%Array* %5)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %tolerance, %Array* %coefficients, i2 %pauli, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_add_access(%Array* %1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = load i2, i2* @PauliZ
  %4 = icmp eq i2 %pauli, %3
  br i1 %4, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, double, %Array*, { %Array* }* }*
  %7 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 0
  %8 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 1
  %9 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 2
  %10 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i64 0, i32 3
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  call void @__quantum__rt__array_reference(%Array* %1)
  call void @__quantum__rt__tuple_reference(%Tuple* %2)
  store %Callable* %11, %Callable** %7
  store double %tolerance, double* %8
  store %Array* %coefficients, %Array** %9
  store { %Array* }* %control, { %Array* }** %10
  %__qsVar0__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.24, %Tuple* %5)
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Qubit* }*
  %15 = getelementptr { %Qubit* }, { %Qubit* }* %14, i64 0, i32 0
  store %Qubit* %target, %Qubit** %15
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %__qsVar0__op__)
  call void @__quantum__rt__callable_unreference(%Callable* %12)
  call void @__quantum__rt__tuple_unreference(%Tuple* %13)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %16 = load i2, i2* @PauliX
  %17 = icmp eq i2 %pauli, %16
  br i1 %17, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %20 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i64 0, i32 0
  %21 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i64 0, i32 1
  %22 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i64 0, i32 2
  %23 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i64 0, i32 3
  %24 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i64 0, i32 4
  %25 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  %26 = load i2, i2* @PauliZ
  call void @__quantum__rt__array_reference(%Array* %1)
  call void @__quantum__rt__tuple_reference(%Tuple* %2)
  store %Callable* %25, %Callable** %20
  store double %tolerance, double* %21
  store %Array* %coefficients, %Array** %22
  store i2 %26, i2* %23
  store { %Array* }* %control, { %Array* }** %24
  %__qsVar1__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__2.25, %Tuple* %18)
  %27 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H, %Tuple* null)
  call void @Microsoft__Quantum__Canon___64296e0a5b7546ff9012499eddaeb34d_ApplyWithCA__adj(%Callable* %27, %Callable* %__qsVar1__op__, %Qubit* %target)
  call void @__quantum__rt__callable_unreference(%Callable* %__qsVar1__op__)
  call void @__quantum__rt__callable_unreference(%Callable* %27)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %28 = load i2, i2* @PauliY
  %29 = icmp eq i2 %pauli, %28
  br i1 %29, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %32 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i64 0, i32 0
  %33 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i64 0, i32 1
  %34 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i64 0, i32 2
  %35 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i64 0, i32 3
  %36 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i64 0, i32 4
  %37 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  %38 = load i2, i2* @PauliX
  call void @__quantum__rt__array_reference(%Array* %1)
  call void @__quantum__rt__tuple_reference(%Tuple* %2)
  store %Callable* %37, %Callable** %32
  store double %tolerance, double* %33
  store %Array* %coefficients, %Array** %34
  store i2 %38, i2* %35
  store { %Array* }* %control, { %Array* }** %36
  %__qsVar2__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__3.26, %Tuple* %30)
  %39 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %39)
  call void @Microsoft__Quantum__Canon___64296e0a5b7546ff9012499eddaeb34d_ApplyWithCA__adj(%Callable* %39, %Callable* %__qsVar2__op__, %Qubit* %target)
  call void @__quantum__rt__callable_unreference(%Callable* %__qsVar2__op__)
  call void @__quantum__rt__callable_unreference(%Callable* %39)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %40 = load i2, i2* @PauliI
  %41 = icmp eq i2 %pauli, %40
  br i1 %41, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %coefficients, { %Array* }* %control)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %42 = call %String* @__quantum__rt__string_create(i32 37, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @16, i32 0, i32 0))
  %43 = call %String* @__quantum__rt__pauli_to_string(i2 %pauli)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_unreference(%String* %42)
  call void @__quantum__rt__string_unreference(%String* %43)
  %45 = call %String* @__quantum__rt__string_create(i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @17, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_unreference(%String* %44)
  call void @__quantum__rt__string_unreference(%String* %45)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  call void @__quantum__rt__fail(%String* %46)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 1
  %disentangling = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %disentangling)
  %3 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 2
  %axis = load i2, i2* %3
  %4 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 3
  %5 = load { %Range, i64 }*, { %Range, i64 }** %4
  %6 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 4
  %register = load %Array*, %Array** %6
  call void @__quantum__rt__array_add_access(%Array* %register)
  %7 = getelementptr { %Range, i64 }, { %Range, i64 }* %5, i64 0, i32 0
  %rngControl = load %Range, %Range* %7
  %8 = getelementptr { %Range, i64 }, { %Range, i64 }* %5, i64 0, i32 1
  %idxTarget = load i64, i64* %8
  %9 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %rngControl, i1 false)
  %actualControl = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %9)
  %10 = getelementptr { %Array* }, { %Array* }* %actualControl, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %11)
  %12 = bitcast { %Array* }* %actualControl to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 0
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 1
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 2
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 3
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 4
  call void @__quantum__rt__array_reference(%Array* %disentangling)
  call void @__quantum__rt__array_reference(%Array* %11)
  call void @__quantum__rt__tuple_reference(%Tuple* %12)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %21 = bitcast i8* %20 to %Qubit**
  %22 = load %Qubit*, %Qubit** %21
  store double %tolerance, double* %15
  store %Array* %disentangling, %Array** %16
  store i2 %axis, i2* %17
  store { %Array* }* %actualControl, { %Array* }** %18
  store %Qubit* %22, %Qubit** %19
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %disentangling)
  call void @__quantum__rt__array_remove_access(%Array* %register)
  call void @__quantum__rt__array_remove_access(%Array* %11)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %12)
  call void @__quantum__rt__array_unreference(%Array* %9)
  call void @__quantum__rt__array_unreference(%Array* %11)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__array_unreference(%Array* %disentangling)
  call void @__quantum__rt__array_unreference(%Array* %11)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__tuple_unreference(%Tuple* %13)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %3 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %pauli = load i2, i2* %3
  %4 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %control = load { %Array* }*, { %Array* }** %4
  %5 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %6)
  %7 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  %8 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 4
  %target = load %Qubit*, %Qubit** %8
  %9 = load i2, i2* @PauliZ
  %10 = icmp eq i2 %pauli, %9
  br i1 %10, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, double, %Array*, { %Array* }* }*
  %13 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 0
  %14 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 1
  %15 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 2
  %16 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 3
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  call void @__quantum__rt__array_reference(%Array* %6)
  call void @__quantum__rt__tuple_reference(%Tuple* %7)
  store %Callable* %17, %Callable** %13
  store double %tolerance, double* %14
  store %Array* %coefficients, %Array** %15
  store { %Array* }* %control, { %Array* }** %16
  %op = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.27, %Tuple* %11)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %20 = bitcast %Tuple* %19 to { %Array*, %Qubit* }*
  %21 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %20, i64 0, i32 0
  %22 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %20, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  store %Array* %__controlQubits__, %Array** %21
  store %Qubit* %target, %Qubit** %22
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__callable_unreference(%Callable* %18)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__tuple_unreference(%Tuple* %19)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %23 = load i2, i2* @PauliX
  %24 = icmp eq i2 %pauli, %23
  br i1 %24, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %27 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 0
  %28 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 1
  %29 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 2
  %30 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 3
  %31 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 4
  %32 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  %33 = load i2, i2* @PauliZ
  call void @__quantum__rt__array_reference(%Array* %6)
  call void @__quantum__rt__tuple_reference(%Tuple* %7)
  store %Callable* %32, %Callable** %27
  store double %tolerance, double* %28
  store %Array* %coefficients, %Array** %29
  store i2 %33, i2* %30
  store { %Array* }* %control, { %Array* }** %31
  %op1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__2.28, %Tuple* %25)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %35 = bitcast %Tuple* %34 to { %Callable*, %Callable*, %Qubit* }*
  %36 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i64 0, i32 0
  %37 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i64 0, i32 1
  %38 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i64 0, i32 2
  %39 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H, %Tuple* null)
  call void @__quantum__rt__callable_reference(%Callable* %op1)
  store %Callable* %39, %Callable** %36
  store %Callable* %op1, %Callable** %37
  store %Qubit* %target, %Qubit** %38
  call void @Microsoft__Quantum__Canon___64296e0a5b7546ff9012499eddaeb34d_ApplyWithCA__ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %35)
  call void @__quantum__rt__callable_unreference(%Callable* %op1)
  call void @__quantum__rt__callable_unreference(%Callable* %39)
  call void @__quantum__rt__callable_unreference(%Callable* %op1)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %40 = load i2, i2* @PauliY
  %41 = icmp eq i2 %pauli, %40
  br i1 %41, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %44 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 0
  %45 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 1
  %46 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 2
  %47 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 3
  %48 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 4
  %49 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  %50 = load i2, i2* @PauliX
  call void @__quantum__rt__array_reference(%Array* %6)
  call void @__quantum__rt__tuple_reference(%Tuple* %7)
  store %Callable* %49, %Callable** %44
  store double %tolerance, double* %45
  store %Array* %coefficients, %Array** %46
  store i2 %50, i2* %47
  store { %Array* }* %control, { %Array* }** %48
  %op2 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__3.29, %Tuple* %42)
  %51 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %52 = bitcast %Tuple* %51 to { %Callable*, %Callable*, %Qubit* }*
  %53 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i64 0, i32 0
  %54 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i64 0, i32 1
  %55 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i64 0, i32 2
  %56 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %56)
  call void @__quantum__rt__callable_reference(%Callable* %op2)
  store %Callable* %56, %Callable** %53
  store %Callable* %op2, %Callable** %54
  store %Qubit* %target, %Qubit** %55
  call void @Microsoft__Quantum__Canon___64296e0a5b7546ff9012499eddaeb34d_ApplyWithCA__ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %52)
  call void @__quantum__rt__callable_unreference(%Callable* %op2)
  call void @__quantum__rt__callable_unreference(%Callable* %56)
  call void @__quantum__rt__callable_unreference(%Callable* %op2)
  call void @__quantum__rt__tuple_unreference(%Tuple* %51)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %57 = load i2, i2* @PauliI
  %58 = icmp eq i2 %pauli, %57
  br i1 %58, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  %59 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %60 = bitcast %Tuple* %59 to { double, %Array*, { %Array* }* }*
  %61 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i64 0, i32 0
  %62 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i64 0, i32 1
  %63 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  call void @__quantum__rt__array_reference(%Array* %6)
  call void @__quantum__rt__tuple_reference(%Tuple* %7)
  store double %tolerance, double* %61
  store %Array* %coefficients, %Array** %62
  store { %Array* }* %control, { %Array* }** %63
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %60)
  call void @__quantum__rt__array_unreference(%Array* %coefficients)
  call void @__quantum__rt__array_unreference(%Array* %6)
  call void @__quantum__rt__tuple_unreference(%Tuple* %7)
  call void @__quantum__rt__tuple_unreference(%Tuple* %59)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %64 = call %String* @__quantum__rt__string_create(i32 37, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @18, i32 0, i32 0))
  %65 = call %String* @__quantum__rt__pauli_to_string(i2 %pauli)
  %66 = call %String* @__quantum__rt__string_concatenate(%String* %64, %String* %65)
  call void @__quantum__rt__string_unreference(%String* %64)
  call void @__quantum__rt__string_unreference(%String* %65)
  %67 = call %String* @__quantum__rt__string_create(i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @19, i32 0, i32 0))
  %68 = call %String* @__quantum__rt__string_concatenate(%String* %66, %String* %67)
  call void @__quantum__rt__string_unreference(%String* %66)
  call void @__quantum__rt__string_unreference(%String* %67)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %6)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %7)
  call void @__quantum__rt__fail(%String* %68)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %6)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %7)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 1
  %disentangling = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %disentangling)
  %3 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 2
  %axis = load i2, i2* %3
  %4 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 3
  %5 = load { %Range, i64 }*, { %Range, i64 }** %4
  %6 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 4
  %register = load %Array*, %Array** %6
  call void @__quantum__rt__array_add_access(%Array* %register)
  %7 = getelementptr { %Range, i64 }, { %Range, i64 }* %5, i64 0, i32 0
  %rngControl = load %Range, %Range* %7
  %8 = getelementptr { %Range, i64 }, { %Range, i64 }* %5, i64 0, i32 1
  %idxTarget = load i64, i64* %8
  %9 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %rngControl, i1 false)
  %__qsVar0__actualControl__ = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %9)
  %10 = getelementptr { %Array* }, { %Array* }* %__qsVar0__actualControl__, i64 0, i32 0
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %11)
  %12 = bitcast { %Array* }* %__qsVar0__actualControl__ to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %15 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 0
  %16 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 1
  %17 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 2
  %18 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 3
  %19 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i64 0, i32 4
  call void @__quantum__rt__array_reference(%Array* %disentangling)
  call void @__quantum__rt__array_reference(%Array* %11)
  call void @__quantum__rt__tuple_reference(%Tuple* %12)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %21 = bitcast i8* %20 to %Qubit**
  %22 = load %Qubit*, %Qubit** %21
  store double %tolerance, double* %15
  store %Array* %disentangling, %Array** %16
  store i2 %axis, i2* %17
  store { %Array* }* %__qsVar0__actualControl__, { %Array* }** %18
  store %Qubit* %22, %Qubit** %19
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %disentangling)
  call void @__quantum__rt__array_remove_access(%Array* %register)
  call void @__quantum__rt__array_remove_access(%Array* %11)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %12)
  call void @__quantum__rt__array_unreference(%Array* %9)
  call void @__quantum__rt__array_unreference(%Array* %11)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__array_unreference(%Array* %disentangling)
  call void @__quantum__rt__array_unreference(%Array* %11)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__tuple_unreference(%Tuple* %13)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %3 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %pauli = load i2, i2* %3
  %4 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %control = load { %Array* }*, { %Array* }** %4
  %5 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %6)
  %7 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  %8 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 4
  %target = load %Qubit*, %Qubit** %8
  %9 = load i2, i2* @PauliZ
  %10 = icmp eq i2 %pauli, %9
  br i1 %10, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, double, %Array*, { %Array* }* }*
  %13 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 0
  %14 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 1
  %15 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 2
  %16 = getelementptr { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i64 0, i32 3
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  call void @__quantum__rt__array_reference(%Array* %6)
  call void @__quantum__rt__tuple_reference(%Tuple* %7)
  store %Callable* %17, %Callable** %13
  store double %tolerance, double* %14
  store %Array* %coefficients, %Array** %15
  store { %Array* }* %control, { %Array* }** %16
  %__qsVar0__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.30, %Tuple* %11)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %20 = bitcast %Tuple* %19 to { %Array*, %Qubit* }*
  %21 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %20, i64 0, i32 0
  %22 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %20, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  store %Array* %__controlQubits__, %Array** %21
  store %Qubit* %target, %Qubit** %22
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %__qsVar0__op__)
  call void @__quantum__rt__callable_unreference(%Callable* %18)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__tuple_unreference(%Tuple* %19)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %23 = load i2, i2* @PauliX
  %24 = icmp eq i2 %pauli, %23
  br i1 %24, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %27 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 0
  %28 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 1
  %29 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 2
  %30 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 3
  %31 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i64 0, i32 4
  %32 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  %33 = load i2, i2* @PauliZ
  call void @__quantum__rt__array_reference(%Array* %6)
  call void @__quantum__rt__tuple_reference(%Tuple* %7)
  store %Callable* %32, %Callable** %27
  store double %tolerance, double* %28
  store %Array* %coefficients, %Array** %29
  store i2 %33, i2* %30
  store { %Array* }* %control, { %Array* }** %31
  %__qsVar1__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__2.31, %Tuple* %25)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %35 = bitcast %Tuple* %34 to { %Callable*, %Callable*, %Qubit* }*
  %36 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i64 0, i32 0
  %37 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i64 0, i32 1
  %38 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i64 0, i32 2
  %39 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H, %Tuple* null)
  call void @__quantum__rt__callable_reference(%Callable* %__qsVar1__op__)
  store %Callable* %39, %Callable** %36
  store %Callable* %__qsVar1__op__, %Callable** %37
  store %Qubit* %target, %Qubit** %38
  call void @Microsoft__Quantum__Canon___64296e0a5b7546ff9012499eddaeb34d_ApplyWithCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %35)
  call void @__quantum__rt__callable_unreference(%Callable* %__qsVar1__op__)
  call void @__quantum__rt__callable_unreference(%Callable* %39)
  call void @__quantum__rt__callable_unreference(%Callable* %__qsVar1__op__)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %40 = load i2, i2* @PauliY
  %41 = icmp eq i2 %pauli, %40
  br i1 %41, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %44 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 0
  %45 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 1
  %46 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 2
  %47 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 3
  %48 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i64 0, i32 4
  %49 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  %50 = load i2, i2* @PauliX
  call void @__quantum__rt__array_reference(%Array* %6)
  call void @__quantum__rt__tuple_reference(%Tuple* %7)
  store %Callable* %49, %Callable** %44
  store double %tolerance, double* %45
  store %Array* %coefficients, %Array** %46
  store i2 %50, i2* %47
  store { %Array* }* %control, { %Array* }** %48
  %__qsVar2__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__3.32, %Tuple* %42)
  %51 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %52 = bitcast %Tuple* %51 to { %Callable*, %Callable*, %Qubit* }*
  %53 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i64 0, i32 0
  %54 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i64 0, i32 1
  %55 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i64 0, i32 2
  %56 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %56)
  call void @__quantum__rt__callable_reference(%Callable* %__qsVar2__op__)
  store %Callable* %56, %Callable** %53
  store %Callable* %__qsVar2__op__, %Callable** %54
  store %Qubit* %target, %Qubit** %55
  call void @Microsoft__Quantum__Canon___64296e0a5b7546ff9012499eddaeb34d_ApplyWithCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %52)
  call void @__quantum__rt__callable_unreference(%Callable* %__qsVar2__op__)
  call void @__quantum__rt__callable_unreference(%Callable* %56)
  call void @__quantum__rt__callable_unreference(%Callable* %__qsVar2__op__)
  call void @__quantum__rt__tuple_unreference(%Tuple* %51)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %57 = load i2, i2* @PauliI
  %58 = icmp eq i2 %pauli, %57
  br i1 %58, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  %59 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %60 = bitcast %Tuple* %59 to { double, %Array*, { %Array* }* }*
  %61 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i64 0, i32 0
  %62 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i64 0, i32 1
  %63 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  call void @__quantum__rt__array_reference(%Array* %6)
  call void @__quantum__rt__tuple_reference(%Tuple* %7)
  store double %tolerance, double* %61
  store %Array* %coefficients, %Array** %62
  store { %Array* }* %control, { %Array* }** %63
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %60)
  call void @__quantum__rt__array_unreference(%Array* %coefficients)
  call void @__quantum__rt__array_unreference(%Array* %6)
  call void @__quantum__rt__tuple_unreference(%Tuple* %7)
  call void @__quantum__rt__tuple_unreference(%Tuple* %59)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %64 = call %String* @__quantum__rt__string_create(i32 37, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @20, i32 0, i32 0))
  %65 = call %String* @__quantum__rt__pauli_to_string(i2 %pauli)
  %66 = call %String* @__quantum__rt__string_concatenate(%String* %64, %String* %65)
  call void @__quantum__rt__string_unreference(%String* %64)
  call void @__quantum__rt__string_unreference(%String* %65)
  %67 = call %String* @__quantum__rt__string_create(i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @21, i32 0, i32 0))
  %68 = call %String* @__quantum__rt__string_concatenate(%String* %66, %String* %67)
  call void @__quantum__rt__string_unreference(%String* %66)
  call void @__quantum__rt__string_unreference(%String* %67)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %6)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %7)
  call void @__quantum__rt__fail(%String* %68)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %6)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %7)
  ret void
}

define %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %nQubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %9 = trunc i64 %nQubits to i32
  %10 = call i64 @__quantum__rt__int_power(i64 -2, i32 %9)
  %11 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double 0.000000e+00, double 0.000000e+00)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___8a7504a8af96425bad591eeef314a38e_Padded__body(i64 %10, { double, double }* %11, %Array* %coefficients)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %13 = sub i64 %12, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %20, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %14)
  %17 = bitcast i8* %16 to { double, double }**
  %18 = load { double, double }*, { double, double }** %17
  %19 = bitcast { double, double }* %18 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %19)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %coefficientsPadded)
  %21 = icmp sgt i64 %nQubits, 1
  %22 = sub i64 %nQubits, 1
  %23 = load %Range, %Range* @EmptyRange
  %24 = insertvalue %Range %23, i64 1, 0
  %25 = insertvalue %Range %24, i64 1, 1
  %26 = insertvalue %Range %25, i64 %22, 2
  %27 = load %Range, %Range* @EmptyRange
  %28 = insertvalue %Range %27, i64 1, 0
  %29 = insertvalue %Range %28, i64 1, 1
  %30 = insertvalue %Range %29, i64 0, 2
  %rngControl = select i1 %21, %Range %26, %Range %30
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { %Range, i64 }*
  %33 = getelementptr { %Range, i64 }, { %Range, i64 }* %32, i64 0, i32 0
  %34 = getelementptr { %Range, i64 }, { %Range, i64 }* %32, i64 0, i32 1
  store %Range %rngControl, %Range* %33
  store i64 0, i64* %34
  %plan = call %Array* @Microsoft__Quantum__Preparation____QsRef0__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %coefficientsPadded, { %Range, i64 }* %32)
  call void @__quantum__rt__array_add_access(%Array* %plan)
  %unprepare = call %Callable* @Microsoft__Quantum__Canon___81ec7e8f95834cfcb64fd39e9c4f9368_BoundCA__body(%Array* %plan)
  %35 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %36 = bitcast %Tuple* %35 to { %Callable*, %Callable* }*
  %37 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %36, i64 0, i32 0
  %38 = getelementptr { %Callable*, %Callable* }, { %Callable*, %Callable* }* %36, i64 0, i32 1
  %39 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian__, %Tuple* null)
  %40 = call %Callable* @__quantum__rt__callable_copy(%Callable* %unprepare, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %40)
  store %Callable* %39, %Callable** %37
  store %Callable* %40, %Callable** %38
  %41 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.6, %Tuple* %35)
  %42 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %43 = phi i64 [ 0, %exit__2 ], [ %49, %exiting__3 ]
  %44 = icmp sle i64 %43, %42
  br i1 %44, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %43)
  %46 = bitcast i8* %45 to { double, double }**
  %47 = load { double, double }*, { double, double }** %46
  %48 = bitcast { double, double }* %47 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %48)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %49 = add i64 %43, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  %50 = sub i64 %12, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %51 = phi i64 [ 0, %exit__3 ], [ %57, %exiting__4 ]
  %52 = icmp sle i64 %51, %50
  br i1 %52, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %51)
  %54 = bitcast i8* %53 to { double, double }**
  %55 = load { double, double }*, { double, double }** %54
  %56 = bitcast { double, double }* %55 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %56)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %57 = add i64 %51, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_remove_access(%Array* %coefficientsPadded)
  call void @__quantum__rt__array_remove_access(%Array* %plan)
  %58 = bitcast { double, double }* %11 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %58)
  %59 = sub i64 %12, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %60 = phi i64 [ 0, %exit__4 ], [ %66, %exiting__5 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %60)
  %63 = bitcast i8* %62 to { double, double }**
  %64 = load { double, double }*, { double, double }** %63
  %65 = bitcast { double, double }* %64 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %65)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %66 = add i64 %60, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %coefficientsPadded)
  call void @__quantum__rt__tuple_unreference(%Tuple* %31)
  %67 = call i64 @__quantum__rt__array_get_size_1d(%Array* %plan)
  %68 = sub i64 %67, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %69 = phi i64 [ 0, %exit__5 ], [ %74, %exiting__6 ]
  %70 = icmp sle i64 %69, %68
  br i1 %70, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %69)
  %72 = bitcast i8* %71 to %Callable**
  %73 = load %Callable*, %Callable** %72
  call void @__quantum__rt__callable_unreference(%Callable* %73)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %74 = add i64 %69, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_unreference(%Array* %plan)
  call void @__quantum__rt__callable_unreference(%Callable* %unprepare)
  ret %Callable* %41
}

define %Array* @Microsoft__Quantum__Preparation____QsRef0__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %coefficients, { %Range, i64 }* %0) {
entry:
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %2 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %3)
  %6 = bitcast i8* %5 to { double, double }**
  %7 = load { double, double }*, { double, double }** %6
  %8 = bitcast { double, double }* %7 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %8)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %10 = getelementptr { %Range, i64 }, { %Range, i64 }* %0, i64 0, i32 0
  %rngControl = load %Range, %Range* %10
  %11 = getelementptr { %Range, i64 }, { %Range, i64 }* %0, i64 0, i32 1
  %idxTarget = load i64, i64* %11
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %plan = alloca %Array*
  store %Array* %12, %Array** %plan
  call void @__quantum__rt__array_add_access(%Array* %12)
  %13 = call { %Array*, %Array*, %Array* }* @Microsoft__Quantum__Preparation____QsRef0__StatePreparationSBMComputeCoefficients____body(%Array* %coefficients)
  %14 = getelementptr { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i64 0, i32 0
  %disentanglingY = load %Array*, %Array** %14
  call void @__quantum__rt__array_add_access(%Array* %disentanglingY)
  %15 = getelementptr { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i64 0, i32 1
  %disentanglingZ = load %Array*, %Array** %15
  call void @__quantum__rt__array_add_access(%Array* %disentanglingZ)
  %16 = getelementptr { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i64 0, i32 2
  %newCoefficients = load %Array*, %Array** %16
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %newCoefficients)
  %18 = sub i64 %17, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %19)
  %22 = bitcast i8* %21 to { double, double }**
  %23 = load { double, double }*, { double, double }** %22
  %24 = bitcast { double, double }* %23 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %24)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %newCoefficients)
  %26 = call i1 @Microsoft__Quantum__Canon____QsRef0__AnyOutsideToleranceD____body(double %tolerance, %Array* %disentanglingZ)
  br i1 %26, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__2
  %27 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 0)
  %29 = bitcast i8* %28 to %Callable**
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, %Range, i64 }* getelementptr ({ %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %32 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i64 0, i32 0
  %33 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i64 0, i32 1
  %34 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i64 0, i32 2
  %35 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i64 0, i32 3
  %36 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i64 0, i32 4
  %37 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i64 0, i32 5
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep__, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %disentanglingZ)
  %39 = load i2, i2* @PauliZ
  store %Callable* %38, %Callable** %32
  store double %tolerance, double* %33
  store %Array* %disentanglingZ, %Array** %34
  store i2 %39, i2* %35
  store %Range %rngControl, %Range* %36
  store i64 %idxTarget, i64* %37
  %40 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.5, %Tuple* %30)
  store %Callable* %40, %Callable** %29
  %41 = call %Array* @__quantum__rt__array_concatenate(%Array* %12, %Array* %27)
  call void @__quantum__rt__array_remove_access(%Array* %12)
  store %Array* %41, %Array** %plan
  call void @__quantum__rt__array_add_access(%Array* %41)
  br label %header__3

continue__1:                                      ; preds = %exit__4, %exit__2
  %42 = call i1 @Microsoft__Quantum__Canon____QsRef0__AnyOutsideToleranceD____body(double %tolerance, %Array* %disentanglingY)
  br i1 %42, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %43 = load %Array*, %Array** %plan
  %44 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 0)
  %46 = bitcast i8* %45 to %Callable**
  %47 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, %Range, i64 }* getelementptr ({ %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* null, i32 1) to i64))
  %48 = bitcast %Tuple* %47 to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %49 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %48, i64 0, i32 0
  %50 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %48, i64 0, i32 1
  %51 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %48, i64 0, i32 2
  %52 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %48, i64 0, i32 3
  %53 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %48, i64 0, i32 4
  %54 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %48, i64 0, i32 5
  %55 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep__, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %disentanglingY)
  %56 = load i2, i2* @PauliY
  store %Callable* %55, %Callable** %49
  store double %tolerance, double* %50
  store %Array* %disentanglingY, %Array** %51
  store i2 %56, i2* %52
  store %Range %rngControl, %Range* %53
  store i64 %idxTarget, i64* %54
  %57 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__2, %Tuple* %47)
  store %Callable* %57, %Callable** %46
  %58 = call %Array* @__quantum__rt__array_concatenate(%Array* %43, %Array* %44)
  call void @__quantum__rt__array_remove_access(%Array* %43)
  store %Array* %58, %Array** %plan
  call void @__quantum__rt__array_add_access(%Array* %58)
  br label %header__5

continue__2:                                      ; preds = %exit__6, %continue__1
  %59 = call i1 @Microsoft__Quantum__Canon__IsRangeEmpty__body(%Range %rngControl)
  br i1 %59, label %then0__3, label %test1__1

then0__3:                                         ; preds = %continue__2
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 0)
  %61 = bitcast i8* %60 to { double, double }**
  %62 = load { double, double }*, { double, double }** %61
  %63 = getelementptr { double, double }, { double, double }* %62, i64 0, i32 0
  %abs = load double, double* %63
  %64 = getelementptr { double, double }, { double, double }* %62, i64 0, i32 1
  %arg = load double, double* %64
  %65 = call double @__quantum__qis__absd__body(double %arg)
  %66 = fcmp ogt double %65, %tolerance
  br i1 %66, label %then0__4, label %continue__4

then0__4:                                         ; preds = %then0__3
  %67 = load %Array*, %Array** %plan
  %68 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 0)
  %70 = bitcast i8* %69 to %Callable**
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, i64 }* getelementptr ({ %Callable*, double, i64 }, { %Callable*, double, i64 }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { %Callable*, double, i64 }*
  %73 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %72, i64 0, i32 0
  %74 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %72, i64 0, i32 1
  %75 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %72, i64 0, i32 2
  %76 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep__, %Tuple* null)
  %77 = fmul double -1.000000e+00, %arg
  store %Callable* %76, %Callable** %73
  store double %77, double* %74
  store i64 %idxTarget, i64* %75
  %78 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__3, %Tuple* %71)
  store %Callable* %78, %Callable** %70
  %79 = call %Array* @__quantum__rt__array_concatenate(%Array* %67, %Array* %68)
  call void @__quantum__rt__array_remove_access(%Array* %67)
  store %Array* %79, %Array** %plan
  call void @__quantum__rt__array_add_access(%Array* %79)
  br label %header__7

continue__4:                                      ; preds = %exit__8, %then0__3
  br label %continue__3

test1__1:                                         ; preds = %continue__2
  %80 = call i1 @Microsoft__Quantum__Canon____QsRef0__AnyOutsideToleranceCP____body(double %tolerance, %Array* %newCoefficients)
  br i1 %80, label %then1__1, label %continue__3

then1__1:                                         ; preds = %test1__1
  %81 = extractvalue %Range %rngControl, 0
  %82 = add i64 %81, 1
  %83 = extractvalue %Range %rngControl, 1
  %84 = call i64 @__quantum__qis__rangeend__body(%Range %rngControl)
  %85 = load %Range, %Range* @EmptyRange
  %86 = insertvalue %Range %85, i64 %82, 0
  %87 = insertvalue %Range %86, i64 %83, 1
  %newControl = insertvalue %Range %87, i64 %84, 2
  %newTarget = extractvalue %Range %rngControl, 0
  %88 = load %Array*, %Array** %plan
  %89 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %90 = bitcast %Tuple* %89 to { %Range, i64 }*
  %91 = getelementptr { %Range, i64 }, { %Range, i64 }* %90, i64 0, i32 0
  %92 = getelementptr { %Range, i64 }, { %Range, i64 }* %90, i64 0, i32 1
  store %Range %newControl, %Range* %91
  store i64 %newTarget, i64* %92
  %93 = call %Array* @Microsoft__Quantum__Preparation____QsRef0__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %newCoefficients, { %Range, i64 }* %90)
  %94 = call %Array* @__quantum__rt__array_concatenate(%Array* %88, %Array* %93)
  call void @__quantum__rt__array_remove_access(%Array* %88)
  store %Array* %94, %Array** %plan
  call void @__quantum__rt__array_add_access(%Array* %94)
  call void @__quantum__rt__tuple_unreference(%Tuple* %89)
  %95 = call i64 @__quantum__rt__array_get_size_1d(%Array* %93)
  %96 = sub i64 %95, 1
  br label %header__9

continue__3:                                      ; preds = %exit__10, %test1__1, %continue__4
  %97 = load %Array*, %Array** %plan
  %98 = call i64 @__quantum__rt__array_get_size_1d(%Array* %97)
  %99 = sub i64 %98, 1
  br label %header__11

header__3:                                        ; preds = %exiting__3, %then0__1
  %100 = phi i64 [ 0, %then0__1 ], [ %105, %exiting__3 ]
  %101 = icmp sle i64 %100, 0
  br i1 %101, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %100)
  %103 = bitcast i8* %102 to %Callable**
  %104 = load %Callable*, %Callable** %103
  call void @__quantum__rt__callable_unreference(%Callable* %104)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %105 = add i64 %100, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_unreference(%Array* %27)
  %106 = call i64 @__quantum__rt__array_get_size_1d(%Array* %41)
  %107 = sub i64 %106, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %108 = phi i64 [ 0, %exit__3 ], [ %113, %exiting__4 ]
  %109 = icmp sle i64 %108, %107
  br i1 %109, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %108)
  %111 = bitcast i8* %110 to %Callable**
  %112 = load %Callable*, %Callable** %111
  call void @__quantum__rt__callable_unreference(%Callable* %112)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %113 = add i64 %108, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %41)
  br label %continue__1

header__5:                                        ; preds = %exiting__5, %then0__2
  %114 = phi i64 [ 0, %then0__2 ], [ %119, %exiting__5 ]
  %115 = icmp sle i64 %114, 0
  br i1 %115, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %116 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %114)
  %117 = bitcast i8* %116 to %Callable**
  %118 = load %Callable*, %Callable** %117
  call void @__quantum__rt__callable_unreference(%Callable* %118)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %119 = add i64 %114, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %44)
  %120 = call i64 @__quantum__rt__array_get_size_1d(%Array* %58)
  %121 = sub i64 %120, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %122 = phi i64 [ 0, %exit__5 ], [ %127, %exiting__6 ]
  %123 = icmp sle i64 %122, %121
  br i1 %123, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %58, i64 %122)
  %125 = bitcast i8* %124 to %Callable**
  %126 = load %Callable*, %Callable** %125
  call void @__quantum__rt__callable_unreference(%Callable* %126)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %127 = add i64 %122, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_unreference(%Array* %58)
  br label %continue__2

header__7:                                        ; preds = %exiting__7, %then0__4
  %128 = phi i64 [ 0, %then0__4 ], [ %133, %exiting__7 ]
  %129 = icmp sle i64 %128, 0
  br i1 %129, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %130 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 %128)
  %131 = bitcast i8* %130 to %Callable**
  %132 = load %Callable*, %Callable** %131
  call void @__quantum__rt__callable_unreference(%Callable* %132)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %133 = add i64 %128, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_unreference(%Array* %68)
  %134 = call i64 @__quantum__rt__array_get_size_1d(%Array* %79)
  %135 = sub i64 %134, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %136 = phi i64 [ 0, %exit__7 ], [ %141, %exiting__8 ]
  %137 = icmp sle i64 %136, %135
  br i1 %137, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %138 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %79, i64 %136)
  %139 = bitcast i8* %138 to %Callable**
  %140 = load %Callable*, %Callable** %139
  call void @__quantum__rt__callable_unreference(%Callable* %140)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %141 = add i64 %136, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_unreference(%Array* %79)
  br label %continue__4

header__9:                                        ; preds = %exiting__9, %then1__1
  %142 = phi i64 [ 0, %then1__1 ], [ %147, %exiting__9 ]
  %143 = icmp sle i64 %142, %96
  br i1 %143, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %144 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %93, i64 %142)
  %145 = bitcast i8* %144 to %Callable**
  %146 = load %Callable*, %Callable** %145
  call void @__quantum__rt__callable_unreference(%Callable* %146)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %147 = add i64 %142, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_unreference(%Array* %93)
  %148 = call i64 @__quantum__rt__array_get_size_1d(%Array* %94)
  %149 = sub i64 %148, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %150 = phi i64 [ 0, %exit__9 ], [ %155, %exiting__10 ]
  %151 = icmp sle i64 %150, %149
  br i1 %151, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %152 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 %150)
  %153 = bitcast i8* %152 to %Callable**
  %154 = load %Callable*, %Callable** %153
  call void @__quantum__rt__callable_unreference(%Callable* %154)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %155 = add i64 %150, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_unreference(%Array* %94)
  br label %continue__3

header__11:                                       ; preds = %exiting__11, %continue__3
  %156 = phi i64 [ 0, %continue__3 ], [ %161, %exiting__11 ]
  %157 = icmp sle i64 %156, %99
  br i1 %157, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %158 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %97, i64 %156)
  %159 = bitcast i8* %158 to %Callable**
  %160 = load %Callable*, %Callable** %159
  call void @__quantum__rt__callable_reference(%Callable* %160)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %161 = add i64 %156, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_reference(%Array* %97)
  %162 = sub i64 %1, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %163 = phi i64 [ 0, %exit__11 ], [ %169, %exiting__12 ]
  %164 = icmp sle i64 %163, %162
  br i1 %164, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %165 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %163)
  %166 = bitcast i8* %165 to { double, double }**
  %167 = load { double, double }*, { double, double }** %166
  %168 = bitcast { double, double }* %167 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %168)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %169 = add i64 %163, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %97)
  call void @__quantum__rt__array_remove_access(%Array* %disentanglingY)
  call void @__quantum__rt__array_remove_access(%Array* %disentanglingZ)
  %170 = sub i64 %17, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %171 = phi i64 [ 0, %exit__12 ], [ %177, %exiting__13 ]
  %172 = icmp sle i64 %171, %170
  br i1 %172, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %171)
  %174 = bitcast i8* %173 to { double, double }**
  %175 = load { double, double }*, { double, double }** %174
  %176 = bitcast { double, double }* %175 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %176)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %177 = add i64 %171, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_remove_access(%Array* %newCoefficients)
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %178 = phi i64 [ 0, %exit__13 ], [ %183, %exiting__14 ]
  %179 = icmp sle i64 %178, -1
  br i1 %179, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %180 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 %178)
  %181 = bitcast i8* %180 to %Callable**
  %182 = load %Callable*, %Callable** %181
  call void @__quantum__rt__callable_unreference(%Callable* %182)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %183 = add i64 %178, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_unreference(%Array* %12)
  call void @__quantum__rt__array_unreference(%Array* %disentanglingY)
  call void @__quantum__rt__array_unreference(%Array* %disentanglingZ)
  %184 = sub i64 %17, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %185 = phi i64 [ 0, %exit__14 ], [ %191, %exiting__15 ]
  %186 = icmp sle i64 %185, %184
  br i1 %186, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %187 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %185)
  %188 = bitcast i8* %187 to { double, double }**
  %189 = load { double, double }*, { double, double }** %188
  %190 = bitcast { double, double }* %189 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %190)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %191 = add i64 %185, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_unreference(%Array* %newCoefficients)
  %192 = bitcast { %Array*, %Array*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %192)
  ret %Array* %97
}

define i1 @Microsoft__Quantum__Canon____QsRef0__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to double*
  %coefficient = load double, double* %5
  %6 = call double @__quantum__qis__absd__body(double %coefficient)
  %7 = fcmp oge double %6, %tolerance
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  ret i1 true

continue__1:                                      ; preds = %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  ret i1 false
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %1 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 3
  %5 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 4
  %6 = load double, double* %1
  %7 = load %Array*, %Array** %2
  %8 = load i2, i2* %3
  %9 = load { %Range, i64 }*, { %Range, i64 }** %4
  %10 = load %Array*, %Array** %5
  call void @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____body(double %6, %Array* %7, i2 %8, { %Range, i64 }* %9, %Array* %10)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %1 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 3
  %5 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i64 0, i32 4
  %6 = load double, double* %1
  %7 = load %Array*, %Array** %2
  %8 = load i2, i2* %3
  %9 = load { %Range, i64 }*, { %Range, i64 }** %4
  %10 = load %Array*, %Array** %5
  call void @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____adj(double %6, %Array* %7, i2 %8, { %Range, i64 }* %9, %Array* %10)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %1 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array*, i2, { %Range, i64 }*, %Array* }*, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____ctl(%Array* %3, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %1 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array*, i2, { %Range, i64 }*, %Array* }*, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef0__ApplyMultiplexStep____ctladj(%Array* %3, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %4)
  ret void
}

declare %Array* @__quantum__rt__array_concatenate(%Array*, %Array*)

define void @Lifted__PartialApplication__2__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 4
  %8 = load %Range, %Range* %7
  %9 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 5
  %10 = load i64, i64* %9
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr { %Range, i64 }, { %Range, i64 }* %12, i64 0, i32 0
  %14 = getelementptr { %Range, i64 }, { %Range, i64 }* %12, i64 0, i32 1
  store %Range %8, %Range* %13
  store i64 %10, i64* %14
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr { %Array* }, { %Array* }* %15, i64 0, i32 0
  %17 = load %Array*, %Array** %16
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 0
  %21 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 1
  %22 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 2
  %23 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 3
  %24 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 4
  store double %2, double* %20
  store %Array* %4, %Array** %21
  call void @__quantum__rt__array_reference(%Array* %4)
  store i2 %6, i2* %22
  store { %Range, i64 }* %12, { %Range, i64 }** %23
  call void @__quantum__rt__tuple_reference(%Tuple* %11)
  store %Array* %17, %Array** %24
  call void @__quantum__rt__array_reference(%Array* %17)
  %25 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_unreference(%Tuple* %11)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %11)
  call void @__quantum__rt__array_unreference(%Array* %17)
  call void @__quantum__rt__tuple_unreference(%Tuple* %18)
  ret void

entry1:                                           ; No predecessors!
  %27 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %28 = getelementptr { %Callable*, double }, { %Callable*, double }* %27, i64 0, i32 1
  %29 = load double, double* %28
  %30 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %31 = getelementptr { %Array* }, { %Array* }* %30, i64 0, i32 0
  %32 = load %Array*, %Array** %31
  %33 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %34 = bitcast %Tuple* %33 to { double, %Array* }*
  %35 = getelementptr { double, %Array* }, { double, %Array* }* %34, i64 0, i32 0
  %36 = getelementptr { double, %Array* }, { double, %Array* }* %34, i64 0, i32 1
  store double %29, double* %35
  store %Array* %32, %Array** %36
  call void @__quantum__rt__array_reference(%Array* %32)
  %37 = getelementptr { %Callable*, double }, { %Callable*, double }* %27, i64 0, i32 0
  %38 = load %Callable*, %Callable** %37
  call void @__quantum__rt__callable_invoke(%Callable* %38, %Tuple* %33, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %32)
  call void @__quantum__rt__tuple_unreference(%Tuple* %33)
  ret void

entry2:                                           ; No predecessors!
  %39 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %40 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %39, i64 0, i32 1
  %41 = load i64, i64* %40
  %42 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %39, i64 0, i32 2
  %43 = load %Callable*, %Callable** %42
  %44 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %45 = bitcast %Tuple* %44 to { i64, %Callable* }*
  %46 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %45, i64 0, i32 0
  %47 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %45, i64 0, i32 1
  store i64 %41, i64* %46
  store %Callable* %43, %Callable** %47
  call void @__quantum__rt__callable_reference(%Callable* %43)
  %48 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %49 = getelementptr { double, %Array* }, { double, %Array* }* %48, i64 0, i32 0
  %50 = load double, double* %49
  %51 = getelementptr { double, %Array* }, { double, %Array* }* %48, i64 0, i32 1
  %52 = load %Array*, %Array** %51
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { { i64, %Callable* }*, double, %Array* }*
  %55 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %54, i64 0, i32 0
  %56 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %54, i64 0, i32 1
  %57 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %54, i64 0, i32 2
  store { i64, %Callable* }* %45, { i64, %Callable* }** %55
  call void @__quantum__rt__callable_reference(%Callable* %43)
  call void @__quantum__rt__tuple_reference(%Tuple* %44)
  store double %50, double* %56
  store %Array* %52, %Array** %57
  call void @__quantum__rt__array_reference(%Array* %52)
  %58 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %39, i64 0, i32 0
  %59 = load %Callable*, %Callable** %58
  call void @__quantum__rt__callable_invoke(%Callable* %59, %Tuple* %53, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %43)
  call void @__quantum__rt__tuple_unreference(%Tuple* %44)
  call void @__quantum__rt__callable_unreference(%Callable* %43)
  call void @__quantum__rt__tuple_unreference(%Tuple* %44)
  call void @__quantum__rt__array_unreference(%Array* %52)
  call void @__quantum__rt__tuple_unreference(%Tuple* %53)
  ret void

entry3:                                           ; No predecessors!
  %60 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %61 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 1
  %62 = load double, double* %61
  %63 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 2
  %64 = load %Array*, %Array** %63
  %65 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 3
  %66 = load i2, i2* %65
  %67 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 4
  %68 = load { %Array* }*, { %Array* }** %67
  %69 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %70 = getelementptr { %Qubit* }, { %Qubit* }* %69, i64 0, i32 0
  %71 = load %Qubit*, %Qubit** %70
  %72 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %73 = bitcast %Tuple* %72 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %74 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %73, i64 0, i32 0
  %75 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %73, i64 0, i32 1
  %76 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %73, i64 0, i32 2
  %77 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %73, i64 0, i32 3
  %78 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %73, i64 0, i32 4
  store double %62, double* %74
  store %Array* %64, %Array** %75
  call void @__quantum__rt__array_reference(%Array* %64)
  store i2 %66, i2* %76
  store { %Array* }* %68, { %Array* }** %77
  %79 = getelementptr { %Array* }, { %Array* }* %68, i64 0, i32 0
  %80 = load %Array*, %Array** %79
  call void @__quantum__rt__array_reference(%Array* %80)
  %81 = bitcast { %Array* }* %68 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %81)
  store %Qubit* %71, %Qubit** %78
  %82 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 0
  %83 = load %Callable*, %Callable** %82
  call void @__quantum__rt__callable_invoke(%Callable* %83, %Tuple* %72, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %64)
  call void @__quantum__rt__array_unreference(%Array* %80)
  call void @__quantum__rt__tuple_unreference(%Tuple* %81)
  call void @__quantum__rt__tuple_unreference(%Tuple* %72)
  ret void

entry4:                                           ; No predecessors!
  %84 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %85 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %84, i64 0, i32 1
  %86 = load double, double* %85
  %87 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %84, i64 0, i32 2
  %88 = load %Array*, %Array** %87
  %89 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %84, i64 0, i32 3
  %90 = load i2, i2* %89
  %91 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %84, i64 0, i32 4
  %92 = load { %Array* }*, { %Array* }** %91
  %93 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %94 = getelementptr { %Qubit* }, { %Qubit* }* %93, i64 0, i32 0
  %95 = load %Qubit*, %Qubit** %94
  %96 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %97 = bitcast %Tuple* %96 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %98 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %97, i64 0, i32 0
  %99 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %97, i64 0, i32 1
  %100 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %97, i64 0, i32 2
  %101 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %97, i64 0, i32 3
  %102 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %97, i64 0, i32 4
  store double %86, double* %98
  store %Array* %88, %Array** %99
  call void @__quantum__rt__array_reference(%Array* %88)
  store i2 %90, i2* %100
  store { %Array* }* %92, { %Array* }** %101
  %103 = getelementptr { %Array* }, { %Array* }* %92, i64 0, i32 0
  %104 = load %Array*, %Array** %103
  call void @__quantum__rt__array_reference(%Array* %104)
  %105 = bitcast { %Array* }* %92 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %105)
  store %Qubit* %95, %Qubit** %102
  %106 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %84, i64 0, i32 0
  %107 = load %Callable*, %Callable** %106
  call void @__quantum__rt__callable_invoke(%Callable* %107, %Tuple* %96, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %88)
  call void @__quantum__rt__array_unreference(%Array* %104)
  call void @__quantum__rt__tuple_unreference(%Tuple* %105)
  call void @__quantum__rt__tuple_unreference(%Tuple* %96)
  ret void

entry5:                                           ; No predecessors!
  %108 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %109 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %108, i64 0, i32 1
  %110 = load double, double* %109
  %111 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %108, i64 0, i32 2
  %112 = load %Array*, %Array** %111
  %113 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %108, i64 0, i32 3
  %114 = load i2, i2* %113
  %115 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %108, i64 0, i32 4
  %116 = load { %Array* }*, { %Array* }** %115
  %117 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %118 = getelementptr { %Qubit* }, { %Qubit* }* %117, i64 0, i32 0
  %119 = load %Qubit*, %Qubit** %118
  %120 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %121 = bitcast %Tuple* %120 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %122 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %121, i64 0, i32 0
  %123 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %121, i64 0, i32 1
  %124 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %121, i64 0, i32 2
  %125 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %121, i64 0, i32 3
  %126 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %121, i64 0, i32 4
  store double %110, double* %122
  store %Array* %112, %Array** %123
  call void @__quantum__rt__array_reference(%Array* %112)
  store i2 %114, i2* %124
  store { %Array* }* %116, { %Array* }** %125
  %127 = getelementptr { %Array* }, { %Array* }* %116, i64 0, i32 0
  %128 = load %Array*, %Array** %127
  call void @__quantum__rt__array_reference(%Array* %128)
  %129 = bitcast { %Array* }* %116 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %129)
  store %Qubit* %119, %Qubit** %126
  %130 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %108, i64 0, i32 0
  %131 = load %Callable*, %Callable** %130
  call void @__quantum__rt__callable_invoke(%Callable* %131, %Tuple* %120, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %112)
  call void @__quantum__rt__array_unreference(%Array* %128)
  call void @__quantum__rt__tuple_unreference(%Tuple* %129)
  call void @__quantum__rt__tuple_unreference(%Tuple* %120)
  ret void

entry6:                                           ; No predecessors!
  %132 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %133 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %132, i64 0, i32 1
  %134 = load double, double* %133
  %135 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %132, i64 0, i32 2
  %136 = load %Array*, %Array** %135
  %137 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %132, i64 0, i32 3
  %138 = load i2, i2* %137
  %139 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %132, i64 0, i32 4
  %140 = load { %Array* }*, { %Array* }** %139
  %141 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %142 = getelementptr { %Qubit* }, { %Qubit* }* %141, i64 0, i32 0
  %143 = load %Qubit*, %Qubit** %142
  %144 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %145 = bitcast %Tuple* %144 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %146 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %145, i64 0, i32 0
  %147 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %145, i64 0, i32 1
  %148 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %145, i64 0, i32 2
  %149 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %145, i64 0, i32 3
  %150 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %145, i64 0, i32 4
  store double %134, double* %146
  store %Array* %136, %Array** %147
  call void @__quantum__rt__array_reference(%Array* %136)
  store i2 %138, i2* %148
  store { %Array* }* %140, { %Array* }** %149
  %151 = getelementptr { %Array* }, { %Array* }* %140, i64 0, i32 0
  %152 = load %Array*, %Array** %151
  call void @__quantum__rt__array_reference(%Array* %152)
  %153 = bitcast { %Array* }* %140 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %153)
  store %Qubit* %143, %Qubit** %150
  %154 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %132, i64 0, i32 0
  %155 = load %Callable*, %Callable** %154
  call void @__quantum__rt__callable_invoke(%Callable* %155, %Tuple* %144, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %136)
  call void @__quantum__rt__array_unreference(%Array* %152)
  call void @__quantum__rt__tuple_unreference(%Tuple* %153)
  call void @__quantum__rt__tuple_unreference(%Tuple* %144)
  ret void
}

define void @Lifted__PartialApplication__2__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 2
  %4 = load %Array*, %Array** %3
  %5 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 3
  %6 = load i2, i2* %5
  %7 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 4
  %8 = load %Range, %Range* %7
  %9 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 5
  %10 = load i64, i64* %9
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr { %Range, i64 }, { %Range, i64 }* %12, i64 0, i32 0
  %14 = getelementptr { %Range, i64 }, { %Range, i64 }* %12, i64 0, i32 1
  store %Range %8, %Range* %13
  store i64 %10, i64* %14
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr { %Array* }, { %Array* }* %15, i64 0, i32 0
  %17 = load %Array*, %Array** %16
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 0
  %21 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 1
  %22 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 2
  %23 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 3
  %24 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i64 0, i32 4
  store double %2, double* %20
  store %Array* %4, %Array** %21
  call void @__quantum__rt__array_reference(%Array* %4)
  store i2 %6, i2* %22
  store { %Range, i64 }* %12, { %Range, i64 }** %23
  call void @__quantum__rt__tuple_reference(%Tuple* %11)
  store %Array* %17, %Array** %24
  call void @__quantum__rt__array_reference(%Array* %17)
  %25 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i64 0, i32 0
  %26 = load %Callable*, %Callable** %25
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_unreference(%Tuple* %11)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %11)
  call void @__quantum__rt__array_unreference(%Array* %17)
  call void @__quantum__rt__tuple_unreference(%Tuple* %18)
  call void @__quantum__rt__callable_unreference(%Callable* %27)
  ret void

entry1:                                           ; No predecessors!
  %28 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %29 = getelementptr { %Callable*, double }, { %Callable*, double }* %28, i64 0, i32 1
  %30 = load double, double* %29
  %31 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %32 = getelementptr { %Array* }, { %Array* }* %31, i64 0, i32 0
  %33 = load %Array*, %Array** %32
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { double, %Array* }*
  %36 = getelementptr { double, %Array* }, { double, %Array* }* %35, i64 0, i32 0
  %37 = getelementptr { double, %Array* }, { double, %Array* }* %35, i64 0, i32 1
  store double %30, double* %36
  store %Array* %33, %Array** %37
  call void @__quantum__rt__array_reference(%Array* %33)
  %38 = getelementptr { %Callable*, double }, { %Callable*, double }* %28, i64 0, i32 0
  %39 = load %Callable*, %Callable** %38
  %40 = call %Callable* @__quantum__rt__callable_copy(%Callable* %39, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %40)
  call void @__quantum__rt__callable_invoke(%Callable* %40, %Tuple* %34, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %33)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  call void @__quantum__rt__callable_unreference(%Callable* %40)
  ret void

entry2:                                           ; No predecessors!
  %41 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %42 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %41, i64 0, i32 1
  %43 = load i64, i64* %42
  %44 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %41, i64 0, i32 2
  %45 = load %Callable*, %Callable** %44
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { i64, %Callable* }*
  %48 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %47, i64 0, i32 0
  %49 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %47, i64 0, i32 1
  store i64 %43, i64* %48
  store %Callable* %45, %Callable** %49
  call void @__quantum__rt__callable_reference(%Callable* %45)
  %50 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %51 = getelementptr { double, %Array* }, { double, %Array* }* %50, i64 0, i32 0
  %52 = load double, double* %51
  %53 = getelementptr { double, %Array* }, { double, %Array* }* %50, i64 0, i32 1
  %54 = load %Array*, %Array** %53
  %55 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %56 = bitcast %Tuple* %55 to { { i64, %Callable* }*, double, %Array* }*
  %57 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %56, i64 0, i32 0
  %58 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %56, i64 0, i32 1
  %59 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %56, i64 0, i32 2
  store { i64, %Callable* }* %47, { i64, %Callable* }** %57
  call void @__quantum__rt__callable_reference(%Callable* %45)
  call void @__quantum__rt__tuple_reference(%Tuple* %46)
  store double %52, double* %58
  store %Array* %54, %Array** %59
  call void @__quantum__rt__array_reference(%Array* %54)
  %60 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %41, i64 0, i32 0
  %61 = load %Callable*, %Callable** %60
  %62 = call %Callable* @__quantum__rt__callable_copy(%Callable* %61, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %62)
  call void @__quantum__rt__callable_invoke(%Callable* %62, %Tuple* %55, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %45)
  call void @__quantum__rt__tuple_unreference(%Tuple* %46)
  call void @__quantum__rt__callable_unreference(%Callable* %45)
  call void @__quantum__rt__tuple_unreference(%Tuple* %46)
  call void @__quantum__rt__array_unreference(%Array* %54)
  call void @__quantum__rt__tuple_unreference(%Tuple* %55)
  call void @__quantum__rt__callable_unreference(%Callable* %62)
  ret void

entry3:                                           ; No predecessors!
  %63 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %64 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %63, i64 0, i32 1
  %65 = load double, double* %64
  %66 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %63, i64 0, i32 2
  %67 = load %Array*, %Array** %66
  %68 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %63, i64 0, i32 3
  %69 = load i2, i2* %68
  %70 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %63, i64 0, i32 4
  %71 = load { %Array* }*, { %Array* }** %70
  %72 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %73 = getelementptr { %Qubit* }, { %Qubit* }* %72, i64 0, i32 0
  %74 = load %Qubit*, %Qubit** %73
  %75 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %76 = bitcast %Tuple* %75 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %77 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %76, i64 0, i32 0
  %78 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %76, i64 0, i32 1
  %79 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %76, i64 0, i32 2
  %80 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %76, i64 0, i32 3
  %81 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %76, i64 0, i32 4
  store double %65, double* %77
  store %Array* %67, %Array** %78
  call void @__quantum__rt__array_reference(%Array* %67)
  store i2 %69, i2* %79
  store { %Array* }* %71, { %Array* }** %80
  %82 = getelementptr { %Array* }, { %Array* }* %71, i64 0, i32 0
  %83 = load %Array*, %Array** %82
  call void @__quantum__rt__array_reference(%Array* %83)
  %84 = bitcast { %Array* }* %71 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %84)
  store %Qubit* %74, %Qubit** %81
  %85 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %63, i64 0, i32 0
  %86 = load %Callable*, %Callable** %85
  %87 = call %Callable* @__quantum__rt__callable_copy(%Callable* %86, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %87)
  call void @__quantum__rt__callable_invoke(%Callable* %87, %Tuple* %75, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %67)
  call void @__quantum__rt__array_unreference(%Array* %83)
  call void @__quantum__rt__tuple_unreference(%Tuple* %84)
  call void @__quantum__rt__tuple_unreference(%Tuple* %75)
  call void @__quantum__rt__callable_unreference(%Callable* %87)
  ret void

entry4:                                           ; No predecessors!
  %88 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %89 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 1
  %90 = load double, double* %89
  %91 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 2
  %92 = load %Array*, %Array** %91
  %93 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 3
  %94 = load i2, i2* %93
  %95 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 4
  %96 = load { %Array* }*, { %Array* }** %95
  %97 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %98 = getelementptr { %Qubit* }, { %Qubit* }* %97, i64 0, i32 0
  %99 = load %Qubit*, %Qubit** %98
  %100 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %101 = bitcast %Tuple* %100 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %102 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 0
  %103 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 1
  %104 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 2
  %105 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 3
  %106 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 4
  store double %90, double* %102
  store %Array* %92, %Array** %103
  call void @__quantum__rt__array_reference(%Array* %92)
  store i2 %94, i2* %104
  store { %Array* }* %96, { %Array* }** %105
  %107 = getelementptr { %Array* }, { %Array* }* %96, i64 0, i32 0
  %108 = load %Array*, %Array** %107
  call void @__quantum__rt__array_reference(%Array* %108)
  %109 = bitcast { %Array* }* %96 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %109)
  store %Qubit* %99, %Qubit** %106
  %110 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 0
  %111 = load %Callable*, %Callable** %110
  %112 = call %Callable* @__quantum__rt__callable_copy(%Callable* %111, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %112)
  call void @__quantum__rt__callable_invoke(%Callable* %112, %Tuple* %100, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %92)
  call void @__quantum__rt__array_unreference(%Array* %108)
  call void @__quantum__rt__tuple_unreference(%Tuple* %109)
  call void @__quantum__rt__tuple_unreference(%Tuple* %100)
  call void @__quantum__rt__callable_unreference(%Callable* %112)
  ret void

entry5:                                           ; No predecessors!
  %113 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %114 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %113, i64 0, i32 1
  %115 = load double, double* %114
  %116 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %113, i64 0, i32 2
  %117 = load %Array*, %Array** %116
  %118 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %113, i64 0, i32 3
  %119 = load i2, i2* %118
  %120 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %113, i64 0, i32 4
  %121 = load { %Array* }*, { %Array* }** %120
  %122 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %123 = getelementptr { %Qubit* }, { %Qubit* }* %122, i64 0, i32 0
  %124 = load %Qubit*, %Qubit** %123
  %125 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %126 = bitcast %Tuple* %125 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %127 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %126, i64 0, i32 0
  %128 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %126, i64 0, i32 1
  %129 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %126, i64 0, i32 2
  %130 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %126, i64 0, i32 3
  %131 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %126, i64 0, i32 4
  store double %115, double* %127
  store %Array* %117, %Array** %128
  call void @__quantum__rt__array_reference(%Array* %117)
  store i2 %119, i2* %129
  store { %Array* }* %121, { %Array* }** %130
  %132 = getelementptr { %Array* }, { %Array* }* %121, i64 0, i32 0
  %133 = load %Array*, %Array** %132
  call void @__quantum__rt__array_reference(%Array* %133)
  %134 = bitcast { %Array* }* %121 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %134)
  store %Qubit* %124, %Qubit** %131
  %135 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %113, i64 0, i32 0
  %136 = load %Callable*, %Callable** %135
  %137 = call %Callable* @__quantum__rt__callable_copy(%Callable* %136, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %137)
  call void @__quantum__rt__callable_invoke(%Callable* %137, %Tuple* %125, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %117)
  call void @__quantum__rt__array_unreference(%Array* %133)
  call void @__quantum__rt__tuple_unreference(%Tuple* %134)
  call void @__quantum__rt__tuple_unreference(%Tuple* %125)
  call void @__quantum__rt__callable_unreference(%Callable* %137)
  ret void

entry6:                                           ; No predecessors!
  %138 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %139 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %138, i64 0, i32 1
  %140 = load double, double* %139
  %141 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %138, i64 0, i32 2
  %142 = load %Array*, %Array** %141
  %143 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %138, i64 0, i32 3
  %144 = load i2, i2* %143
  %145 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %138, i64 0, i32 4
  %146 = load { %Array* }*, { %Array* }** %145
  %147 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %148 = getelementptr { %Qubit* }, { %Qubit* }* %147, i64 0, i32 0
  %149 = load %Qubit*, %Qubit** %148
  %150 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %151 = bitcast %Tuple* %150 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %152 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %151, i64 0, i32 0
  %153 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %151, i64 0, i32 1
  %154 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %151, i64 0, i32 2
  %155 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %151, i64 0, i32 3
  %156 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %151, i64 0, i32 4
  store double %140, double* %152
  store %Array* %142, %Array** %153
  call void @__quantum__rt__array_reference(%Array* %142)
  store i2 %144, i2* %154
  store { %Array* }* %146, { %Array* }** %155
  %157 = getelementptr { %Array* }, { %Array* }* %146, i64 0, i32 0
  %158 = load %Array*, %Array** %157
  call void @__quantum__rt__array_reference(%Array* %158)
  %159 = bitcast { %Array* }* %146 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %159)
  store %Qubit* %149, %Qubit** %156
  %160 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %138, i64 0, i32 0
  %161 = load %Callable*, %Callable** %160
  %162 = call %Callable* @__quantum__rt__callable_copy(%Callable* %161, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %162)
  call void @__quantum__rt__callable_invoke(%Callable* %162, %Tuple* %150, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %142)
  call void @__quantum__rt__array_unreference(%Array* %158)
  call void @__quantum__rt__tuple_unreference(%Tuple* %159)
  call void @__quantum__rt__tuple_unreference(%Tuple* %150)
  call void @__quantum__rt__callable_unreference(%Callable* %162)
  ret void
}

define void @Lifted__PartialApplication__2__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 4
  %13 = load %Range, %Range* %12
  %14 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 5
  %15 = load i64, i64* %14
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr { %Range, i64 }, { %Range, i64 }* %17, i64 0, i32 0
  %19 = getelementptr { %Range, i64 }, { %Range, i64 }* %17, i64 0, i32 1
  store %Range %13, %Range* %18
  store i64 %15, i64* %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 2
  %25 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 3
  %26 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 4
  store double %7, double* %22
  store %Array* %9, %Array** %23
  call void @__quantum__rt__array_reference(%Array* %9)
  store i2 %11, i2* %24
  store { %Range, i64 }* %17, { %Range, i64 }** %25
  call void @__quantum__rt__tuple_reference(%Tuple* %16)
  store %Array* %4, %Array** %26
  call void @__quantum__rt__array_reference(%Array* %4)
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i64 0, i32 0
  %30 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i64 0, i32 1
  store %Array* %3, %Array** %29
  call void @__quantum__rt__array_reference(%Array* %3)
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30
  call void @__quantum__rt__array_reference(%Array* %9)
  call void @__quantum__rt__tuple_reference(%Tuple* %16)
  call void @__quantum__rt__array_reference(%Array* %4)
  call void @__quantum__rt__tuple_reference(%Tuple* %20)
  %31 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 0
  %32 = load %Callable*, %Callable** %31
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_unreference(%Tuple* %16)
  call void @__quantum__rt__array_unreference(%Array* %9)
  call void @__quantum__rt__tuple_unreference(%Tuple* %16)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  call void @__quantum__rt__array_unreference(%Array* %3)
  call void @__quantum__rt__array_unreference(%Array* %9)
  call void @__quantum__rt__tuple_unreference(%Tuple* %16)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  call void @__quantum__rt__tuple_unreference(%Tuple* %27)
  call void @__quantum__rt__callable_unreference(%Callable* %33)
  ret void

entry1:                                           ; No predecessors!
  %34 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %35 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %34, i64 0, i32 0
  %36 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %34, i64 0, i32 1
  %37 = load %Array*, %Array** %35
  %38 = load %Array*, %Array** %36
  %39 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %40 = getelementptr { %Callable*, double }, { %Callable*, double }* %39, i64 0, i32 1
  %41 = load double, double* %40
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { double, %Array* }*
  %44 = getelementptr { double, %Array* }, { double, %Array* }* %43, i64 0, i32 0
  %45 = getelementptr { double, %Array* }, { double, %Array* }* %43, i64 0, i32 1
  store double %41, double* %44
  store %Array* %38, %Array** %45
  call void @__quantum__rt__array_reference(%Array* %38)
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %47 = bitcast %Tuple* %46 to { %Array*, { double, %Array* }* }*
  %48 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %47, i64 0, i32 0
  %49 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %47, i64 0, i32 1
  store %Array* %37, %Array** %48
  call void @__quantum__rt__array_reference(%Array* %37)
  store { double, %Array* }* %43, { double, %Array* }** %49
  call void @__quantum__rt__array_reference(%Array* %38)
  call void @__quantum__rt__tuple_reference(%Tuple* %42)
  %50 = getelementptr { %Callable*, double }, { %Callable*, double }* %39, i64 0, i32 0
  %51 = load %Callable*, %Callable** %50
  %52 = call %Callable* @__quantum__rt__callable_copy(%Callable* %51, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %52)
  call void @__quantum__rt__callable_invoke(%Callable* %52, %Tuple* %46, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %38)
  call void @__quantum__rt__tuple_unreference(%Tuple* %42)
  call void @__quantum__rt__array_unreference(%Array* %37)
  call void @__quantum__rt__array_unreference(%Array* %38)
  call void @__quantum__rt__tuple_unreference(%Tuple* %42)
  call void @__quantum__rt__tuple_unreference(%Tuple* %46)
  call void @__quantum__rt__callable_unreference(%Callable* %52)
  ret void

entry2:                                           ; No predecessors!
  %53 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %54 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %53, i64 0, i32 0
  %55 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %53, i64 0, i32 1
  %56 = load %Array*, %Array** %54
  %57 = load { double, %Array* }*, { double, %Array* }** %55
  %58 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %59 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %58, i64 0, i32 1
  %60 = load i64, i64* %59
  %61 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %58, i64 0, i32 2
  %62 = load %Callable*, %Callable** %61
  %63 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %64 = bitcast %Tuple* %63 to { i64, %Callable* }*
  %65 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %64, i64 0, i32 0
  %66 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %64, i64 0, i32 1
  store i64 %60, i64* %65
  store %Callable* %62, %Callable** %66
  call void @__quantum__rt__callable_reference(%Callable* %62)
  %67 = getelementptr { double, %Array* }, { double, %Array* }* %57, i64 0, i32 0
  %68 = load double, double* %67
  %69 = getelementptr { double, %Array* }, { double, %Array* }* %57, i64 0, i32 1
  %70 = load %Array*, %Array** %69
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { { i64, %Callable* }*, double, %Array* }*
  %73 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 0
  %74 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 1
  %75 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 2
  store { i64, %Callable* }* %64, { i64, %Callable* }** %73
  call void @__quantum__rt__callable_reference(%Callable* %62)
  call void @__quantum__rt__tuple_reference(%Tuple* %63)
  store double %68, double* %74
  store %Array* %70, %Array** %75
  call void @__quantum__rt__array_reference(%Array* %70)
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %77 = bitcast %Tuple* %76 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %78 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %77, i64 0, i32 0
  %79 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %77, i64 0, i32 1
  store %Array* %56, %Array** %78
  call void @__quantum__rt__array_reference(%Array* %56)
  store { { i64, %Callable* }*, double, %Array* }* %72, { { i64, %Callable* }*, double, %Array* }** %79
  call void @__quantum__rt__callable_reference(%Callable* %62)
  call void @__quantum__rt__tuple_reference(%Tuple* %63)
  call void @__quantum__rt__array_reference(%Array* %70)
  call void @__quantum__rt__tuple_reference(%Tuple* %71)
  %80 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %58, i64 0, i32 0
  %81 = load %Callable*, %Callable** %80
  %82 = call %Callable* @__quantum__rt__callable_copy(%Callable* %81, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %82)
  call void @__quantum__rt__callable_invoke(%Callable* %82, %Tuple* %76, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %62)
  call void @__quantum__rt__tuple_unreference(%Tuple* %63)
  call void @__quantum__rt__callable_unreference(%Callable* %62)
  call void @__quantum__rt__tuple_unreference(%Tuple* %63)
  call void @__quantum__rt__array_unreference(%Array* %70)
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  call void @__quantum__rt__array_unreference(%Array* %56)
  call void @__quantum__rt__callable_unreference(%Callable* %62)
  call void @__quantum__rt__tuple_unreference(%Tuple* %63)
  call void @__quantum__rt__array_unreference(%Array* %70)
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  call void @__quantum__rt__tuple_unreference(%Tuple* %76)
  call void @__quantum__rt__callable_unreference(%Callable* %82)
  ret void

entry3:                                           ; No predecessors!
  %83 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %84 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %83, i64 0, i32 0
  %85 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %83, i64 0, i32 1
  %86 = load %Array*, %Array** %84
  %87 = load %Qubit*, %Qubit** %85
  %88 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %89 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 1
  %90 = load double, double* %89
  %91 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 2
  %92 = load %Array*, %Array** %91
  %93 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 3
  %94 = load i2, i2* %93
  %95 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 4
  %96 = load { %Array* }*, { %Array* }** %95
  %97 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %98 = bitcast %Tuple* %97 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %99 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %98, i64 0, i32 0
  %100 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %98, i64 0, i32 1
  %101 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %98, i64 0, i32 2
  %102 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %98, i64 0, i32 3
  %103 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %98, i64 0, i32 4
  store double %90, double* %99
  store %Array* %92, %Array** %100
  call void @__quantum__rt__array_reference(%Array* %92)
  store i2 %94, i2* %101
  store { %Array* }* %96, { %Array* }** %102
  %104 = getelementptr { %Array* }, { %Array* }* %96, i64 0, i32 0
  %105 = load %Array*, %Array** %104
  call void @__quantum__rt__array_reference(%Array* %105)
  %106 = bitcast { %Array* }* %96 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %106)
  store %Qubit* %87, %Qubit** %103
  %107 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %108 = bitcast %Tuple* %107 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %109 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %108, i64 0, i32 0
  %110 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %108, i64 0, i32 1
  store %Array* %86, %Array** %109
  call void @__quantum__rt__array_reference(%Array* %86)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %98, { double, %Array*, i2, { %Array* }*, %Qubit* }** %110
  call void @__quantum__rt__array_reference(%Array* %92)
  call void @__quantum__rt__array_reference(%Array* %105)
  call void @__quantum__rt__tuple_reference(%Tuple* %106)
  call void @__quantum__rt__tuple_reference(%Tuple* %97)
  %111 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 0
  %112 = load %Callable*, %Callable** %111
  %113 = call %Callable* @__quantum__rt__callable_copy(%Callable* %112, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %113)
  call void @__quantum__rt__callable_invoke(%Callable* %113, %Tuple* %107, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %92)
  call void @__quantum__rt__array_unreference(%Array* %105)
  call void @__quantum__rt__tuple_unreference(%Tuple* %106)
  call void @__quantum__rt__tuple_unreference(%Tuple* %97)
  call void @__quantum__rt__array_unreference(%Array* %86)
  call void @__quantum__rt__array_unreference(%Array* %92)
  call void @__quantum__rt__array_unreference(%Array* %105)
  call void @__quantum__rt__tuple_unreference(%Tuple* %106)
  call void @__quantum__rt__tuple_unreference(%Tuple* %97)
  call void @__quantum__rt__tuple_unreference(%Tuple* %107)
  call void @__quantum__rt__callable_unreference(%Callable* %113)
  ret void

entry4:                                           ; No predecessors!
  %114 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %115 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %114, i64 0, i32 0
  %116 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %114, i64 0, i32 1
  %117 = load %Array*, %Array** %115
  %118 = load %Qubit*, %Qubit** %116
  %119 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %120 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %119, i64 0, i32 1
  %121 = load double, double* %120
  %122 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %119, i64 0, i32 2
  %123 = load %Array*, %Array** %122
  %124 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %119, i64 0, i32 3
  %125 = load i2, i2* %124
  %126 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %119, i64 0, i32 4
  %127 = load { %Array* }*, { %Array* }** %126
  %128 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %129 = bitcast %Tuple* %128 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %130 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 0
  %131 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 1
  %132 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 2
  %133 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 3
  %134 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 4
  store double %121, double* %130
  store %Array* %123, %Array** %131
  call void @__quantum__rt__array_reference(%Array* %123)
  store i2 %125, i2* %132
  store { %Array* }* %127, { %Array* }** %133
  %135 = getelementptr { %Array* }, { %Array* }* %127, i64 0, i32 0
  %136 = load %Array*, %Array** %135
  call void @__quantum__rt__array_reference(%Array* %136)
  %137 = bitcast { %Array* }* %127 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %137)
  store %Qubit* %118, %Qubit** %134
  %138 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %139 = bitcast %Tuple* %138 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %140 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %139, i64 0, i32 0
  %141 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %139, i64 0, i32 1
  store %Array* %117, %Array** %140
  call void @__quantum__rt__array_reference(%Array* %117)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, { double, %Array*, i2, { %Array* }*, %Qubit* }** %141
  call void @__quantum__rt__array_reference(%Array* %123)
  call void @__quantum__rt__array_reference(%Array* %136)
  call void @__quantum__rt__tuple_reference(%Tuple* %137)
  call void @__quantum__rt__tuple_reference(%Tuple* %128)
  %142 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %119, i64 0, i32 0
  %143 = load %Callable*, %Callable** %142
  %144 = call %Callable* @__quantum__rt__callable_copy(%Callable* %143, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %144)
  call void @__quantum__rt__callable_invoke(%Callable* %144, %Tuple* %138, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %123)
  call void @__quantum__rt__array_unreference(%Array* %136)
  call void @__quantum__rt__tuple_unreference(%Tuple* %137)
  call void @__quantum__rt__tuple_unreference(%Tuple* %128)
  call void @__quantum__rt__array_unreference(%Array* %117)
  call void @__quantum__rt__array_unreference(%Array* %123)
  call void @__quantum__rt__array_unreference(%Array* %136)
  call void @__quantum__rt__tuple_unreference(%Tuple* %137)
  call void @__quantum__rt__tuple_unreference(%Tuple* %128)
  call void @__quantum__rt__tuple_unreference(%Tuple* %138)
  call void @__quantum__rt__callable_unreference(%Callable* %144)
  ret void

entry5:                                           ; No predecessors!
  %145 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %146 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %145, i64 0, i32 0
  %147 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %145, i64 0, i32 1
  %148 = load %Array*, %Array** %146
  %149 = load %Qubit*, %Qubit** %147
  %150 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %151 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %150, i64 0, i32 1
  %152 = load double, double* %151
  %153 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %150, i64 0, i32 2
  %154 = load %Array*, %Array** %153
  %155 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %150, i64 0, i32 3
  %156 = load i2, i2* %155
  %157 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %150, i64 0, i32 4
  %158 = load { %Array* }*, { %Array* }** %157
  %159 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %160 = bitcast %Tuple* %159 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %161 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %160, i64 0, i32 0
  %162 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %160, i64 0, i32 1
  %163 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %160, i64 0, i32 2
  %164 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %160, i64 0, i32 3
  %165 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %160, i64 0, i32 4
  store double %152, double* %161
  store %Array* %154, %Array** %162
  call void @__quantum__rt__array_reference(%Array* %154)
  store i2 %156, i2* %163
  store { %Array* }* %158, { %Array* }** %164
  %166 = getelementptr { %Array* }, { %Array* }* %158, i64 0, i32 0
  %167 = load %Array*, %Array** %166
  call void @__quantum__rt__array_reference(%Array* %167)
  %168 = bitcast { %Array* }* %158 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %168)
  store %Qubit* %149, %Qubit** %165
  %169 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %170 = bitcast %Tuple* %169 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %171 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %170, i64 0, i32 0
  %172 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %170, i64 0, i32 1
  store %Array* %148, %Array** %171
  call void @__quantum__rt__array_reference(%Array* %148)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %160, { double, %Array*, i2, { %Array* }*, %Qubit* }** %172
  call void @__quantum__rt__array_reference(%Array* %154)
  call void @__quantum__rt__array_reference(%Array* %167)
  call void @__quantum__rt__tuple_reference(%Tuple* %168)
  call void @__quantum__rt__tuple_reference(%Tuple* %159)
  %173 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %150, i64 0, i32 0
  %174 = load %Callable*, %Callable** %173
  %175 = call %Callable* @__quantum__rt__callable_copy(%Callable* %174, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %175)
  call void @__quantum__rt__callable_invoke(%Callable* %175, %Tuple* %169, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %154)
  call void @__quantum__rt__array_unreference(%Array* %167)
  call void @__quantum__rt__tuple_unreference(%Tuple* %168)
  call void @__quantum__rt__tuple_unreference(%Tuple* %159)
  call void @__quantum__rt__array_unreference(%Array* %148)
  call void @__quantum__rt__array_unreference(%Array* %154)
  call void @__quantum__rt__array_unreference(%Array* %167)
  call void @__quantum__rt__tuple_unreference(%Tuple* %168)
  call void @__quantum__rt__tuple_unreference(%Tuple* %159)
  call void @__quantum__rt__tuple_unreference(%Tuple* %169)
  call void @__quantum__rt__callable_unreference(%Callable* %175)
  ret void

entry6:                                           ; No predecessors!
  %176 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %177 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %176, i64 0, i32 0
  %178 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %176, i64 0, i32 1
  %179 = load %Array*, %Array** %177
  %180 = load %Qubit*, %Qubit** %178
  %181 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %182 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %181, i64 0, i32 1
  %183 = load double, double* %182
  %184 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %181, i64 0, i32 2
  %185 = load %Array*, %Array** %184
  %186 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %181, i64 0, i32 3
  %187 = load i2, i2* %186
  %188 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %181, i64 0, i32 4
  %189 = load { %Array* }*, { %Array* }** %188
  %190 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %191 = bitcast %Tuple* %190 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %192 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %191, i64 0, i32 0
  %193 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %191, i64 0, i32 1
  %194 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %191, i64 0, i32 2
  %195 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %191, i64 0, i32 3
  %196 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %191, i64 0, i32 4
  store double %183, double* %192
  store %Array* %185, %Array** %193
  call void @__quantum__rt__array_reference(%Array* %185)
  store i2 %187, i2* %194
  store { %Array* }* %189, { %Array* }** %195
  %197 = getelementptr { %Array* }, { %Array* }* %189, i64 0, i32 0
  %198 = load %Array*, %Array** %197
  call void @__quantum__rt__array_reference(%Array* %198)
  %199 = bitcast { %Array* }* %189 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %199)
  store %Qubit* %180, %Qubit** %196
  %200 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %201 = bitcast %Tuple* %200 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %202 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %201, i64 0, i32 0
  %203 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %201, i64 0, i32 1
  store %Array* %179, %Array** %202
  call void @__quantum__rt__array_reference(%Array* %179)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %191, { double, %Array*, i2, { %Array* }*, %Qubit* }** %203
  call void @__quantum__rt__array_reference(%Array* %185)
  call void @__quantum__rt__array_reference(%Array* %198)
  call void @__quantum__rt__tuple_reference(%Tuple* %199)
  call void @__quantum__rt__tuple_reference(%Tuple* %190)
  %204 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %181, i64 0, i32 0
  %205 = load %Callable*, %Callable** %204
  %206 = call %Callable* @__quantum__rt__callable_copy(%Callable* %205, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %206)
  call void @__quantum__rt__callable_invoke(%Callable* %206, %Tuple* %200, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %185)
  call void @__quantum__rt__array_unreference(%Array* %198)
  call void @__quantum__rt__tuple_unreference(%Tuple* %199)
  call void @__quantum__rt__tuple_unreference(%Tuple* %190)
  call void @__quantum__rt__array_unreference(%Array* %179)
  call void @__quantum__rt__array_unreference(%Array* %185)
  call void @__quantum__rt__array_unreference(%Array* %198)
  call void @__quantum__rt__tuple_unreference(%Tuple* %199)
  call void @__quantum__rt__tuple_unreference(%Tuple* %190)
  call void @__quantum__rt__tuple_unreference(%Tuple* %200)
  call void @__quantum__rt__callable_unreference(%Callable* %206)
  ret void
}

define void @Lifted__PartialApplication__2__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 2
  %9 = load %Array*, %Array** %8
  %10 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 3
  %11 = load i2, i2* %10
  %12 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 4
  %13 = load %Range, %Range* %12
  %14 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 5
  %15 = load i64, i64* %14
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr { %Range, i64 }, { %Range, i64 }* %17, i64 0, i32 0
  %19 = getelementptr { %Range, i64 }, { %Range, i64 }* %17, i64 0, i32 1
  store %Range %13, %Range* %18
  store i64 %15, i64* %19
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 2
  %25 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 3
  %26 = getelementptr { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i64 0, i32 4
  store double %7, double* %22
  store %Array* %9, %Array** %23
  call void @__quantum__rt__array_reference(%Array* %9)
  store i2 %11, i2* %24
  store { %Range, i64 }* %17, { %Range, i64 }** %25
  call void @__quantum__rt__tuple_reference(%Tuple* %16)
  store %Array* %4, %Array** %26
  call void @__quantum__rt__array_reference(%Array* %4)
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i64 0, i32 0
  %30 = getelementptr { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i64 0, i32 1
  store %Array* %3, %Array** %29
  call void @__quantum__rt__array_reference(%Array* %3)
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30
  call void @__quantum__rt__array_reference(%Array* %9)
  call void @__quantum__rt__tuple_reference(%Tuple* %16)
  call void @__quantum__rt__array_reference(%Array* %4)
  call void @__quantum__rt__tuple_reference(%Tuple* %20)
  %31 = getelementptr { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i64 0, i32 0
  %32 = load %Callable*, %Callable** %31
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_unreference(%Tuple* %16)
  call void @__quantum__rt__array_unreference(%Array* %9)
  call void @__quantum__rt__tuple_unreference(%Tuple* %16)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  call void @__quantum__rt__array_unreference(%Array* %3)
  call void @__quantum__rt__array_unreference(%Array* %9)
  call void @__quantum__rt__tuple_unreference(%Tuple* %16)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  call void @__quantum__rt__tuple_unreference(%Tuple* %27)
  call void @__quantum__rt__callable_unreference(%Callable* %33)
  ret void

entry1:                                           ; No predecessors!
  %34 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %35 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %34, i64 0, i32 0
  %36 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %34, i64 0, i32 1
  %37 = load %Array*, %Array** %35
  %38 = load %Array*, %Array** %36
  %39 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %40 = getelementptr { %Callable*, double }, { %Callable*, double }* %39, i64 0, i32 1
  %41 = load double, double* %40
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { double, %Array* }*
  %44 = getelementptr { double, %Array* }, { double, %Array* }* %43, i64 0, i32 0
  %45 = getelementptr { double, %Array* }, { double, %Array* }* %43, i64 0, i32 1
  store double %41, double* %44
  store %Array* %38, %Array** %45
  call void @__quantum__rt__array_reference(%Array* %38)
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %47 = bitcast %Tuple* %46 to { %Array*, { double, %Array* }* }*
  %48 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %47, i64 0, i32 0
  %49 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %47, i64 0, i32 1
  store %Array* %37, %Array** %48
  call void @__quantum__rt__array_reference(%Array* %37)
  store { double, %Array* }* %43, { double, %Array* }** %49
  call void @__quantum__rt__array_reference(%Array* %38)
  call void @__quantum__rt__tuple_reference(%Tuple* %42)
  %50 = getelementptr { %Callable*, double }, { %Callable*, double }* %39, i64 0, i32 0
  %51 = load %Callable*, %Callable** %50
  %52 = call %Callable* @__quantum__rt__callable_copy(%Callable* %51, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %52)
  call void @__quantum__rt__callable_make_controlled(%Callable* %52)
  call void @__quantum__rt__callable_invoke(%Callable* %52, %Tuple* %46, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %38)
  call void @__quantum__rt__tuple_unreference(%Tuple* %42)
  call void @__quantum__rt__array_unreference(%Array* %37)
  call void @__quantum__rt__array_unreference(%Array* %38)
  call void @__quantum__rt__tuple_unreference(%Tuple* %42)
  call void @__quantum__rt__tuple_unreference(%Tuple* %46)
  call void @__quantum__rt__callable_unreference(%Callable* %52)
  ret void

entry2:                                           ; No predecessors!
  %53 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %54 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %53, i64 0, i32 0
  %55 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %53, i64 0, i32 1
  %56 = load %Array*, %Array** %54
  %57 = load { double, %Array* }*, { double, %Array* }** %55
  %58 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %59 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %58, i64 0, i32 1
  %60 = load i64, i64* %59
  %61 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %58, i64 0, i32 2
  %62 = load %Callable*, %Callable** %61
  %63 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %64 = bitcast %Tuple* %63 to { i64, %Callable* }*
  %65 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %64, i64 0, i32 0
  %66 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %64, i64 0, i32 1
  store i64 %60, i64* %65
  store %Callable* %62, %Callable** %66
  call void @__quantum__rt__callable_reference(%Callable* %62)
  %67 = getelementptr { double, %Array* }, { double, %Array* }* %57, i64 0, i32 0
  %68 = load double, double* %67
  %69 = getelementptr { double, %Array* }, { double, %Array* }* %57, i64 0, i32 1
  %70 = load %Array*, %Array** %69
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { { i64, %Callable* }*, double, %Array* }*
  %73 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 0
  %74 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 1
  %75 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 2
  store { i64, %Callable* }* %64, { i64, %Callable* }** %73
  call void @__quantum__rt__callable_reference(%Callable* %62)
  call void @__quantum__rt__tuple_reference(%Tuple* %63)
  store double %68, double* %74
  store %Array* %70, %Array** %75
  call void @__quantum__rt__array_reference(%Array* %70)
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %77 = bitcast %Tuple* %76 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %78 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %77, i64 0, i32 0
  %79 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %77, i64 0, i32 1
  store %Array* %56, %Array** %78
  call void @__quantum__rt__array_reference(%Array* %56)
  store { { i64, %Callable* }*, double, %Array* }* %72, { { i64, %Callable* }*, double, %Array* }** %79
  call void @__quantum__rt__callable_reference(%Callable* %62)
  call void @__quantum__rt__tuple_reference(%Tuple* %63)
  call void @__quantum__rt__array_reference(%Array* %70)
  call void @__quantum__rt__tuple_reference(%Tuple* %71)
  %80 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %58, i64 0, i32 0
  %81 = load %Callable*, %Callable** %80
  %82 = call %Callable* @__quantum__rt__callable_copy(%Callable* %81, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %82)
  call void @__quantum__rt__callable_make_controlled(%Callable* %82)
  call void @__quantum__rt__callable_invoke(%Callable* %82, %Tuple* %76, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %62)
  call void @__quantum__rt__tuple_unreference(%Tuple* %63)
  call void @__quantum__rt__callable_unreference(%Callable* %62)
  call void @__quantum__rt__tuple_unreference(%Tuple* %63)
  call void @__quantum__rt__array_unreference(%Array* %70)
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  call void @__quantum__rt__array_unreference(%Array* %56)
  call void @__quantum__rt__callable_unreference(%Callable* %62)
  call void @__quantum__rt__tuple_unreference(%Tuple* %63)
  call void @__quantum__rt__array_unreference(%Array* %70)
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  call void @__quantum__rt__tuple_unreference(%Tuple* %76)
  call void @__quantum__rt__callable_unreference(%Callable* %82)
  ret void

entry3:                                           ; No predecessors!
  %83 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %84 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %83, i64 0, i32 0
  %85 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %83, i64 0, i32 1
  %86 = load %Array*, %Array** %84
  %87 = load %Qubit*, %Qubit** %85
  %88 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %89 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 1
  %90 = load double, double* %89
  %91 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 2
  %92 = load %Array*, %Array** %91
  %93 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 3
  %94 = load i2, i2* %93
  %95 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 4
  %96 = load { %Array* }*, { %Array* }** %95
  %97 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %98 = bitcast %Tuple* %97 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %99 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %98, i64 0, i32 0
  %100 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %98, i64 0, i32 1
  %101 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %98, i64 0, i32 2
  %102 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %98, i64 0, i32 3
  %103 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %98, i64 0, i32 4
  store double %90, double* %99
  store %Array* %92, %Array** %100
  call void @__quantum__rt__array_reference(%Array* %92)
  store i2 %94, i2* %101
  store { %Array* }* %96, { %Array* }** %102
  %104 = getelementptr { %Array* }, { %Array* }* %96, i64 0, i32 0
  %105 = load %Array*, %Array** %104
  call void @__quantum__rt__array_reference(%Array* %105)
  %106 = bitcast { %Array* }* %96 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %106)
  store %Qubit* %87, %Qubit** %103
  %107 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %108 = bitcast %Tuple* %107 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %109 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %108, i64 0, i32 0
  %110 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %108, i64 0, i32 1
  store %Array* %86, %Array** %109
  call void @__quantum__rt__array_reference(%Array* %86)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %98, { double, %Array*, i2, { %Array* }*, %Qubit* }** %110
  call void @__quantum__rt__array_reference(%Array* %92)
  call void @__quantum__rt__array_reference(%Array* %105)
  call void @__quantum__rt__tuple_reference(%Tuple* %106)
  call void @__quantum__rt__tuple_reference(%Tuple* %97)
  %111 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %88, i64 0, i32 0
  %112 = load %Callable*, %Callable** %111
  %113 = call %Callable* @__quantum__rt__callable_copy(%Callable* %112, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %113)
  call void @__quantum__rt__callable_make_controlled(%Callable* %113)
  call void @__quantum__rt__callable_invoke(%Callable* %113, %Tuple* %107, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %92)
  call void @__quantum__rt__array_unreference(%Array* %105)
  call void @__quantum__rt__tuple_unreference(%Tuple* %106)
  call void @__quantum__rt__tuple_unreference(%Tuple* %97)
  call void @__quantum__rt__array_unreference(%Array* %86)
  call void @__quantum__rt__array_unreference(%Array* %92)
  call void @__quantum__rt__array_unreference(%Array* %105)
  call void @__quantum__rt__tuple_unreference(%Tuple* %106)
  call void @__quantum__rt__tuple_unreference(%Tuple* %97)
  call void @__quantum__rt__tuple_unreference(%Tuple* %107)
  call void @__quantum__rt__callable_unreference(%Callable* %113)
  ret void

entry4:                                           ; No predecessors!
  %114 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %115 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %114, i64 0, i32 0
  %116 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %114, i64 0, i32 1
  %117 = load %Array*, %Array** %115
  %118 = load %Qubit*, %Qubit** %116
  %119 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %120 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %119, i64 0, i32 1
  %121 = load double, double* %120
  %122 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %119, i64 0, i32 2
  %123 = load %Array*, %Array** %122
  %124 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %119, i64 0, i32 3
  %125 = load i2, i2* %124
  %126 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %119, i64 0, i32 4
  %127 = load { %Array* }*, { %Array* }** %126
  %128 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %129 = bitcast %Tuple* %128 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %130 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 0
  %131 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 1
  %132 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 2
  %133 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 3
  %134 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 4
  store double %121, double* %130
  store %Array* %123, %Array** %131
  call void @__quantum__rt__array_reference(%Array* %123)
  store i2 %125, i2* %132
  store { %Array* }* %127, { %Array* }** %133
  %135 = getelementptr { %Array* }, { %Array* }* %127, i64 0, i32 0
  %136 = load %Array*, %Array** %135
  call void @__quantum__rt__array_reference(%Array* %136)
  %137 = bitcast { %Array* }* %127 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %137)
  store %Qubit* %118, %Qubit** %134
  %138 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %139 = bitcast %Tuple* %138 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %140 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %139, i64 0, i32 0
  %141 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %139, i64 0, i32 1
  store %Array* %117, %Array** %140
  call void @__quantum__rt__array_reference(%Array* %117)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, { double, %Array*, i2, { %Array* }*, %Qubit* }** %141
  call void @__quantum__rt__array_reference(%Array* %123)
  call void @__quantum__rt__array_reference(%Array* %136)
  call void @__quantum__rt__tuple_reference(%Tuple* %137)
  call void @__quantum__rt__tuple_reference(%Tuple* %128)
  %142 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %119, i64 0, i32 0
  %143 = load %Callable*, %Callable** %142
  %144 = call %Callable* @__quantum__rt__callable_copy(%Callable* %143, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %144)
  call void @__quantum__rt__callable_make_controlled(%Callable* %144)
  call void @__quantum__rt__callable_invoke(%Callable* %144, %Tuple* %138, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %123)
  call void @__quantum__rt__array_unreference(%Array* %136)
  call void @__quantum__rt__tuple_unreference(%Tuple* %137)
  call void @__quantum__rt__tuple_unreference(%Tuple* %128)
  call void @__quantum__rt__array_unreference(%Array* %117)
  call void @__quantum__rt__array_unreference(%Array* %123)
  call void @__quantum__rt__array_unreference(%Array* %136)
  call void @__quantum__rt__tuple_unreference(%Tuple* %137)
  call void @__quantum__rt__tuple_unreference(%Tuple* %128)
  call void @__quantum__rt__tuple_unreference(%Tuple* %138)
  call void @__quantum__rt__callable_unreference(%Callable* %144)
  ret void

entry5:                                           ; No predecessors!
  %145 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %146 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %145, i64 0, i32 0
  %147 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %145, i64 0, i32 1
  %148 = load %Array*, %Array** %146
  %149 = load %Qubit*, %Qubit** %147
  %150 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %151 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %150, i64 0, i32 1
  %152 = load double, double* %151
  %153 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %150, i64 0, i32 2
  %154 = load %Array*, %Array** %153
  %155 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %150, i64 0, i32 3
  %156 = load i2, i2* %155
  %157 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %150, i64 0, i32 4
  %158 = load { %Array* }*, { %Array* }** %157
  %159 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %160 = bitcast %Tuple* %159 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %161 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %160, i64 0, i32 0
  %162 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %160, i64 0, i32 1
  %163 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %160, i64 0, i32 2
  %164 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %160, i64 0, i32 3
  %165 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %160, i64 0, i32 4
  store double %152, double* %161
  store %Array* %154, %Array** %162
  call void @__quantum__rt__array_reference(%Array* %154)
  store i2 %156, i2* %163
  store { %Array* }* %158, { %Array* }** %164
  %166 = getelementptr { %Array* }, { %Array* }* %158, i64 0, i32 0
  %167 = load %Array*, %Array** %166
  call void @__quantum__rt__array_reference(%Array* %167)
  %168 = bitcast { %Array* }* %158 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %168)
  store %Qubit* %149, %Qubit** %165
  %169 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %170 = bitcast %Tuple* %169 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %171 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %170, i64 0, i32 0
  %172 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %170, i64 0, i32 1
  store %Array* %148, %Array** %171
  call void @__quantum__rt__array_reference(%Array* %148)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %160, { double, %Array*, i2, { %Array* }*, %Qubit* }** %172
  call void @__quantum__rt__array_reference(%Array* %154)
  call void @__quantum__rt__array_reference(%Array* %167)
  call void @__quantum__rt__tuple_reference(%Tuple* %168)
  call void @__quantum__rt__tuple_reference(%Tuple* %159)
  %173 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %150, i64 0, i32 0
  %174 = load %Callable*, %Callable** %173
  %175 = call %Callable* @__quantum__rt__callable_copy(%Callable* %174, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %175)
  call void @__quantum__rt__callable_make_controlled(%Callable* %175)
  call void @__quantum__rt__callable_invoke(%Callable* %175, %Tuple* %169, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %154)
  call void @__quantum__rt__array_unreference(%Array* %167)
  call void @__quantum__rt__tuple_unreference(%Tuple* %168)
  call void @__quantum__rt__tuple_unreference(%Tuple* %159)
  call void @__quantum__rt__array_unreference(%Array* %148)
  call void @__quantum__rt__array_unreference(%Array* %154)
  call void @__quantum__rt__array_unreference(%Array* %167)
  call void @__quantum__rt__tuple_unreference(%Tuple* %168)
  call void @__quantum__rt__tuple_unreference(%Tuple* %159)
  call void @__quantum__rt__tuple_unreference(%Tuple* %169)
  call void @__quantum__rt__callable_unreference(%Callable* %175)
  ret void

entry6:                                           ; No predecessors!
  %176 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %177 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %176, i64 0, i32 0
  %178 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %176, i64 0, i32 1
  %179 = load %Array*, %Array** %177
  %180 = load %Qubit*, %Qubit** %178
  %181 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %182 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %181, i64 0, i32 1
  %183 = load double, double* %182
  %184 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %181, i64 0, i32 2
  %185 = load %Array*, %Array** %184
  %186 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %181, i64 0, i32 3
  %187 = load i2, i2* %186
  %188 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %181, i64 0, i32 4
  %189 = load { %Array* }*, { %Array* }** %188
  %190 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %191 = bitcast %Tuple* %190 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %192 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %191, i64 0, i32 0
  %193 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %191, i64 0, i32 1
  %194 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %191, i64 0, i32 2
  %195 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %191, i64 0, i32 3
  %196 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %191, i64 0, i32 4
  store double %183, double* %192
  store %Array* %185, %Array** %193
  call void @__quantum__rt__array_reference(%Array* %185)
  store i2 %187, i2* %194
  store { %Array* }* %189, { %Array* }** %195
  %197 = getelementptr { %Array* }, { %Array* }* %189, i64 0, i32 0
  %198 = load %Array*, %Array** %197
  call void @__quantum__rt__array_reference(%Array* %198)
  %199 = bitcast { %Array* }* %189 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %199)
  store %Qubit* %180, %Qubit** %196
  %200 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %201 = bitcast %Tuple* %200 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %202 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %201, i64 0, i32 0
  %203 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %201, i64 0, i32 1
  store %Array* %179, %Array** %202
  call void @__quantum__rt__array_reference(%Array* %179)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %191, { double, %Array*, i2, { %Array* }*, %Qubit* }** %203
  call void @__quantum__rt__array_reference(%Array* %185)
  call void @__quantum__rt__array_reference(%Array* %198)
  call void @__quantum__rt__tuple_reference(%Tuple* %199)
  call void @__quantum__rt__tuple_reference(%Tuple* %190)
  %204 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %181, i64 0, i32 0
  %205 = load %Callable*, %Callable** %204
  %206 = call %Callable* @__quantum__rt__callable_copy(%Callable* %205, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %206)
  call void @__quantum__rt__callable_make_controlled(%Callable* %206)
  call void @__quantum__rt__callable_invoke(%Callable* %206, %Tuple* %200, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %185)
  call void @__quantum__rt__array_unreference(%Array* %198)
  call void @__quantum__rt__tuple_unreference(%Tuple* %199)
  call void @__quantum__rt__tuple_unreference(%Tuple* %190)
  call void @__quantum__rt__array_unreference(%Array* %179)
  call void @__quantum__rt__array_unreference(%Array* %185)
  call void @__quantum__rt__array_unreference(%Array* %198)
  call void @__quantum__rt__tuple_unreference(%Tuple* %199)
  call void @__quantum__rt__tuple_unreference(%Tuple* %190)
  call void @__quantum__rt__tuple_unreference(%Tuple* %200)
  call void @__quantum__rt__callable_unreference(%Callable* %206)
  ret void
}

define i1 @Microsoft__Quantum__Canon__IsRangeEmpty__body(%Range %rng) {
entry:
  %0 = extractvalue %Range %rng, 0
  %1 = extractvalue %Range %rng, 1
  %2 = extractvalue %Range %rng, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %3 = icmp sgt i64 %1, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idx = phi i64 [ %0, %preheader__1 ], [ %7, %exiting__1 ]
  %4 = icmp sge i64 %idx, %2
  %5 = icmp sle i64 %idx, %2
  %6 = select i1 %3, i1 %5, i1 %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  ret i1 false

exiting__1:                                       ; No predecessors!
  %7 = add i64 %idx, %1
  br label %header__1

exit__1:                                          ; preds = %header__1
  ret i1 true
}

declare double @__quantum__qis__absd__body(double)

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, %Array* }*
  %1 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 2
  %4 = load double, double* %1
  %5 = load i64, i64* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____body(double %4, i64 %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, %Array* }*
  %1 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 2
  %4 = load double, double* %1
  %5 = load i64, i64* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____adj(double %4, i64 %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, %Array* }* }*
  %1 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, i64, %Array* }*, { double, i64, %Array* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____ctl(%Array* %3, { double, i64, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, %Array* }* }*
  %1 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, i64, %Array* }*, { double, i64, %Array* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____ctladj(%Array* %3, { double, i64, %Array* }* %4)
  ret void
}

define void @Lifted__PartialApplication__3__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 2
  %4 = load i64, i64* %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr { %Array* }, { %Array* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, i64, %Array* }*
  %10 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %9, i64 0, i32 1
  %12 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %9, i64 0, i32 2
  store double %2, double* %10
  store i64 %4, i64* %11
  store %Array* %7, %Array** %12
  call void @__quantum__rt__array_reference(%Array* %7)
  %13 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 0
  %14 = load %Callable*, %Callable** %13
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %7)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  ret void

entry1:                                           ; No predecessors!
  %15 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %16 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %15, i64 0, i32 1
  %17 = load i64, i64* %16
  %18 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %15, i64 0, i32 2
  %19 = load i64, i64* %18
  %20 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %15, i64 0, i32 3
  %21 = load %Callable*, %Callable** %20
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { i64, %Callable* }*
  %24 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %23, i64 0, i32 0
  %25 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %23, i64 0, i32 1
  store i64 %19, i64* %24
  store %Callable* %21, %Callable** %25
  call void @__quantum__rt__callable_reference(%Callable* %21)
  %26 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %27 = getelementptr { double, %Array* }, { double, %Array* }* %26, i64 0, i32 0
  %28 = load double, double* %27
  %29 = getelementptr { double, %Array* }, { double, %Array* }* %26, i64 0, i32 1
  %30 = load %Array*, %Array** %29
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { i64, { i64, %Callable* }*, double, %Array* }*
  %33 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %32, i64 0, i32 0
  %34 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %32, i64 0, i32 1
  %35 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %32, i64 0, i32 2
  %36 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %32, i64 0, i32 3
  store i64 %17, i64* %33
  store { i64, %Callable* }* %23, { i64, %Callable* }** %34
  call void @__quantum__rt__callable_reference(%Callable* %21)
  call void @__quantum__rt__tuple_reference(%Tuple* %22)
  store double %28, double* %35
  store %Array* %30, %Array** %36
  call void @__quantum__rt__array_reference(%Array* %30)
  %37 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %15, i64 0, i32 0
  %38 = load %Callable*, %Callable** %37
  call void @__quantum__rt__callable_invoke(%Callable* %38, %Tuple* %31, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %21)
  call void @__quantum__rt__tuple_unreference(%Tuple* %22)
  call void @__quantum__rt__callable_unreference(%Callable* %21)
  call void @__quantum__rt__tuple_unreference(%Tuple* %22)
  call void @__quantum__rt__array_unreference(%Array* %30)
  call void @__quantum__rt__tuple_unreference(%Tuple* %31)
  ret void

entry2:                                           ; No predecessors!
  %39 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %40 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %39, i64 0, i32 1
  %41 = load double, double* %40
  %42 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %39, i64 0, i32 2
  %43 = load %Array*, %Array** %42
  %44 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %39, i64 0, i32 3
  %45 = load i2, i2* %44
  %46 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %39, i64 0, i32 4
  %47 = load { %Array* }*, { %Array* }** %46
  %48 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %49 = getelementptr { %Qubit* }, { %Qubit* }* %48, i64 0, i32 0
  %50 = load %Qubit*, %Qubit** %49
  %51 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %52 = bitcast %Tuple* %51 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %53 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %52, i64 0, i32 0
  %54 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %52, i64 0, i32 1
  %55 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %52, i64 0, i32 2
  %56 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %52, i64 0, i32 3
  %57 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %52, i64 0, i32 4
  store double %41, double* %53
  store %Array* %43, %Array** %54
  call void @__quantum__rt__array_reference(%Array* %43)
  store i2 %45, i2* %55
  store { %Array* }* %47, { %Array* }** %56
  %58 = getelementptr { %Array* }, { %Array* }* %47, i64 0, i32 0
  %59 = load %Array*, %Array** %58
  call void @__quantum__rt__array_reference(%Array* %59)
  %60 = bitcast { %Array* }* %47 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %60)
  store %Qubit* %50, %Qubit** %57
  %61 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %39, i64 0, i32 0
  %62 = load %Callable*, %Callable** %61
  call void @__quantum__rt__callable_invoke(%Callable* %62, %Tuple* %51, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %43)
  call void @__quantum__rt__array_unreference(%Array* %59)
  call void @__quantum__rt__tuple_unreference(%Tuple* %60)
  call void @__quantum__rt__tuple_unreference(%Tuple* %51)
  ret void

entry3:                                           ; No predecessors!
  %63 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %64 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %63, i64 0, i32 1
  %65 = load double, double* %64
  %66 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %63, i64 0, i32 2
  %67 = load %Array*, %Array** %66
  %68 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %63, i64 0, i32 3
  %69 = load i2, i2* %68
  %70 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %63, i64 0, i32 4
  %71 = load { %Array* }*, { %Array* }** %70
  %72 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %73 = getelementptr { %Qubit* }, { %Qubit* }* %72, i64 0, i32 0
  %74 = load %Qubit*, %Qubit** %73
  %75 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %76 = bitcast %Tuple* %75 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %77 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %76, i64 0, i32 0
  %78 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %76, i64 0, i32 1
  %79 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %76, i64 0, i32 2
  %80 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %76, i64 0, i32 3
  %81 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %76, i64 0, i32 4
  store double %65, double* %77
  store %Array* %67, %Array** %78
  call void @__quantum__rt__array_reference(%Array* %67)
  store i2 %69, i2* %79
  store { %Array* }* %71, { %Array* }** %80
  %82 = getelementptr { %Array* }, { %Array* }* %71, i64 0, i32 0
  %83 = load %Array*, %Array** %82
  call void @__quantum__rt__array_reference(%Array* %83)
  %84 = bitcast { %Array* }* %71 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %84)
  store %Qubit* %74, %Qubit** %81
  %85 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %63, i64 0, i32 0
  %86 = load %Callable*, %Callable** %85
  call void @__quantum__rt__callable_invoke(%Callable* %86, %Tuple* %75, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %67)
  call void @__quantum__rt__array_unreference(%Array* %83)
  call void @__quantum__rt__tuple_unreference(%Tuple* %84)
  call void @__quantum__rt__tuple_unreference(%Tuple* %75)
  ret void

entry4:                                           ; No predecessors!
  %87 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %88 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %87, i64 0, i32 1
  %89 = load double, double* %88
  %90 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %87, i64 0, i32 2
  %91 = load %Array*, %Array** %90
  %92 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %87, i64 0, i32 3
  %93 = load i2, i2* %92
  %94 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %87, i64 0, i32 4
  %95 = load { %Array* }*, { %Array* }** %94
  %96 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %97 = getelementptr { %Qubit* }, { %Qubit* }* %96, i64 0, i32 0
  %98 = load %Qubit*, %Qubit** %97
  %99 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %100 = bitcast %Tuple* %99 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %101 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %100, i64 0, i32 0
  %102 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %100, i64 0, i32 1
  %103 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %100, i64 0, i32 2
  %104 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %100, i64 0, i32 3
  %105 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %100, i64 0, i32 4
  store double %89, double* %101
  store %Array* %91, %Array** %102
  call void @__quantum__rt__array_reference(%Array* %91)
  store i2 %93, i2* %103
  store { %Array* }* %95, { %Array* }** %104
  %106 = getelementptr { %Array* }, { %Array* }* %95, i64 0, i32 0
  %107 = load %Array*, %Array** %106
  call void @__quantum__rt__array_reference(%Array* %107)
  %108 = bitcast { %Array* }* %95 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %108)
  store %Qubit* %98, %Qubit** %105
  %109 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %87, i64 0, i32 0
  %110 = load %Callable*, %Callable** %109
  call void @__quantum__rt__callable_invoke(%Callable* %110, %Tuple* %99, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %91)
  call void @__quantum__rt__array_unreference(%Array* %107)
  call void @__quantum__rt__tuple_unreference(%Tuple* %108)
  call void @__quantum__rt__tuple_unreference(%Tuple* %99)
  ret void

entry5:                                           ; No predecessors!
  %111 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %112 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %111, i64 0, i32 1
  %113 = load double, double* %112
  %114 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %111, i64 0, i32 2
  %115 = load %Array*, %Array** %114
  %116 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %111, i64 0, i32 3
  %117 = load i2, i2* %116
  %118 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %111, i64 0, i32 4
  %119 = load { %Array* }*, { %Array* }** %118
  %120 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %121 = getelementptr { %Qubit* }, { %Qubit* }* %120, i64 0, i32 0
  %122 = load %Qubit*, %Qubit** %121
  %123 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %124 = bitcast %Tuple* %123 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %125 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %124, i64 0, i32 0
  %126 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %124, i64 0, i32 1
  %127 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %124, i64 0, i32 2
  %128 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %124, i64 0, i32 3
  %129 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %124, i64 0, i32 4
  store double %113, double* %125
  store %Array* %115, %Array** %126
  call void @__quantum__rt__array_reference(%Array* %115)
  store i2 %117, i2* %127
  store { %Array* }* %119, { %Array* }** %128
  %130 = getelementptr { %Array* }, { %Array* }* %119, i64 0, i32 0
  %131 = load %Array*, %Array** %130
  call void @__quantum__rt__array_reference(%Array* %131)
  %132 = bitcast { %Array* }* %119 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %132)
  store %Qubit* %122, %Qubit** %129
  %133 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %111, i64 0, i32 0
  %134 = load %Callable*, %Callable** %133
  call void @__quantum__rt__callable_invoke(%Callable* %134, %Tuple* %123, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %115)
  call void @__quantum__rt__array_unreference(%Array* %131)
  call void @__quantum__rt__tuple_unreference(%Tuple* %132)
  call void @__quantum__rt__tuple_unreference(%Tuple* %123)
  ret void
}

define void @Lifted__PartialApplication__3__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 1
  %2 = load double, double* %1
  %3 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 2
  %4 = load i64, i64* %3
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr { %Array* }, { %Array* }* %5, i64 0, i32 0
  %7 = load %Array*, %Array** %6
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, i64, %Array* }*
  %10 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %9, i64 0, i32 0
  %11 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %9, i64 0, i32 1
  %12 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %9, i64 0, i32 2
  store double %2, double* %10
  store i64 %4, i64* %11
  store %Array* %7, %Array** %12
  call void @__quantum__rt__array_reference(%Array* %7)
  %13 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i64 0, i32 0
  %14 = load %Callable*, %Callable** %13
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %7)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  call void @__quantum__rt__callable_unreference(%Callable* %15)
  ret void

entry1:                                           ; No predecessors!
  %16 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %17 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %16, i64 0, i32 1
  %18 = load i64, i64* %17
  %19 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %16, i64 0, i32 2
  %20 = load i64, i64* %19
  %21 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %16, i64 0, i32 3
  %22 = load %Callable*, %Callable** %21
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { i64, %Callable* }*
  %25 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %24, i64 0, i32 0
  %26 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %24, i64 0, i32 1
  store i64 %20, i64* %25
  store %Callable* %22, %Callable** %26
  call void @__quantum__rt__callable_reference(%Callable* %22)
  %27 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %28 = getelementptr { double, %Array* }, { double, %Array* }* %27, i64 0, i32 0
  %29 = load double, double* %28
  %30 = getelementptr { double, %Array* }, { double, %Array* }* %27, i64 0, i32 1
  %31 = load %Array*, %Array** %30
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { i64, { i64, %Callable* }*, double, %Array* }*
  %34 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %33, i64 0, i32 0
  %35 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %33, i64 0, i32 1
  %36 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %33, i64 0, i32 2
  %37 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %33, i64 0, i32 3
  store i64 %18, i64* %34
  store { i64, %Callable* }* %24, { i64, %Callable* }** %35
  call void @__quantum__rt__callable_reference(%Callable* %22)
  call void @__quantum__rt__tuple_reference(%Tuple* %23)
  store double %29, double* %36
  store %Array* %31, %Array** %37
  call void @__quantum__rt__array_reference(%Array* %31)
  %38 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %16, i64 0, i32 0
  %39 = load %Callable*, %Callable** %38
  %40 = call %Callable* @__quantum__rt__callable_copy(%Callable* %39, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %40)
  call void @__quantum__rt__callable_invoke(%Callable* %40, %Tuple* %32, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %22)
  call void @__quantum__rt__tuple_unreference(%Tuple* %23)
  call void @__quantum__rt__callable_unreference(%Callable* %22)
  call void @__quantum__rt__tuple_unreference(%Tuple* %23)
  call void @__quantum__rt__array_unreference(%Array* %31)
  call void @__quantum__rt__tuple_unreference(%Tuple* %32)
  call void @__quantum__rt__callable_unreference(%Callable* %40)
  ret void

entry2:                                           ; No predecessors!
  %41 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %42 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %41, i64 0, i32 1
  %43 = load double, double* %42
  %44 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %41, i64 0, i32 2
  %45 = load %Array*, %Array** %44
  %46 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %41, i64 0, i32 3
  %47 = load i2, i2* %46
  %48 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %41, i64 0, i32 4
  %49 = load { %Array* }*, { %Array* }** %48
  %50 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %51 = getelementptr { %Qubit* }, { %Qubit* }* %50, i64 0, i32 0
  %52 = load %Qubit*, %Qubit** %51
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %55 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %54, i64 0, i32 0
  %56 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %54, i64 0, i32 1
  %57 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %54, i64 0, i32 2
  %58 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %54, i64 0, i32 3
  %59 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %54, i64 0, i32 4
  store double %43, double* %55
  store %Array* %45, %Array** %56
  call void @__quantum__rt__array_reference(%Array* %45)
  store i2 %47, i2* %57
  store { %Array* }* %49, { %Array* }** %58
  %60 = getelementptr { %Array* }, { %Array* }* %49, i64 0, i32 0
  %61 = load %Array*, %Array** %60
  call void @__quantum__rt__array_reference(%Array* %61)
  %62 = bitcast { %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %62)
  store %Qubit* %52, %Qubit** %59
  %63 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %41, i64 0, i32 0
  %64 = load %Callable*, %Callable** %63
  %65 = call %Callable* @__quantum__rt__callable_copy(%Callable* %64, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %65)
  call void @__quantum__rt__callable_invoke(%Callable* %65, %Tuple* %53, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %45)
  call void @__quantum__rt__array_unreference(%Array* %61)
  call void @__quantum__rt__tuple_unreference(%Tuple* %62)
  call void @__quantum__rt__tuple_unreference(%Tuple* %53)
  call void @__quantum__rt__callable_unreference(%Callable* %65)
  ret void

entry3:                                           ; No predecessors!
  %66 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %67 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %66, i64 0, i32 1
  %68 = load double, double* %67
  %69 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %66, i64 0, i32 2
  %70 = load %Array*, %Array** %69
  %71 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %66, i64 0, i32 3
  %72 = load i2, i2* %71
  %73 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %66, i64 0, i32 4
  %74 = load { %Array* }*, { %Array* }** %73
  %75 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %76 = getelementptr { %Qubit* }, { %Qubit* }* %75, i64 0, i32 0
  %77 = load %Qubit*, %Qubit** %76
  %78 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %79 = bitcast %Tuple* %78 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %80 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %79, i64 0, i32 0
  %81 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %79, i64 0, i32 1
  %82 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %79, i64 0, i32 2
  %83 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %79, i64 0, i32 3
  %84 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %79, i64 0, i32 4
  store double %68, double* %80
  store %Array* %70, %Array** %81
  call void @__quantum__rt__array_reference(%Array* %70)
  store i2 %72, i2* %82
  store { %Array* }* %74, { %Array* }** %83
  %85 = getelementptr { %Array* }, { %Array* }* %74, i64 0, i32 0
  %86 = load %Array*, %Array** %85
  call void @__quantum__rt__array_reference(%Array* %86)
  %87 = bitcast { %Array* }* %74 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %87)
  store %Qubit* %77, %Qubit** %84
  %88 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %66, i64 0, i32 0
  %89 = load %Callable*, %Callable** %88
  %90 = call %Callable* @__quantum__rt__callable_copy(%Callable* %89, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %90)
  call void @__quantum__rt__callable_invoke(%Callable* %90, %Tuple* %78, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %70)
  call void @__quantum__rt__array_unreference(%Array* %86)
  call void @__quantum__rt__tuple_unreference(%Tuple* %87)
  call void @__quantum__rt__tuple_unreference(%Tuple* %78)
  call void @__quantum__rt__callable_unreference(%Callable* %90)
  ret void

entry4:                                           ; No predecessors!
  %91 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %92 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 1
  %93 = load double, double* %92
  %94 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 2
  %95 = load %Array*, %Array** %94
  %96 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 3
  %97 = load i2, i2* %96
  %98 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 4
  %99 = load { %Array* }*, { %Array* }** %98
  %100 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %101 = getelementptr { %Qubit* }, { %Qubit* }* %100, i64 0, i32 0
  %102 = load %Qubit*, %Qubit** %101
  %103 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %104 = bitcast %Tuple* %103 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %105 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %104, i64 0, i32 0
  %106 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %104, i64 0, i32 1
  %107 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %104, i64 0, i32 2
  %108 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %104, i64 0, i32 3
  %109 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %104, i64 0, i32 4
  store double %93, double* %105
  store %Array* %95, %Array** %106
  call void @__quantum__rt__array_reference(%Array* %95)
  store i2 %97, i2* %107
  store { %Array* }* %99, { %Array* }** %108
  %110 = getelementptr { %Array* }, { %Array* }* %99, i64 0, i32 0
  %111 = load %Array*, %Array** %110
  call void @__quantum__rt__array_reference(%Array* %111)
  %112 = bitcast { %Array* }* %99 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %112)
  store %Qubit* %102, %Qubit** %109
  %113 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 0
  %114 = load %Callable*, %Callable** %113
  %115 = call %Callable* @__quantum__rt__callable_copy(%Callable* %114, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %115)
  call void @__quantum__rt__callable_invoke(%Callable* %115, %Tuple* %103, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %95)
  call void @__quantum__rt__array_unreference(%Array* %111)
  call void @__quantum__rt__tuple_unreference(%Tuple* %112)
  call void @__quantum__rt__tuple_unreference(%Tuple* %103)
  call void @__quantum__rt__callable_unreference(%Callable* %115)
  ret void

entry5:                                           ; No predecessors!
  %116 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %117 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %116, i64 0, i32 1
  %118 = load double, double* %117
  %119 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %116, i64 0, i32 2
  %120 = load %Array*, %Array** %119
  %121 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %116, i64 0, i32 3
  %122 = load i2, i2* %121
  %123 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %116, i64 0, i32 4
  %124 = load { %Array* }*, { %Array* }** %123
  %125 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %126 = getelementptr { %Qubit* }, { %Qubit* }* %125, i64 0, i32 0
  %127 = load %Qubit*, %Qubit** %126
  %128 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %129 = bitcast %Tuple* %128 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %130 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 0
  %131 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 1
  %132 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 2
  %133 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 3
  %134 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %129, i64 0, i32 4
  store double %118, double* %130
  store %Array* %120, %Array** %131
  call void @__quantum__rt__array_reference(%Array* %120)
  store i2 %122, i2* %132
  store { %Array* }* %124, { %Array* }** %133
  %135 = getelementptr { %Array* }, { %Array* }* %124, i64 0, i32 0
  %136 = load %Array*, %Array** %135
  call void @__quantum__rt__array_reference(%Array* %136)
  %137 = bitcast { %Array* }* %124 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %137)
  store %Qubit* %127, %Qubit** %134
  %138 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %116, i64 0, i32 0
  %139 = load %Callable*, %Callable** %138
  %140 = call %Callable* @__quantum__rt__callable_copy(%Callable* %139, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %140)
  call void @__quantum__rt__callable_invoke(%Callable* %140, %Tuple* %128, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %120)
  call void @__quantum__rt__array_unreference(%Array* %136)
  call void @__quantum__rt__tuple_unreference(%Tuple* %137)
  call void @__quantum__rt__tuple_unreference(%Tuple* %128)
  call void @__quantum__rt__callable_unreference(%Callable* %140)
  ret void
}

define void @Lifted__PartialApplication__3__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 2
  %9 = load i64, i64* %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, i64, %Array* }*
  %12 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %11, i64 0, i32 2
  store double %7, double* %12
  store i64 %9, i64* %13
  store %Array* %4, %Array** %14
  call void @__quantum__rt__array_reference(%Array* %4)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, i64, %Array* }* }*
  %17 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i64 0, i32 0
  %18 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i64 0, i32 1
  store %Array* %3, %Array** %17
  call void @__quantum__rt__array_reference(%Array* %3)
  store { double, i64, %Array* }* %11, { double, i64, %Array* }** %18
  call void @__quantum__rt__array_reference(%Array* %4)
  call void @__quantum__rt__tuple_reference(%Tuple* %10)
  %19 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %10)
  call void @__quantum__rt__array_unreference(%Array* %3)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %10)
  call void @__quantum__rt__tuple_unreference(%Tuple* %15)
  call void @__quantum__rt__callable_unreference(%Callable* %21)
  ret void

entry1:                                           ; No predecessors!
  %22 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %23 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %22, i64 0, i32 1
  %25 = load %Array*, %Array** %23
  %26 = load { double, %Array* }*, { double, %Array* }** %24
  %27 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %28 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %27, i64 0, i32 1
  %29 = load i64, i64* %28
  %30 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %27, i64 0, i32 2
  %31 = load i64, i64* %30
  %32 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %27, i64 0, i32 3
  %33 = load %Callable*, %Callable** %32
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { i64, %Callable* }*
  %36 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %35, i64 0, i32 0
  %37 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %35, i64 0, i32 1
  store i64 %31, i64* %36
  store %Callable* %33, %Callable** %37
  call void @__quantum__rt__callable_reference(%Callable* %33)
  %38 = getelementptr { double, %Array* }, { double, %Array* }* %26, i64 0, i32 0
  %39 = load double, double* %38
  %40 = getelementptr { double, %Array* }, { double, %Array* }* %26, i64 0, i32 1
  %41 = load %Array*, %Array** %40
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { i64, { i64, %Callable* }*, double, %Array* }*
  %44 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %43, i64 0, i32 0
  %45 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %43, i64 0, i32 1
  %46 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %43, i64 0, i32 2
  %47 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %43, i64 0, i32 3
  store i64 %29, i64* %44
  store { i64, %Callable* }* %35, { i64, %Callable* }** %45
  call void @__quantum__rt__callable_reference(%Callable* %33)
  call void @__quantum__rt__tuple_reference(%Tuple* %34)
  store double %39, double* %46
  store %Array* %41, %Array** %47
  call void @__quantum__rt__array_reference(%Array* %41)
  %48 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %49 = bitcast %Tuple* %48 to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %50 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %49, i64 0, i32 0
  %51 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %49, i64 0, i32 1
  store %Array* %25, %Array** %50
  call void @__quantum__rt__array_reference(%Array* %25)
  store { i64, { i64, %Callable* }*, double, %Array* }* %43, { i64, { i64, %Callable* }*, double, %Array* }** %51
  call void @__quantum__rt__callable_reference(%Callable* %33)
  call void @__quantum__rt__tuple_reference(%Tuple* %34)
  call void @__quantum__rt__array_reference(%Array* %41)
  call void @__quantum__rt__tuple_reference(%Tuple* %42)
  %52 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %27, i64 0, i32 0
  %53 = load %Callable*, %Callable** %52
  %54 = call %Callable* @__quantum__rt__callable_copy(%Callable* %53, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %54)
  call void @__quantum__rt__callable_invoke(%Callable* %54, %Tuple* %48, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %33)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  call void @__quantum__rt__callable_unreference(%Callable* %33)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  call void @__quantum__rt__array_unreference(%Array* %41)
  call void @__quantum__rt__tuple_unreference(%Tuple* %42)
  call void @__quantum__rt__array_unreference(%Array* %25)
  call void @__quantum__rt__callable_unreference(%Callable* %33)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  call void @__quantum__rt__array_unreference(%Array* %41)
  call void @__quantum__rt__tuple_unreference(%Tuple* %42)
  call void @__quantum__rt__tuple_unreference(%Tuple* %48)
  call void @__quantum__rt__callable_unreference(%Callable* %54)
  ret void

entry2:                                           ; No predecessors!
  %55 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %56 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %55, i64 0, i32 0
  %57 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %55, i64 0, i32 1
  %58 = load %Array*, %Array** %56
  %59 = load %Qubit*, %Qubit** %57
  %60 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %61 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 1
  %62 = load double, double* %61
  %63 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 2
  %64 = load %Array*, %Array** %63
  %65 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 3
  %66 = load i2, i2* %65
  %67 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 4
  %68 = load { %Array* }*, { %Array* }** %67
  %69 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %70 = bitcast %Tuple* %69 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %71 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %70, i64 0, i32 0
  %72 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %70, i64 0, i32 1
  %73 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %70, i64 0, i32 2
  %74 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %70, i64 0, i32 3
  %75 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %70, i64 0, i32 4
  store double %62, double* %71
  store %Array* %64, %Array** %72
  call void @__quantum__rt__array_reference(%Array* %64)
  store i2 %66, i2* %73
  store { %Array* }* %68, { %Array* }** %74
  %76 = getelementptr { %Array* }, { %Array* }* %68, i64 0, i32 0
  %77 = load %Array*, %Array** %76
  call void @__quantum__rt__array_reference(%Array* %77)
  %78 = bitcast { %Array* }* %68 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %78)
  store %Qubit* %59, %Qubit** %75
  %79 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %80 = bitcast %Tuple* %79 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %81 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %80, i64 0, i32 0
  %82 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %80, i64 0, i32 1
  store %Array* %58, %Array** %81
  call void @__quantum__rt__array_reference(%Array* %58)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %70, { double, %Array*, i2, { %Array* }*, %Qubit* }** %82
  call void @__quantum__rt__array_reference(%Array* %64)
  call void @__quantum__rt__array_reference(%Array* %77)
  call void @__quantum__rt__tuple_reference(%Tuple* %78)
  call void @__quantum__rt__tuple_reference(%Tuple* %69)
  %83 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 0
  %84 = load %Callable*, %Callable** %83
  %85 = call %Callable* @__quantum__rt__callable_copy(%Callable* %84, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %85)
  call void @__quantum__rt__callable_invoke(%Callable* %85, %Tuple* %79, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %64)
  call void @__quantum__rt__array_unreference(%Array* %77)
  call void @__quantum__rt__tuple_unreference(%Tuple* %78)
  call void @__quantum__rt__tuple_unreference(%Tuple* %69)
  call void @__quantum__rt__array_unreference(%Array* %58)
  call void @__quantum__rt__array_unreference(%Array* %64)
  call void @__quantum__rt__array_unreference(%Array* %77)
  call void @__quantum__rt__tuple_unreference(%Tuple* %78)
  call void @__quantum__rt__tuple_unreference(%Tuple* %69)
  call void @__quantum__rt__tuple_unreference(%Tuple* %79)
  call void @__quantum__rt__callable_unreference(%Callable* %85)
  ret void

entry3:                                           ; No predecessors!
  %86 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %87 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %86, i64 0, i32 0
  %88 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %86, i64 0, i32 1
  %89 = load %Array*, %Array** %87
  %90 = load %Qubit*, %Qubit** %88
  %91 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %92 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 1
  %93 = load double, double* %92
  %94 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 2
  %95 = load %Array*, %Array** %94
  %96 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 3
  %97 = load i2, i2* %96
  %98 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 4
  %99 = load { %Array* }*, { %Array* }** %98
  %100 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %101 = bitcast %Tuple* %100 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %102 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 0
  %103 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 1
  %104 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 2
  %105 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 3
  %106 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 4
  store double %93, double* %102
  store %Array* %95, %Array** %103
  call void @__quantum__rt__array_reference(%Array* %95)
  store i2 %97, i2* %104
  store { %Array* }* %99, { %Array* }** %105
  %107 = getelementptr { %Array* }, { %Array* }* %99, i64 0, i32 0
  %108 = load %Array*, %Array** %107
  call void @__quantum__rt__array_reference(%Array* %108)
  %109 = bitcast { %Array* }* %99 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %109)
  store %Qubit* %90, %Qubit** %106
  %110 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %111 = bitcast %Tuple* %110 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %112 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %111, i64 0, i32 0
  %113 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %111, i64 0, i32 1
  store %Array* %89, %Array** %112
  call void @__quantum__rt__array_reference(%Array* %89)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, { double, %Array*, i2, { %Array* }*, %Qubit* }** %113
  call void @__quantum__rt__array_reference(%Array* %95)
  call void @__quantum__rt__array_reference(%Array* %108)
  call void @__quantum__rt__tuple_reference(%Tuple* %109)
  call void @__quantum__rt__tuple_reference(%Tuple* %100)
  %114 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 0
  %115 = load %Callable*, %Callable** %114
  %116 = call %Callable* @__quantum__rt__callable_copy(%Callable* %115, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %116)
  call void @__quantum__rt__callable_invoke(%Callable* %116, %Tuple* %110, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %95)
  call void @__quantum__rt__array_unreference(%Array* %108)
  call void @__quantum__rt__tuple_unreference(%Tuple* %109)
  call void @__quantum__rt__tuple_unreference(%Tuple* %100)
  call void @__quantum__rt__array_unreference(%Array* %89)
  call void @__quantum__rt__array_unreference(%Array* %95)
  call void @__quantum__rt__array_unreference(%Array* %108)
  call void @__quantum__rt__tuple_unreference(%Tuple* %109)
  call void @__quantum__rt__tuple_unreference(%Tuple* %100)
  call void @__quantum__rt__tuple_unreference(%Tuple* %110)
  call void @__quantum__rt__callable_unreference(%Callable* %116)
  ret void

entry4:                                           ; No predecessors!
  %117 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %118 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %117, i64 0, i32 0
  %119 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %117, i64 0, i32 1
  %120 = load %Array*, %Array** %118
  %121 = load %Qubit*, %Qubit** %119
  %122 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %123 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %122, i64 0, i32 1
  %124 = load double, double* %123
  %125 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %122, i64 0, i32 2
  %126 = load %Array*, %Array** %125
  %127 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %122, i64 0, i32 3
  %128 = load i2, i2* %127
  %129 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %122, i64 0, i32 4
  %130 = load { %Array* }*, { %Array* }** %129
  %131 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %132 = bitcast %Tuple* %131 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %133 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %132, i64 0, i32 0
  %134 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %132, i64 0, i32 1
  %135 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %132, i64 0, i32 2
  %136 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %132, i64 0, i32 3
  %137 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %132, i64 0, i32 4
  store double %124, double* %133
  store %Array* %126, %Array** %134
  call void @__quantum__rt__array_reference(%Array* %126)
  store i2 %128, i2* %135
  store { %Array* }* %130, { %Array* }** %136
  %138 = getelementptr { %Array* }, { %Array* }* %130, i64 0, i32 0
  %139 = load %Array*, %Array** %138
  call void @__quantum__rt__array_reference(%Array* %139)
  %140 = bitcast { %Array* }* %130 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %140)
  store %Qubit* %121, %Qubit** %137
  %141 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %142 = bitcast %Tuple* %141 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %143 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %142, i64 0, i32 0
  %144 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %142, i64 0, i32 1
  store %Array* %120, %Array** %143
  call void @__quantum__rt__array_reference(%Array* %120)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %132, { double, %Array*, i2, { %Array* }*, %Qubit* }** %144
  call void @__quantum__rt__array_reference(%Array* %126)
  call void @__quantum__rt__array_reference(%Array* %139)
  call void @__quantum__rt__tuple_reference(%Tuple* %140)
  call void @__quantum__rt__tuple_reference(%Tuple* %131)
  %145 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %122, i64 0, i32 0
  %146 = load %Callable*, %Callable** %145
  %147 = call %Callable* @__quantum__rt__callable_copy(%Callable* %146, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %147)
  call void @__quantum__rt__callable_invoke(%Callable* %147, %Tuple* %141, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %126)
  call void @__quantum__rt__array_unreference(%Array* %139)
  call void @__quantum__rt__tuple_unreference(%Tuple* %140)
  call void @__quantum__rt__tuple_unreference(%Tuple* %131)
  call void @__quantum__rt__array_unreference(%Array* %120)
  call void @__quantum__rt__array_unreference(%Array* %126)
  call void @__quantum__rt__array_unreference(%Array* %139)
  call void @__quantum__rt__tuple_unreference(%Tuple* %140)
  call void @__quantum__rt__tuple_unreference(%Tuple* %131)
  call void @__quantum__rt__tuple_unreference(%Tuple* %141)
  call void @__quantum__rt__callable_unreference(%Callable* %147)
  ret void

entry5:                                           ; No predecessors!
  %148 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %149 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %148, i64 0, i32 0
  %150 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %148, i64 0, i32 1
  %151 = load %Array*, %Array** %149
  %152 = load %Qubit*, %Qubit** %150
  %153 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %154 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %153, i64 0, i32 1
  %155 = load double, double* %154
  %156 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %153, i64 0, i32 2
  %157 = load %Array*, %Array** %156
  %158 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %153, i64 0, i32 3
  %159 = load i2, i2* %158
  %160 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %153, i64 0, i32 4
  %161 = load { %Array* }*, { %Array* }** %160
  %162 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %163 = bitcast %Tuple* %162 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %164 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %163, i64 0, i32 0
  %165 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %163, i64 0, i32 1
  %166 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %163, i64 0, i32 2
  %167 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %163, i64 0, i32 3
  %168 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %163, i64 0, i32 4
  store double %155, double* %164
  store %Array* %157, %Array** %165
  call void @__quantum__rt__array_reference(%Array* %157)
  store i2 %159, i2* %166
  store { %Array* }* %161, { %Array* }** %167
  %169 = getelementptr { %Array* }, { %Array* }* %161, i64 0, i32 0
  %170 = load %Array*, %Array** %169
  call void @__quantum__rt__array_reference(%Array* %170)
  %171 = bitcast { %Array* }* %161 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %171)
  store %Qubit* %152, %Qubit** %168
  %172 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %173 = bitcast %Tuple* %172 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %174 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %173, i64 0, i32 0
  %175 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %173, i64 0, i32 1
  store %Array* %151, %Array** %174
  call void @__quantum__rt__array_reference(%Array* %151)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %163, { double, %Array*, i2, { %Array* }*, %Qubit* }** %175
  call void @__quantum__rt__array_reference(%Array* %157)
  call void @__quantum__rt__array_reference(%Array* %170)
  call void @__quantum__rt__tuple_reference(%Tuple* %171)
  call void @__quantum__rt__tuple_reference(%Tuple* %162)
  %176 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %153, i64 0, i32 0
  %177 = load %Callable*, %Callable** %176
  %178 = call %Callable* @__quantum__rt__callable_copy(%Callable* %177, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %178)
  call void @__quantum__rt__callable_invoke(%Callable* %178, %Tuple* %172, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %157)
  call void @__quantum__rt__array_unreference(%Array* %170)
  call void @__quantum__rt__tuple_unreference(%Tuple* %171)
  call void @__quantum__rt__tuple_unreference(%Tuple* %162)
  call void @__quantum__rt__array_unreference(%Array* %151)
  call void @__quantum__rt__array_unreference(%Array* %157)
  call void @__quantum__rt__array_unreference(%Array* %170)
  call void @__quantum__rt__tuple_unreference(%Tuple* %171)
  call void @__quantum__rt__tuple_unreference(%Tuple* %162)
  call void @__quantum__rt__tuple_unreference(%Tuple* %172)
  call void @__quantum__rt__callable_unreference(%Callable* %178)
  ret void
}

define void @Lifted__PartialApplication__3__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 1
  %7 = load double, double* %6
  %8 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 2
  %9 = load i64, i64* %8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, i64, %Array* }*
  %12 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %11, i64 0, i32 2
  store double %7, double* %12
  store i64 %9, i64* %13
  store %Array* %4, %Array** %14
  call void @__quantum__rt__array_reference(%Array* %4)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, i64, %Array* }* }*
  %17 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i64 0, i32 0
  %18 = getelementptr { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i64 0, i32 1
  store %Array* %3, %Array** %17
  call void @__quantum__rt__array_reference(%Array* %3)
  store { double, i64, %Array* }* %11, { double, i64, %Array* }** %18
  call void @__quantum__rt__array_reference(%Array* %4)
  call void @__quantum__rt__tuple_reference(%Tuple* %10)
  %19 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i64 0, i32 0
  %20 = load %Callable*, %Callable** %19
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %10)
  call void @__quantum__rt__array_unreference(%Array* %3)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %10)
  call void @__quantum__rt__tuple_unreference(%Tuple* %15)
  call void @__quantum__rt__callable_unreference(%Callable* %21)
  ret void

entry1:                                           ; No predecessors!
  %22 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %23 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %22, i64 0, i32 1
  %25 = load %Array*, %Array** %23
  %26 = load { double, %Array* }*, { double, %Array* }** %24
  %27 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %28 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %27, i64 0, i32 1
  %29 = load i64, i64* %28
  %30 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %27, i64 0, i32 2
  %31 = load i64, i64* %30
  %32 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %27, i64 0, i32 3
  %33 = load %Callable*, %Callable** %32
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { i64, %Callable* }*
  %36 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %35, i64 0, i32 0
  %37 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %35, i64 0, i32 1
  store i64 %31, i64* %36
  store %Callable* %33, %Callable** %37
  call void @__quantum__rt__callable_reference(%Callable* %33)
  %38 = getelementptr { double, %Array* }, { double, %Array* }* %26, i64 0, i32 0
  %39 = load double, double* %38
  %40 = getelementptr { double, %Array* }, { double, %Array* }* %26, i64 0, i32 1
  %41 = load %Array*, %Array** %40
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { i64, { i64, %Callable* }*, double, %Array* }*
  %44 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %43, i64 0, i32 0
  %45 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %43, i64 0, i32 1
  %46 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %43, i64 0, i32 2
  %47 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %43, i64 0, i32 3
  store i64 %29, i64* %44
  store { i64, %Callable* }* %35, { i64, %Callable* }** %45
  call void @__quantum__rt__callable_reference(%Callable* %33)
  call void @__quantum__rt__tuple_reference(%Tuple* %34)
  store double %39, double* %46
  store %Array* %41, %Array** %47
  call void @__quantum__rt__array_reference(%Array* %41)
  %48 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %49 = bitcast %Tuple* %48 to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %50 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %49, i64 0, i32 0
  %51 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %49, i64 0, i32 1
  store %Array* %25, %Array** %50
  call void @__quantum__rt__array_reference(%Array* %25)
  store { i64, { i64, %Callable* }*, double, %Array* }* %43, { i64, { i64, %Callable* }*, double, %Array* }** %51
  call void @__quantum__rt__callable_reference(%Callable* %33)
  call void @__quantum__rt__tuple_reference(%Tuple* %34)
  call void @__quantum__rt__array_reference(%Array* %41)
  call void @__quantum__rt__tuple_reference(%Tuple* %42)
  %52 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %27, i64 0, i32 0
  %53 = load %Callable*, %Callable** %52
  %54 = call %Callable* @__quantum__rt__callable_copy(%Callable* %53, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %54)
  call void @__quantum__rt__callable_make_controlled(%Callable* %54)
  call void @__quantum__rt__callable_invoke(%Callable* %54, %Tuple* %48, %Tuple* %result-tuple)
  call void @__quantum__rt__callable_unreference(%Callable* %33)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  call void @__quantum__rt__callable_unreference(%Callable* %33)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  call void @__quantum__rt__array_unreference(%Array* %41)
  call void @__quantum__rt__tuple_unreference(%Tuple* %42)
  call void @__quantum__rt__array_unreference(%Array* %25)
  call void @__quantum__rt__callable_unreference(%Callable* %33)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  call void @__quantum__rt__array_unreference(%Array* %41)
  call void @__quantum__rt__tuple_unreference(%Tuple* %42)
  call void @__quantum__rt__tuple_unreference(%Tuple* %48)
  call void @__quantum__rt__callable_unreference(%Callable* %54)
  ret void

entry2:                                           ; No predecessors!
  %55 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %56 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %55, i64 0, i32 0
  %57 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %55, i64 0, i32 1
  %58 = load %Array*, %Array** %56
  %59 = load %Qubit*, %Qubit** %57
  %60 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %61 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 1
  %62 = load double, double* %61
  %63 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 2
  %64 = load %Array*, %Array** %63
  %65 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 3
  %66 = load i2, i2* %65
  %67 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 4
  %68 = load { %Array* }*, { %Array* }** %67
  %69 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %70 = bitcast %Tuple* %69 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %71 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %70, i64 0, i32 0
  %72 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %70, i64 0, i32 1
  %73 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %70, i64 0, i32 2
  %74 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %70, i64 0, i32 3
  %75 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %70, i64 0, i32 4
  store double %62, double* %71
  store %Array* %64, %Array** %72
  call void @__quantum__rt__array_reference(%Array* %64)
  store i2 %66, i2* %73
  store { %Array* }* %68, { %Array* }** %74
  %76 = getelementptr { %Array* }, { %Array* }* %68, i64 0, i32 0
  %77 = load %Array*, %Array** %76
  call void @__quantum__rt__array_reference(%Array* %77)
  %78 = bitcast { %Array* }* %68 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %78)
  store %Qubit* %59, %Qubit** %75
  %79 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %80 = bitcast %Tuple* %79 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %81 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %80, i64 0, i32 0
  %82 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %80, i64 0, i32 1
  store %Array* %58, %Array** %81
  call void @__quantum__rt__array_reference(%Array* %58)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %70, { double, %Array*, i2, { %Array* }*, %Qubit* }** %82
  call void @__quantum__rt__array_reference(%Array* %64)
  call void @__quantum__rt__array_reference(%Array* %77)
  call void @__quantum__rt__tuple_reference(%Tuple* %78)
  call void @__quantum__rt__tuple_reference(%Tuple* %69)
  %83 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %60, i64 0, i32 0
  %84 = load %Callable*, %Callable** %83
  %85 = call %Callable* @__quantum__rt__callable_copy(%Callable* %84, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %85)
  call void @__quantum__rt__callable_make_controlled(%Callable* %85)
  call void @__quantum__rt__callable_invoke(%Callable* %85, %Tuple* %79, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %64)
  call void @__quantum__rt__array_unreference(%Array* %77)
  call void @__quantum__rt__tuple_unreference(%Tuple* %78)
  call void @__quantum__rt__tuple_unreference(%Tuple* %69)
  call void @__quantum__rt__array_unreference(%Array* %58)
  call void @__quantum__rt__array_unreference(%Array* %64)
  call void @__quantum__rt__array_unreference(%Array* %77)
  call void @__quantum__rt__tuple_unreference(%Tuple* %78)
  call void @__quantum__rt__tuple_unreference(%Tuple* %69)
  call void @__quantum__rt__tuple_unreference(%Tuple* %79)
  call void @__quantum__rt__callable_unreference(%Callable* %85)
  ret void

entry3:                                           ; No predecessors!
  %86 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %87 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %86, i64 0, i32 0
  %88 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %86, i64 0, i32 1
  %89 = load %Array*, %Array** %87
  %90 = load %Qubit*, %Qubit** %88
  %91 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %92 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 1
  %93 = load double, double* %92
  %94 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 2
  %95 = load %Array*, %Array** %94
  %96 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 3
  %97 = load i2, i2* %96
  %98 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 4
  %99 = load { %Array* }*, { %Array* }** %98
  %100 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %101 = bitcast %Tuple* %100 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %102 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 0
  %103 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 1
  %104 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 2
  %105 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 3
  %106 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, i64 0, i32 4
  store double %93, double* %102
  store %Array* %95, %Array** %103
  call void @__quantum__rt__array_reference(%Array* %95)
  store i2 %97, i2* %104
  store { %Array* }* %99, { %Array* }** %105
  %107 = getelementptr { %Array* }, { %Array* }* %99, i64 0, i32 0
  %108 = load %Array*, %Array** %107
  call void @__quantum__rt__array_reference(%Array* %108)
  %109 = bitcast { %Array* }* %99 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %109)
  store %Qubit* %90, %Qubit** %106
  %110 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %111 = bitcast %Tuple* %110 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %112 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %111, i64 0, i32 0
  %113 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %111, i64 0, i32 1
  store %Array* %89, %Array** %112
  call void @__quantum__rt__array_reference(%Array* %89)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %101, { double, %Array*, i2, { %Array* }*, %Qubit* }** %113
  call void @__quantum__rt__array_reference(%Array* %95)
  call void @__quantum__rt__array_reference(%Array* %108)
  call void @__quantum__rt__tuple_reference(%Tuple* %109)
  call void @__quantum__rt__tuple_reference(%Tuple* %100)
  %114 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %91, i64 0, i32 0
  %115 = load %Callable*, %Callable** %114
  %116 = call %Callable* @__quantum__rt__callable_copy(%Callable* %115, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %116)
  call void @__quantum__rt__callable_make_controlled(%Callable* %116)
  call void @__quantum__rt__callable_invoke(%Callable* %116, %Tuple* %110, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %95)
  call void @__quantum__rt__array_unreference(%Array* %108)
  call void @__quantum__rt__tuple_unreference(%Tuple* %109)
  call void @__quantum__rt__tuple_unreference(%Tuple* %100)
  call void @__quantum__rt__array_unreference(%Array* %89)
  call void @__quantum__rt__array_unreference(%Array* %95)
  call void @__quantum__rt__array_unreference(%Array* %108)
  call void @__quantum__rt__tuple_unreference(%Tuple* %109)
  call void @__quantum__rt__tuple_unreference(%Tuple* %100)
  call void @__quantum__rt__tuple_unreference(%Tuple* %110)
  call void @__quantum__rt__callable_unreference(%Callable* %116)
  ret void

entry4:                                           ; No predecessors!
  %117 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %118 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %117, i64 0, i32 0
  %119 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %117, i64 0, i32 1
  %120 = load %Array*, %Array** %118
  %121 = load %Qubit*, %Qubit** %119
  %122 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %123 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %122, i64 0, i32 1
  %124 = load double, double* %123
  %125 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %122, i64 0, i32 2
  %126 = load %Array*, %Array** %125
  %127 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %122, i64 0, i32 3
  %128 = load i2, i2* %127
  %129 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %122, i64 0, i32 4
  %130 = load { %Array* }*, { %Array* }** %129
  %131 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %132 = bitcast %Tuple* %131 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %133 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %132, i64 0, i32 0
  %134 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %132, i64 0, i32 1
  %135 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %132, i64 0, i32 2
  %136 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %132, i64 0, i32 3
  %137 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %132, i64 0, i32 4
  store double %124, double* %133
  store %Array* %126, %Array** %134
  call void @__quantum__rt__array_reference(%Array* %126)
  store i2 %128, i2* %135
  store { %Array* }* %130, { %Array* }** %136
  %138 = getelementptr { %Array* }, { %Array* }* %130, i64 0, i32 0
  %139 = load %Array*, %Array** %138
  call void @__quantum__rt__array_reference(%Array* %139)
  %140 = bitcast { %Array* }* %130 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %140)
  store %Qubit* %121, %Qubit** %137
  %141 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %142 = bitcast %Tuple* %141 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %143 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %142, i64 0, i32 0
  %144 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %142, i64 0, i32 1
  store %Array* %120, %Array** %143
  call void @__quantum__rt__array_reference(%Array* %120)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %132, { double, %Array*, i2, { %Array* }*, %Qubit* }** %144
  call void @__quantum__rt__array_reference(%Array* %126)
  call void @__quantum__rt__array_reference(%Array* %139)
  call void @__quantum__rt__tuple_reference(%Tuple* %140)
  call void @__quantum__rt__tuple_reference(%Tuple* %131)
  %145 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %122, i64 0, i32 0
  %146 = load %Callable*, %Callable** %145
  %147 = call %Callable* @__quantum__rt__callable_copy(%Callable* %146, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %147)
  call void @__quantum__rt__callable_make_controlled(%Callable* %147)
  call void @__quantum__rt__callable_invoke(%Callable* %147, %Tuple* %141, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %126)
  call void @__quantum__rt__array_unreference(%Array* %139)
  call void @__quantum__rt__tuple_unreference(%Tuple* %140)
  call void @__quantum__rt__tuple_unreference(%Tuple* %131)
  call void @__quantum__rt__array_unreference(%Array* %120)
  call void @__quantum__rt__array_unreference(%Array* %126)
  call void @__quantum__rt__array_unreference(%Array* %139)
  call void @__quantum__rt__tuple_unreference(%Tuple* %140)
  call void @__quantum__rt__tuple_unreference(%Tuple* %131)
  call void @__quantum__rt__tuple_unreference(%Tuple* %141)
  call void @__quantum__rt__callable_unreference(%Callable* %147)
  ret void

entry5:                                           ; No predecessors!
  %148 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %149 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %148, i64 0, i32 0
  %150 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %148, i64 0, i32 1
  %151 = load %Array*, %Array** %149
  %152 = load %Qubit*, %Qubit** %150
  %153 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %154 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %153, i64 0, i32 1
  %155 = load double, double* %154
  %156 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %153, i64 0, i32 2
  %157 = load %Array*, %Array** %156
  %158 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %153, i64 0, i32 3
  %159 = load i2, i2* %158
  %160 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %153, i64 0, i32 4
  %161 = load { %Array* }*, { %Array* }** %160
  %162 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %163 = bitcast %Tuple* %162 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %164 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %163, i64 0, i32 0
  %165 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %163, i64 0, i32 1
  %166 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %163, i64 0, i32 2
  %167 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %163, i64 0, i32 3
  %168 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %163, i64 0, i32 4
  store double %155, double* %164
  store %Array* %157, %Array** %165
  call void @__quantum__rt__array_reference(%Array* %157)
  store i2 %159, i2* %166
  store { %Array* }* %161, { %Array* }** %167
  %169 = getelementptr { %Array* }, { %Array* }* %161, i64 0, i32 0
  %170 = load %Array*, %Array** %169
  call void @__quantum__rt__array_reference(%Array* %170)
  %171 = bitcast { %Array* }* %161 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %171)
  store %Qubit* %152, %Qubit** %168
  %172 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %173 = bitcast %Tuple* %172 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %174 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %173, i64 0, i32 0
  %175 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %173, i64 0, i32 1
  store %Array* %151, %Array** %174
  call void @__quantum__rt__array_reference(%Array* %151)
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %163, { double, %Array*, i2, { %Array* }*, %Qubit* }** %175
  call void @__quantum__rt__array_reference(%Array* %157)
  call void @__quantum__rt__array_reference(%Array* %170)
  call void @__quantum__rt__tuple_reference(%Tuple* %171)
  call void @__quantum__rt__tuple_reference(%Tuple* %162)
  %176 = getelementptr { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %153, i64 0, i32 0
  %177 = load %Callable*, %Callable** %176
  %178 = call %Callable* @__quantum__rt__callable_copy(%Callable* %177, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %178)
  call void @__quantum__rt__callable_make_controlled(%Callable* %178)
  call void @__quantum__rt__callable_invoke(%Callable* %178, %Tuple* %172, %Tuple* %result-tuple)
  call void @__quantum__rt__array_unreference(%Array* %157)
  call void @__quantum__rt__array_unreference(%Array* %170)
  call void @__quantum__rt__tuple_unreference(%Tuple* %171)
  call void @__quantum__rt__tuple_unreference(%Tuple* %162)
  call void @__quantum__rt__array_unreference(%Array* %151)
  call void @__quantum__rt__array_unreference(%Array* %157)
  call void @__quantum__rt__array_unreference(%Array* %170)
  call void @__quantum__rt__tuple_unreference(%Tuple* %171)
  call void @__quantum__rt__tuple_unreference(%Tuple* %162)
  call void @__quantum__rt__tuple_unreference(%Tuple* %172)
  call void @__quantum__rt__callable_unreference(%Callable* %178)
  ret void
}

define i1 @Microsoft__Quantum__Canon____QsRef0__AnyOutsideToleranceCP____body(double %tolerance, %Array* %coefficients) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %10)
  %13 = bitcast i8* %12 to { double, double }**
  %coefficient = load { double, double }*, { double, double }** %13
  %14 = bitcast { double, double }* %coefficient to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %14)
  %15 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %coefficient)
  %16 = fcmp ogt double %15, %tolerance
  br i1 %16, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  call void @__quantum__rt__tuple_remove_access(%Tuple* %14)
  %17 = sub i64 %0, 1
  br label %header__3

continue__1:                                      ; preds = %body__2
  call void @__quantum__rt__tuple_remove_access(%Tuple* %14)
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %18 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %19 = sub i64 %0, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__3 ]
  %21 = icmp sle i64 %20, %17
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %20)
  %23 = bitcast i8* %22 to { double, double }**
  %24 = load { double, double }*, { double, double }** %23
  %25 = bitcast { double, double }* %24 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %25)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %26 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  ret i1 true

header__4:                                        ; preds = %exiting__4, %exit__2
  %27 = phi i64 [ 0, %exit__2 ], [ %33, %exiting__4 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %27)
  %30 = bitcast i8* %29 to { double, double }**
  %31 = load { double, double }*, { double, double }** %30
  %32 = bitcast { double, double }* %31 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %32)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %33 = add i64 %27, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  ret i1 false
}

declare i64 @__quantum__qis__rangeend__body(%Range)

declare void @__quantum__rt__callable_reference(%Callable*)

define %Array* @Microsoft__Quantum__Arrays___8a7504a8af96425bad591eeef314a38e_Padded__body(i64 %nElementsTotal, { double, double }* %defaultElement, %Array* %inputArray) {
entry:
  %0 = bitcast { double, double }* %defaultElement to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %0)
  %nElementsInitial = call i64 @__quantum__rt__array_get_size_1d(%Array* %inputArray)
  %1 = sub i64 %nElementsInitial, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputArray, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %inputArray)
  %nAbsElementsTotal = call i64 @__quantum__qis__absi__body(i64 %nElementsTotal)
  %9 = icmp sge i64 %nAbsElementsTotal, %nElementsInitial
  %10 = call %String* @__quantum__rt__string_create(i32 70, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %9, i1 true, %String* %10)
  %nElementsPad = sub i64 %nAbsElementsTotal, %nElementsInitial
  %padArray = call %Array* @Microsoft__Quantum__Arrays___69b581947aa54b2b945a6fdee1aa50a1_ConstantArray__body(i64 %nElementsPad, { double, double }* %defaultElement)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %padArray)
  %12 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %18)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %padArray)
  %20 = icmp sge i64 %nElementsTotal, 0
  br i1 %20, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__2
  %21 = call %Array* @__quantum__rt__array_concatenate(%Array* %padArray, %Array* %inputArray)
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__2
  %22 = call %Array* @__quantum__rt__array_concatenate(%Array* %inputArray, %Array* %padArray)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %23 = phi %Array* [ %21, %condTrue__1 ], [ %22, %condFalse__1 ]
  call void @__quantum__rt__tuple_remove_access(%Tuple* %0)
  %24 = sub i64 %nElementsInitial, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %condContinue__1
  %25 = phi i64 [ 0, %condContinue__1 ], [ %31, %exiting__3 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputArray, i64 %25)
  %28 = bitcast i8* %27 to { double, double }**
  %29 = load { double, double }*, { double, double }** %28
  %30 = bitcast { double, double }* %29 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %30)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %25, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %inputArray)
  %32 = sub i64 %11, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %33 = phi i64 [ 0, %exit__3 ], [ %39, %exiting__4 ]
  %34 = icmp sle i64 %33, %32
  br i1 %34, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %33)
  %36 = bitcast i8* %35 to { double, double }**
  %37 = load { double, double }*, { double, double }** %36
  %38 = bitcast { double, double }* %37 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %38)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %39 = add i64 %33, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_remove_access(%Array* %padArray)
  call void @__quantum__rt__string_unreference(%String* %10)
  %40 = sub i64 %11, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %41 = phi i64 [ 0, %exit__4 ], [ %47, %exiting__5 ]
  %42 = icmp sle i64 %41, %40
  br i1 %42, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %41)
  %44 = bitcast i8* %43 to { double, double }**
  %45 = load { double, double }*, { double, double }** %44
  %46 = bitcast { double, double }* %45 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %46)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %47 = add i64 %41, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %padArray)
  ret %Array* %23
}

declare i64 @__quantum__rt__int_power(i64, i32)

define %Callable* @Microsoft__Quantum__Canon___81ec7e8f95834cfcb64fd39e9c4f9368_BoundCA__body(%Array* %operations) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %operations)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array* }*
  %2 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i64 0, i32 1
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA__, %Tuple* null)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_reference(%Callable* %11)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_reference(%Array* %operations)
  store %Callable* %4, %Callable** %2
  store %Array* %operations, %Array** %3
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.11, %Tuple* %0)
  call void @__quantum__rt__array_remove_access(%Array* %operations)
  ret %Callable* %13
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, { %Array* }* }*
  %1 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Callable*, %Callable** %1
  %4 = load { %Array* }*, { %Array* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____body(%Callable* %3, { %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, { %Array* }* }*
  %1 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Callable*, %Callable** %1
  %4 = load { %Array* }*, { %Array* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____adj(%Callable* %3, { %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, { %Array* }* }* }*
  %1 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Callable*, { %Array* }* }*, { %Callable*, { %Array* }* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____ctl(%Array* %3, { %Callable*, { %Array* }* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, { %Array* }* }* }*
  %1 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Callable*, { %Array* }* }*, { %Callable*, { %Array* }* }** %2
  call void @Microsoft__Quantum__Preparation____QsRef0__ApplyToLittleEndian____ctladj(%Array* %3, { %Callable*, { %Array* }* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__body(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %9 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_add_access(%Array* %10)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %11)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__body(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  %12 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %18)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %10)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %11)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__adj(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %9 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_add_access(%Array* %10)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %11)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__adj(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  %12 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %18)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %10)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %11)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %coefficients = load %Array*, %Array** %1
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %4)
  %7 = bitcast i8* %6 to { double, double }**
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %9)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %11 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %11
  %12 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %13 = load %Array*, %Array** %12
  call void @__quantum__rt__array_add_access(%Array* %13)
  %14 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %14)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { double, %Array*, { %Array* }* }*
  %17 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i64 0, i32 0
  %18 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i64 0, i32 1
  %19 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i64 0, i32 2
  %20 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %26)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  call void @__quantum__rt__array_reference(%Array* %13)
  call void @__quantum__rt__tuple_reference(%Tuple* %14)
  store double 0.000000e+00, double* %17
  store %Array* %coefficients, %Array** %18
  store { %Array* }* %qubits, { %Array* }** %19
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %16)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  %28 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %34)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %13)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %14)
  %36 = sub i64 %2, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %37 = phi i64 [ 0, %exit__3 ], [ %43, %exiting__4 ]
  %38 = icmp sle i64 %37, %36
  br i1 %38, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %37)
  %40 = bitcast i8* %39 to { double, double }**
  %41 = load { double, double }*, { double, double }** %40
  %42 = bitcast { double, double }* %41 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %42)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %43 = add i64 %37, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %coefficients)
  call void @__quantum__rt__array_unreference(%Array* %13)
  call void @__quantum__rt__tuple_unreference(%Tuple* %14)
  call void @__quantum__rt__tuple_unreference(%Tuple* %15)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %coefficients = load %Array*, %Array** %1
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %4)
  %7 = bitcast i8* %6 to { double, double }**
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %9)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %11 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %11
  %12 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %13 = load %Array*, %Array** %12
  call void @__quantum__rt__array_add_access(%Array* %13)
  %14 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %14)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { double, %Array*, { %Array* }* }*
  %17 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i64 0, i32 0
  %18 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i64 0, i32 1
  %19 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i64 0, i32 2
  %20 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %26)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  call void @__quantum__rt__array_reference(%Array* %13)
  call void @__quantum__rt__tuple_reference(%Tuple* %14)
  store double 0.000000e+00, double* %17
  store %Array* %coefficients, %Array** %18
  store { %Array* }* %qubits, { %Array* }** %19
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %16)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  %28 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %34)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %13)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %14)
  %36 = sub i64 %2, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %37 = phi i64 [ 0, %exit__3 ], [ %43, %exiting__4 ]
  %38 = icmp sle i64 %37, %36
  br i1 %38, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %37)
  %40 = bitcast i8* %39 to { double, double }**
  %41 = load { double, double }*, { double, double }** %40
  %42 = bitcast { double, double }* %41 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %42)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %43 = add i64 %37, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %coefficients)
  call void @__quantum__rt__array_unreference(%Array* %13)
  call void @__quantum__rt__tuple_unreference(%Tuple* %14)
  call void @__quantum__rt__tuple_unreference(%Tuple* %15)
  ret void
}

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____body(double %angle, i64 %idxTarget, %Array* %register) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %register)
  %paulis__inline__1 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis__inline__1, i64 0)
  %1 = bitcast i8* %0 to i2*
  %2 = load i2, i2* @PauliI
  store i2 %2, i2* %1
  call void @__quantum__rt__array_add_access(%Array* %paulis__inline__1)
  %qubits__inline__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__inline__1, i64 0)
  %4 = bitcast i8* %3 to %Qubit**
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %6 = bitcast i8* %5 to %Qubit**
  %7 = load %Qubit*, %Qubit** %6
  store %Qubit* %7, %Qubit** %4
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__1)
  call void @__quantum__qis__exp__body(%Array* %paulis__inline__1, double %angle, %Array* %qubits__inline__1)
  call void @__quantum__rt__array_remove_access(%Array* %paulis__inline__1)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %qubits__inline__1)
  call void @__quantum__rt__array_remove_access(%Array* %register)
  ret void
}

declare void @__quantum__qis__exp__body(%Array*, double, %Array*)

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____adj(double %angle, i64 %idxTarget, %Array* %register) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %register)
  %paulis__inline__1 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis__inline__1, i64 0)
  %1 = bitcast i8* %0 to i2*
  %2 = load i2, i2* @PauliI
  store i2 %2, i2* %1
  call void @__quantum__rt__array_add_access(%Array* %paulis__inline__1)
  %qubits__inline__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__inline__1, i64 0)
  %4 = bitcast i8* %3 to %Qubit**
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %6 = bitcast i8* %5 to %Qubit**
  %7 = load %Qubit*, %Qubit** %6
  store %Qubit* %7, %Qubit** %4
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__1)
  call void @__quantum__qis__exp__adj(%Array* %paulis__inline__1, double %angle, %Array* %qubits__inline__1)
  call void @__quantum__rt__array_remove_access(%Array* %paulis__inline__1)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %qubits__inline__1)
  call void @__quantum__rt__array_remove_access(%Array* %register)
  ret void
}

declare void @__quantum__qis__exp__adj(%Array*, double, %Array*)

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____ctl(%Array* %__controlQubits__, { double, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 0
  %angle = load double, double* %1
  %2 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 1
  %idxTarget = load i64, i64* %2
  %3 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 2
  %register = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %register)
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %paulis__inline__1 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis__inline__1, i64 0)
  %5 = bitcast i8* %4 to i2*
  %6 = load i2, i2* @PauliI
  store i2 %6, i2* %5
  call void @__quantum__rt__array_add_access(%Array* %paulis__inline__1)
  %qubits__inline__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__inline__1, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %10 = bitcast i8* %9 to %Qubit**
  %11 = load %Qubit*, %Qubit** %10
  store %Qubit* %11, %Qubit** %8
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, double, %Array* }*
  %14 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %13, i64 0, i32 1
  %16 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %13, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %paulis__inline__1)
  call void @__quantum__rt__array_reference(%Array* %qubits__inline__1)
  store %Array* %paulis__inline__1, %Array** %14
  store double %angle, double* %15
  store %Array* %qubits__inline__1, %Array** %16
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %13)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %paulis__inline__1)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %qubits__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %qubits__inline__1)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %register)
  ret void
}

declare void @__quantum__qis__exp__ctl(%Array*, { %Array*, double, %Array* }*)

define void @Microsoft__Quantum__Preparation____QsRef0__ApplyGlobalRotationStep____ctladj(%Array* %__controlQubits__, { double, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 0
  %angle = load double, double* %1
  %2 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 1
  %idxTarget = load i64, i64* %2
  %3 = getelementptr { double, i64, %Array* }, { double, i64, %Array* }* %0, i64 0, i32 2
  %register = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %register)
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %paulis__inline__1 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis__inline__1, i64 0)
  %5 = bitcast i8* %4 to i2*
  %6 = load i2, i2* @PauliI
  store i2 %6, i2* %5
  call void @__quantum__rt__array_add_access(%Array* %paulis__inline__1)
  %qubits__inline__1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__inline__1, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %10 = bitcast i8* %9 to %Qubit**
  %11 = load %Qubit*, %Qubit** %10
  store %Qubit* %11, %Qubit** %8
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, double, %Array* }*
  %14 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %13, i64 0, i32 1
  %16 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %13, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %paulis__inline__1)
  call void @__quantum__rt__array_reference(%Array* %qubits__inline__1)
  store %Array* %paulis__inline__1, %Array** %14
  store double %angle, double* %15
  store %Array* %qubits__inline__1, %Array** %16
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %13)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %paulis__inline__1)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %qubits__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__1)
  call void @__quantum__rt__array_unreference(%Array* %qubits__inline__1)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %register)
  ret void
}

declare void @__quantum__qis__exp__ctladj(%Array*, { %Array*, double, %Array* }*)

define %Callable* @Microsoft__Quantum__Preparation__StatePreparationPositiveCoefficients__body(%Array* %coefficients) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array* }*
  %2 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i64 0, i32 1
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation__PrepareArbitraryStateD, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  store %Callable* %4, %Callable** %2
  store %Array* %coefficients, %Array** %3
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.7, %Tuple* %0)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  ret %Callable* %5
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body(%Array* %3, { %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array* }*, { %Array* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj(%Array* %3, { %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, { %Array* }* }* }*
  %1 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, { %Array* }* }* }, { %Array*, { %Array*, { %Array* }* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, { %Array* }* }*, { %Array*, { %Array* }* }** %2
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj(%Array* %3, { %Array*, { %Array* }* }* %4)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_add_access(%Array* %1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__body(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_add_access(%Array* %1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__adj(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %coefficients = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %2
  %3 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %4)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %5)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array*, { %Array* }* }*
  %8 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i64 0, i32 0
  %9 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i64 0, i32 1
  %10 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  call void @__quantum__rt__array_reference(%Array* %4)
  call void @__quantum__rt__tuple_reference(%Tuple* %5)
  store double 0.000000e+00, double* %8
  store %Array* %coefficients, %Array** %9
  store { %Array* }* %qubits, { %Array* }** %10
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %7)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %4)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__array_unreference(%Array* %coefficients)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %5)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  ret void
}

define void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 0
  %coefficients = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %2 = getelementptr { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i64 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %2
  %3 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %4 = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %4)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %5)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array*, { %Array* }* }*
  %8 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i64 0, i32 0
  %9 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i64 0, i32 1
  %10 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %coefficients)
  call void @__quantum__rt__array_reference(%Array* %4)
  call void @__quantum__rt__tuple_reference(%Tuple* %5)
  store double 0.000000e+00, double* %8
  store %Array* %coefficients, %Array** %9
  store { %Array* }* %qubits, { %Array* }** %10
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %7)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %4)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__array_unreference(%Array* %coefficients)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %5)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  ret void
}

define { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionSet__body(%Callable* %__Item1__) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr { %Callable* }, { %Callable* }* %1, i64 0, i32 0
  store %Callable* %__Item1__, %Callable** %2
  call void @__quantum__rt__callable_reference(%Callable* %__Item1__)
  ret { %Callable* }* %1
}

define { %Callable* }* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithm__body(double %trotterStepSize, i64 %trotterOrder) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, i64 }* getelementptr ({ %Callable*, double, i64 }, { %Callable*, double, i64 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, double, i64 }*
  %2 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %1, i64 0, i32 1
  %4 = getelementptr { %Callable*, double, i64 }, { %Callable*, double, i64 }* %1, i64 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl, %Tuple* null)
  store %Callable* %5, %Callable** %2
  store double %trotterStepSize, double* %3
  store i64 %trotterOrder, i64* %4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.8, %Tuple* %0)
  %7 = call { %Callable* }* @Microsoft__Quantum__Simulation__SimulationAlgorithm__body(%Callable* %6)
  call void @__quantum__rt__callable_unreference(%Callable* %6)
  ret { %Callable* }* %7
}

define { %Callable* }* @Microsoft__Quantum__Simulation__SimulationAlgorithm__body(%Callable* %__Item1__) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr { %Callable* }, { %Callable* }* %1, i64 0, i32 0
  store %Callable* %__Item1__, %Callable** %2
  call void @__quantum__rt__callable_reference(%Callable* %__Item1__)
  ret { %Callable* }* %1
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %1 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 3
  %5 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 4
  %6 = load double, double* %1
  %7 = load i64, i64* %2
  %8 = load double, double* %3
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4
  %10 = load %Array*, %Array** %5
  call void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__body(double %6, i64 %7, double %8, { { %Callable* }*, { i64, %Callable* }* }* %9, %Array* %10)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %1 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 3
  %5 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 4
  %6 = load double, double* %1
  %7 = load i64, i64* %2
  %8 = load double, double* %3
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4
  %10 = load %Array*, %Array** %5
  call void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__adj(double %6, i64 %7, double %8, { { %Callable* }*, { i64, %Callable* }* }* %9, %Array* %10)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2
  call void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctl(%Array* %3, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2
  call void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctladj(%Array* %3, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %idx, double %stepsize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %evolutionSet = load { %Callable* }*, { %Callable* }** %0
  %1 = bitcast { %Callable* }* %evolutionSet to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %1)
  %2 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %generatorSystem = load { i64, %Callable* }*, { i64, %Callable* }** %2
  %3 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %3)
  %4 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %4)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__tuple_add_access(%Tuple* %1)
  call void @__quantum__rt__tuple_add_access(%Tuple* %3)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i64 0, i32 0
  %nTerms = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i64 0, i32 1
  %generatorSystemFunction = load %Callable*, %Callable** %6
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { i64 }*
  %9 = getelementptr { i64 }, { i64 }* %8, i64 0, i32 0
  store i64 %idx, i64* %9
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %generatorSystemFunction, %Tuple* %7, %Tuple* %10)
  %11 = bitcast %Tuple* %10 to { { { %Array*, %Array* }*, %Array* }* }*
  %12 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %11, i64 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %12
  %13 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %14 = load { %Array*, %Array* }*, { %Array*, %Array* }** %13
  %15 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %14, i64 0, i32 0
  %16 = load %Array*, %Array** %15
  call void @__quantum__rt__array_add_access(%Array* %16)
  %17 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %14, i64 0, i32 1
  %18 = load %Array*, %Array** %17
  call void @__quantum__rt__array_add_access(%Array* %18)
  %19 = bitcast { %Array*, %Array* }* %14 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %19)
  %20 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %21 = load %Array*, %Array** %20
  call void @__quantum__rt__array_add_access(%Array* %21)
  %22 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %22)
  %23 = getelementptr { %Callable* }, { %Callable* }* %evolutionSet, i64 0, i32 0
  %24 = load %Callable*, %Callable** %23
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %22, %Tuple* %25)
  %26 = bitcast %Tuple* %25 to { { %Callable* }* }*
  %27 = getelementptr { { %Callable* }* }, { { %Callable* }* }* %26, i64 0, i32 0
  %28 = load { %Callable* }*, { %Callable* }** %27
  %29 = getelementptr { %Callable* }, { %Callable* }* %28, i64 0, i32 0
  %30 = load %Callable*, %Callable** %29
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { double, %Array* }*
  %33 = getelementptr { double, %Array* }, { double, %Array* }* %32, i64 0, i32 0
  %34 = getelementptr { double, %Array* }, { double, %Array* }* %32, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store double %stepsize, double* %33
  store %Array* %qubits, %Array** %34
  call void @__quantum__rt__callable_invoke(%Callable* %30, %Tuple* %31, %Tuple* null)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %3)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %3)
  call void @__quantum__rt__array_remove_access(%Array* %16)
  call void @__quantum__rt__array_remove_access(%Array* %18)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %19)
  call void @__quantum__rt__array_remove_access(%Array* %21)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %22)
  call void @__quantum__rt__tuple_unreference(%Tuple* %7)
  call void @__quantum__rt__array_unreference(%Array* %16)
  call void @__quantum__rt__array_unreference(%Array* %18)
  call void @__quantum__rt__tuple_unreference(%Tuple* %19)
  call void @__quantum__rt__array_unreference(%Array* %21)
  call void @__quantum__rt__tuple_unreference(%Tuple* %22)
  call void @__quantum__rt__tuple_unreference(%Tuple* %10)
  call void @__quantum__rt__callable_unreference(%Callable* %30)
  %35 = bitcast { %Callable* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %35)
  call void @__quantum__rt__tuple_unreference(%Tuple* %25)
  call void @__quantum__rt__array_unreference(%Array* %qubits)
  call void @__quantum__rt__tuple_unreference(%Tuple* %31)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__adj({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %idx, double %stepsize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %__qsVar0__evolutionSet__ = load { %Callable* }*, { %Callable* }** %0
  %1 = bitcast { %Callable* }* %__qsVar0__evolutionSet__ to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %1)
  %2 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %__qsVar1__generatorSystem__ = load { i64, %Callable* }*, { i64, %Callable* }** %2
  %3 = bitcast { i64, %Callable* }* %__qsVar1__generatorSystem__ to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %3)
  %4 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %4)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__tuple_add_access(%Tuple* %1)
  call void @__quantum__rt__tuple_add_access(%Tuple* %3)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i64 0, i32 0
  %__qsVar2__nTerms__ = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i64 0, i32 1
  %__qsVar3__generatorSystemFunction__ = load %Callable*, %Callable** %6
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { i64 }*
  %9 = getelementptr { i64 }, { i64 }* %8, i64 0, i32 0
  store i64 %idx, i64* %9
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__generatorSystemFunction__, %Tuple* %7, %Tuple* %10)
  %11 = bitcast %Tuple* %10 to { { { %Array*, %Array* }*, %Array* }* }*
  %12 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %11, i64 0, i32 0
  %__qsVar4__generatorIndex__ = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %12
  %13 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i64 0, i32 0
  %14 = load { %Array*, %Array* }*, { %Array*, %Array* }** %13
  %15 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %14, i64 0, i32 0
  %16 = load %Array*, %Array** %15
  call void @__quantum__rt__array_add_access(%Array* %16)
  %17 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %14, i64 0, i32 1
  %18 = load %Array*, %Array** %17
  call void @__quantum__rt__array_add_access(%Array* %18)
  %19 = bitcast { %Array*, %Array* }* %14 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %19)
  %20 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i64 0, i32 1
  %21 = load %Array*, %Array** %20
  call void @__quantum__rt__array_add_access(%Array* %21)
  %22 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__ to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %22)
  %23 = getelementptr { %Callable* }, { %Callable* }* %__qsVar0__evolutionSet__, i64 0, i32 0
  %24 = load %Callable*, %Callable** %23
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %22, %Tuple* %25)
  %26 = bitcast %Tuple* %25 to { { %Callable* }* }*
  %27 = getelementptr { { %Callable* }* }, { { %Callable* }* }* %26, i64 0, i32 0
  %28 = load { %Callable* }*, { %Callable* }** %27
  %29 = getelementptr { %Callable* }, { %Callable* }* %28, i64 0, i32 0
  %30 = load %Callable*, %Callable** %29
  %31 = call %Callable* @__quantum__rt__callable_copy(%Callable* %30, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %31)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { double, %Array* }*
  %34 = getelementptr { double, %Array* }, { double, %Array* }* %33, i64 0, i32 0
  %35 = getelementptr { double, %Array* }, { double, %Array* }* %33, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store double %stepsize, double* %34
  store %Array* %qubits, %Array** %35
  call void @__quantum__rt__callable_invoke(%Callable* %31, %Tuple* %32, %Tuple* null)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %3)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %3)
  call void @__quantum__rt__array_remove_access(%Array* %16)
  call void @__quantum__rt__array_remove_access(%Array* %18)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %19)
  call void @__quantum__rt__array_remove_access(%Array* %21)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %22)
  call void @__quantum__rt__tuple_unreference(%Tuple* %7)
  call void @__quantum__rt__array_unreference(%Array* %16)
  call void @__quantum__rt__array_unreference(%Array* %18)
  call void @__quantum__rt__tuple_unreference(%Tuple* %19)
  call void @__quantum__rt__array_unreference(%Array* %21)
  call void @__quantum__rt__tuple_unreference(%Tuple* %22)
  call void @__quantum__rt__tuple_unreference(%Tuple* %10)
  call void @__quantum__rt__callable_unreference(%Callable* %30)
  %36 = bitcast { %Callable* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %36)
  call void @__quantum__rt__tuple_unreference(%Tuple* %25)
  call void @__quantum__rt__callable_unreference(%Callable* %31)
  call void @__quantum__rt__array_unreference(%Array* %qubits)
  call void @__quantum__rt__tuple_unreference(%Tuple* %32)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__ctl(%Array* %__controlQubits__, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 0
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1
  %2 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %evolutionSet = load { %Callable* }*, { %Callable* }** %2
  %3 = bitcast { %Callable* }* %evolutionSet to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %3)
  %4 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %generatorSystem = load { i64, %Callable* }*, { i64, %Callable* }** %4
  %5 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %5)
  %6 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 1
  %idx = load i64, i64* %7
  %8 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 2
  %stepsize = load double, double* %8
  %9 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 3
  %qubits = load %Array*, %Array** %9
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__tuple_add_access(%Tuple* %3)
  call void @__quantum__rt__tuple_add_access(%Tuple* %5)
  %10 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i64 0, i32 0
  %nTerms = load i64, i64* %10
  %11 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i64 0, i32 1
  %generatorSystemFunction = load %Callable*, %Callable** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64 }*
  %14 = getelementptr { i64 }, { i64 }* %13, i64 0, i32 0
  store i64 %idx, i64* %14
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %generatorSystemFunction, %Tuple* %12, %Tuple* %15)
  %16 = bitcast %Tuple* %15 to { { { %Array*, %Array* }*, %Array* }* }*
  %17 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %16, i64 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %17
  %18 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %19 = load { %Array*, %Array* }*, { %Array*, %Array* }** %18
  %20 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 0
  %21 = load %Array*, %Array** %20
  call void @__quantum__rt__array_add_access(%Array* %21)
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 1
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_add_access(%Array* %23)
  %24 = bitcast { %Array*, %Array* }* %19 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %24)
  %25 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %26 = load %Array*, %Array** %25
  call void @__quantum__rt__array_add_access(%Array* %26)
  %27 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %27)
  %28 = getelementptr { %Callable* }, { %Callable* }* %evolutionSet, i64 0, i32 0
  %29 = load %Callable*, %Callable** %28
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %27, %Tuple* %30)
  %31 = bitcast %Tuple* %30 to { { %Callable* }* }*
  %32 = getelementptr { { %Callable* }* }, { { %Callable* }* }* %31, i64 0, i32 0
  %33 = load { %Callable* }*, { %Callable* }** %32
  %34 = getelementptr { %Callable* }, { %Callable* }* %33, i64 0, i32 0
  %35 = load %Callable*, %Callable** %34
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %38 = bitcast %Tuple* %37 to { %Array*, { double, %Array* }* }*
  %39 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %38, i64 0, i32 0
  %40 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %38, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { double, %Array* }*
  %43 = getelementptr { double, %Array* }, { double, %Array* }* %42, i64 0, i32 0
  %44 = getelementptr { double, %Array* }, { double, %Array* }* %42, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store double %stepsize, double* %43
  store %Array* %qubits, %Array** %44
  store %Array* %__controlQubits__, %Array** %39
  store { double, %Array* }* %42, { double, %Array* }** %40
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %37, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %3)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %3)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__array_remove_access(%Array* %21)
  call void @__quantum__rt__array_remove_access(%Array* %23)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %24)
  call void @__quantum__rt__array_remove_access(%Array* %26)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %27)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__array_unreference(%Array* %21)
  call void @__quantum__rt__array_unreference(%Array* %23)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  call void @__quantum__rt__array_unreference(%Array* %26)
  call void @__quantum__rt__tuple_unreference(%Tuple* %27)
  call void @__quantum__rt__tuple_unreference(%Tuple* %15)
  call void @__quantum__rt__callable_unreference(%Callable* %35)
  %45 = bitcast { %Callable* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %45)
  call void @__quantum__rt__tuple_unreference(%Tuple* %30)
  call void @__quantum__rt__callable_unreference(%Callable* %36)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %qubits)
  call void @__quantum__rt__tuple_unreference(%Tuple* %41)
  call void @__quantum__rt__tuple_unreference(%Tuple* %37)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__ctladj(%Array* %__controlQubits__, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 0
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1
  %2 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %__qsVar0__evolutionSet__ = load { %Callable* }*, { %Callable* }** %2
  %3 = bitcast { %Callable* }* %__qsVar0__evolutionSet__ to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %3)
  %4 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %__qsVar1__generatorSystem__ = load { i64, %Callable* }*, { i64, %Callable* }** %4
  %5 = bitcast { i64, %Callable* }* %__qsVar1__generatorSystem__ to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %5)
  %6 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 1
  %idx = load i64, i64* %7
  %8 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 2
  %stepsize = load double, double* %8
  %9 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 3
  %qubits = load %Array*, %Array** %9
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__tuple_add_access(%Tuple* %3)
  call void @__quantum__rt__tuple_add_access(%Tuple* %5)
  %10 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i64 0, i32 0
  %__qsVar2__nTerms__ = load i64, i64* %10
  %11 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i64 0, i32 1
  %__qsVar3__generatorSystemFunction__ = load %Callable*, %Callable** %11
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64 }*
  %14 = getelementptr { i64 }, { i64 }* %13, i64 0, i32 0
  store i64 %idx, i64* %14
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__generatorSystemFunction__, %Tuple* %12, %Tuple* %15)
  %16 = bitcast %Tuple* %15 to { { { %Array*, %Array* }*, %Array* }* }*
  %17 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %16, i64 0, i32 0
  %__qsVar4__generatorIndex__ = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %17
  %18 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i64 0, i32 0
  %19 = load { %Array*, %Array* }*, { %Array*, %Array* }** %18
  %20 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 0
  %21 = load %Array*, %Array** %20
  call void @__quantum__rt__array_add_access(%Array* %21)
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 1
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_add_access(%Array* %23)
  %24 = bitcast { %Array*, %Array* }* %19 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %24)
  %25 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i64 0, i32 1
  %26 = load %Array*, %Array** %25
  call void @__quantum__rt__array_add_access(%Array* %26)
  %27 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__ to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %27)
  %28 = getelementptr { %Callable* }, { %Callable* }* %__qsVar0__evolutionSet__, i64 0, i32 0
  %29 = load %Callable*, %Callable** %28
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %27, %Tuple* %30)
  %31 = bitcast %Tuple* %30 to { { %Callable* }* }*
  %32 = getelementptr { { %Callable* }* }, { { %Callable* }* }* %31, i64 0, i32 0
  %33 = load { %Callable* }*, { %Callable* }** %32
  %34 = getelementptr { %Callable* }, { %Callable* }* %33, i64 0, i32 0
  %35 = load %Callable*, %Callable** %34
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %36)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %38 = bitcast %Tuple* %37 to { %Array*, { double, %Array* }* }*
  %39 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %38, i64 0, i32 0
  %40 = getelementptr { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %38, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { double, %Array* }*
  %43 = getelementptr { double, %Array* }, { double, %Array* }* %42, i64 0, i32 0
  %44 = getelementptr { double, %Array* }, { double, %Array* }* %42, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store double %stepsize, double* %43
  store %Array* %qubits, %Array** %44
  store %Array* %__controlQubits__, %Array** %39
  store { double, %Array* }* %42, { double, %Array* }** %40
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %37, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %3)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %3)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__array_remove_access(%Array* %21)
  call void @__quantum__rt__array_remove_access(%Array* %23)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %24)
  call void @__quantum__rt__array_remove_access(%Array* %26)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %27)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__array_unreference(%Array* %21)
  call void @__quantum__rt__array_unreference(%Array* %23)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  call void @__quantum__rt__array_unreference(%Array* %26)
  call void @__quantum__rt__tuple_unreference(%Tuple* %27)
  call void @__quantum__rt__tuple_unreference(%Tuple* %15)
  call void @__quantum__rt__callable_unreference(%Callable* %35)
  %45 = bitcast { %Callable* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %45)
  call void @__quantum__rt__tuple_unreference(%Tuple* %30)
  call void @__quantum__rt__callable_unreference(%Callable* %36)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %qubits)
  call void @__quantum__rt__tuple_unreference(%Tuple* %41)
  call void @__quantum__rt__tuple_unreference(%Tuple* %37)
  ret void
}

define { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %0, %Array* %__Item3__) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__Item3__)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %2 = bitcast %Tuple* %1 to { { %Array*, %Array* }*, %Array* }*
  %3 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %2, i64 0, i32 0
  %4 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %2, i64 0, i32 1
  store { %Array*, %Array* }* %0, { %Array*, %Array* }** %3
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_reference(%Array* %6)
  %7 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_reference(%Array* %8)
  %9 = bitcast { %Array*, %Array* }* %0 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %9)
  store %Array* %__Item3__, %Array** %4
  call void @__quantum__rt__array_reference(%Array* %__Item3__)
  call void @__quantum__rt__array_remove_access(%Array* %__Item3__)
  ret { { %Array*, %Array* }*, %Array* }* %2
}

define { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %__Item1__, %Callable* %__Item2__) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64, %Callable* }*
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %1, i64 0, i32 0
  %3 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %1, i64 0, i32 1
  store i64 %__Item1__, i64* %2
  store %Callable* %__Item2__, %Callable** %3
  call void @__quantum__rt__callable_reference(%Callable* %__Item2__)
  ret { i64, %Callable* }* %1
}

define %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %trotterStepSize) {
entry:
  %0 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %evolutionSet = load { %Callable* }*, { %Callable* }** %0
  %1 = bitcast { %Callable* }* %evolutionSet to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %1)
  %2 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %generatorSystem = load { i64, %Callable* }*, { i64, %Callable* }** %2
  %3 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %3)
  %4 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %4)
  call void @__quantum__rt__tuple_add_access(%Tuple* %1)
  call void @__quantum__rt__tuple_add_access(%Tuple* %3)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i64 0, i32 0
  %nTerms = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i64 0, i32 1
  %generatorSystemFunction = load %Callable*, %Callable** %6
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %trotterForm = bitcast %Tuple* %7 to { i64, %Callable* }*
  %8 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %trotterForm, i64 0, i32 0
  %9 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %trotterForm, i64 0, i32 1
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %11 = bitcast %Tuple* %10 to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %12 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %11, i64 0, i32 0
  %13 = getelementptr { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %11, i64 0, i32 1
  %14 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation__TrotterStepImpl, %Tuple* null)
  %15 = getelementptr { %Callable* }, { %Callable* }* %evolutionSet, i64 0, i32 0
  %16 = load %Callable*, %Callable** %15
  call void @__quantum__rt__callable_reference(%Callable* %16)
  call void @__quantum__rt__tuple_reference(%Tuple* %1)
  call void @__quantum__rt__callable_reference(%Callable* %generatorSystemFunction)
  call void @__quantum__rt__tuple_reference(%Tuple* %3)
  call void @__quantum__rt__tuple_reference(%Tuple* %4)
  store %Callable* %14, %Callable** %12
  store { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, { { %Callable* }*, { i64, %Callable* }* }** %13
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.9, %Tuple* %10)
  store i64 %nTerms, i64* %8
  store %Callable* %17, %Callable** %9
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Callable*, double }*
  %20 = getelementptr { %Callable*, double }, { %Callable*, double }* %19, i64 0, i32 0
  %21 = getelementptr { %Callable*, double }, { %Callable*, double }* %19, i64 0, i32 1
  %22 = call %Callable* @Microsoft__Quantum__Canon___174750b5f7094a9482d5c4ba66a18e06_DecomposedIntoTimeStepsCA__body({ i64, %Callable* }* %trotterForm, i64 %trotterOrder)
  store %Callable* %22, %Callable** %20
  store double %trotterStepSize, double* %21
  %23 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__2.10, %Tuple* %18)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %3)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %3)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %7)
  call void @__quantum__rt__callable_unreference(%Callable* %17)
  call void @__quantum__rt__tuple_unreference(%Tuple* %7)
  ret %Callable* %23
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %1 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 3
  %5 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1
  %6 = load i64, i64* %2
  %7 = load double, double* %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Simulation__TrotterStepImpl__body({ { %Callable* }*, { i64, %Callable* }* }* %5, i64 %6, double %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %1 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i64 0, i32 3
  %5 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1
  %6 = load i64, i64* %2
  %7 = load double, double* %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Simulation__TrotterStepImpl__adj({ { %Callable* }*, { i64, %Callable* }* }* %5, i64 %6, double %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %2
  call void @Microsoft__Quantum__Simulation__TrotterStepImpl__ctl(%Array* %3, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterStepImpl__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %2
  call void @Microsoft__Quantum__Simulation__TrotterStepImpl__ctladj(%Array* %3, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %4)
  ret void
}

define %Callable* @Microsoft__Quantum__Canon___174750b5f7094a9482d5c4ba66a18e06_DecomposedIntoTimeStepsCA__body({ i64, %Callable* }* %0, i64 %trotterOrder) {
entry:
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  %3 = icmp eq i64 %trotterOrder, 1
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Callable*, i64, %Callable* }*
  %6 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 0
  %7 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 1
  %8 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i64 0, i32 2
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA__, %Tuple* null)
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store %Callable* %9, %Callable** %6
  store i64 %nSteps, i64* %7
  store %Callable* %op, %Callable** %8
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.14, %Tuple* %4)
  ret %Callable* %10

test1__1:                                         ; preds = %entry
  %11 = icmp eq i64 %trotterOrder, 2
  br i1 %11, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Callable*, i64, %Callable* }*
  %14 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %13, i64 0, i32 0
  %15 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %13, i64 0, i32 1
  %16 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %13, i64 0, i32 2
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA__, %Tuple* null)
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store %Callable* %17, %Callable** %14
  store i64 %nSteps, i64* %15
  store %Callable* %op, %Callable** %16
  %18 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__2.15, %Tuple* %12)
  ret %Callable* %18

test2__1:                                         ; preds = %test1__1
  %19 = srem i64 %trotterOrder, 2
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %then2__1, label %else__1

then2__1:                                         ; preds = %test2__1
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, i64, %Callable* }* getelementptr ({ %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Callable*, i64, i64, %Callable* }*
  %23 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %22, i64 0, i32 0
  %24 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %22, i64 0, i32 1
  %25 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %22, i64 0, i32 2
  %26 = getelementptr { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %22, i64 0, i32 3
  %27 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA__, %Tuple* null)
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store %Callable* %27, %Callable** %23
  store i64 %trotterOrder, i64* %24
  store i64 %nSteps, i64* %25
  store %Callable* %op, %Callable** %26
  %28 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__3.16, %Tuple* %21)
  ret %Callable* %28

else__1:                                          ; preds = %test2__1
  %29 = call %String* @__quantum__rt__string_create(i32 10, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0))
  %30 = call %String* @__quantum__rt__int_to_string(i64 %trotterOrder)
  %31 = call %String* @__quantum__rt__string_concatenate(%String* %29, %String* %30)
  call void @__quantum__rt__string_unreference(%String* %29)
  call void @__quantum__rt__string_unreference(%String* %30)
  %32 = call %String* @__quantum__rt__string_create(i32 19, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @1, i32 0, i32 0))
  %33 = call %String* @__quantum__rt__string_concatenate(%String* %31, %String* %32)
  call void @__quantum__rt__string_unreference(%String* %31)
  call void @__quantum__rt__string_unreference(%String* %32)
  call void @__quantum__rt__fail(%String* %33)
  unreachable
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__body(double %trotterStepSize, i64 %trotterOrder, double %maxTime, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %1 = load { %Callable* }*, { %Callable* }** %0
  %2 = bitcast { %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %3
  %5 = bitcast { i64, %Callable* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %5)
  %6 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %value__inline__1 = fdiv double %maxTime, %trotterStepSize
  %nTimeSlices = call i64 @__quantum__qis__ceiling__body(double %value__inline__1)
  %7 = call double @__quantum__qis__intasdouble__body(i64 %nTimeSlices)
  %resizedTrotterStepSize = fdiv double %maxTime, %7
  %8 = sub i64 %nTimeSlices, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxTimeSlice = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %9 = icmp sge i64 %idxTimeSlice, %8
  %10 = icmp sle i64 %idxTimeSlice, %8
  %11 = select i1 true, i1 %10, i1 %9
  br i1 %11, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %12 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %resizedTrotterStepSize)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array* }*
  %15 = getelementptr { %Array* }, { %Array* }* %14, i64 0, i32 0
  store %Array* %qubits, %Array** %15
  call void @__quantum__rt__array_reference(%Array* %qubits)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %12)
  %16 = load %Array*, %Array** %15
  call void @__quantum__rt__array_unreference(%Array* %16)
  call void @__quantum__rt__tuple_unreference(%Tuple* %13)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %idxTimeSlice, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  ret void
}

declare i64 @__quantum__qis__ceiling__body(double)

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__adj(double %trotterStepSize, i64 %trotterOrder, double %maxTime, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %1 = load { %Callable* }*, { %Callable* }** %0
  %2 = bitcast { %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %3
  %5 = bitcast { i64, %Callable* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %5)
  %6 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %value__inline__1 = fdiv double %maxTime, %trotterStepSize
  %__qsVar0__nTimeSlices__ = call i64 @__quantum__qis__ceiling__body(double %value__inline__1)
  %7 = call double @__quantum__qis__intasdouble__body(i64 %__qsVar0__nTimeSlices__)
  %__qsVar1__resizedTrotterStepSize__ = fdiv double %maxTime, %7
  %8 = sub i64 %__qsVar0__nTimeSlices__, 1
  %9 = sub i64 %8, 0
  %10 = udiv i64 %9, 1
  %11 = mul i64 1, %10
  %12 = add i64 0, %11
  %13 = load %Range, %Range* @EmptyRange
  %14 = insertvalue %Range %13, i64 %12, 0
  %15 = insertvalue %Range %14, i64 -1, 1
  %16 = insertvalue %Range %15, i64 0, 2
  %17 = extractvalue %Range %16, 0
  %18 = extractvalue %Range %16, 1
  %19 = extractvalue %Range %16, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %20 = icmp sgt i64 %18, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar2__idxTimeSlice__ = phi i64 [ %17, %preheader__1 ], [ %30, %exiting__1 ]
  %21 = icmp sge i64 %__qsVar2__idxTimeSlice__, %19
  %22 = icmp sle i64 %__qsVar2__idxTimeSlice__, %19
  %23 = select i1 %20, i1 %22, i1 %21
  br i1 %23, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %24 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %__qsVar1__resizedTrotterStepSize__)
  %25 = call %Callable* @__quantum__rt__callable_copy(%Callable* %24, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %25)
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { %Array* }*
  %28 = getelementptr { %Array* }, { %Array* }* %27, i64 0, i32 0
  store %Array* %qubits, %Array** %28
  call void @__quantum__rt__array_reference(%Array* %qubits)
  call void @__quantum__rt__callable_invoke(%Callable* %25, %Tuple* %26, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %24)
  call void @__quantum__rt__callable_unreference(%Callable* %25)
  %29 = load %Array*, %Array** %28
  call void @__quantum__rt__array_unreference(%Array* %29)
  call void @__quantum__rt__tuple_unreference(%Tuple* %26)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %30 = add i64 %__qsVar2__idxTimeSlice__, %18
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctl(%Array* %__controlQubits__, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 0
  %trotterStepSize = load double, double* %1
  %2 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 1
  %trotterOrder = load i64, i64* %2
  %3 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 2
  %maxTime = load double, double* %3
  %4 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 3
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4
  %5 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5
  %7 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  %8 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %9 = load { i64, %Callable* }*, { i64, %Callable* }** %8
  %10 = bitcast { i64, %Callable* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %10)
  %11 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %11)
  %12 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 4
  %qubits = load %Array*, %Array** %12
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %value__inline__1 = fdiv double %maxTime, %trotterStepSize
  %nTimeSlices = call i64 @__quantum__qis__ceiling__body(double %value__inline__1)
  %13 = call double @__quantum__qis__intasdouble__body(i64 %nTimeSlices)
  %resizedTrotterStepSize = fdiv double %maxTime, %13
  %14 = sub i64 %nTimeSlices, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxTimeSlice = phi i64 [ 0, %entry ], [ %26, %exiting__1 ]
  %15 = icmp sge i64 %idxTimeSlice, %14
  %16 = icmp sle i64 %idxTimeSlice, %14
  %17 = select i1 true, i1 %16, i1 %15
  br i1 %17, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %18 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %resizedTrotterStepSize)
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %18, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %19)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, %Array* }*
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store %Array* %__controlQubits__, %Array** %22
  store %Array* %qubits, %Array** %23
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %18)
  call void @__quantum__rt__callable_unreference(%Callable* %19)
  %24 = load %Array*, %Array** %22
  call void @__quantum__rt__array_unreference(%Array* %24)
  %25 = load %Array*, %Array** %23
  call void @__quantum__rt__array_unreference(%Array* %25)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %26 = add i64 %idxTimeSlice, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %7)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %10)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %11)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  ret void
}

define void @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithmImpl__ctladj(%Array* %__controlQubits__, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 0
  %trotterStepSize = load double, double* %1
  %2 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 1
  %trotterOrder = load i64, i64* %2
  %3 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 2
  %maxTime = load double, double* %3
  %4 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 3
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4
  %5 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5
  %7 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  %8 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %9 = load { i64, %Callable* }*, { i64, %Callable* }** %8
  %10 = bitcast { i64, %Callable* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %10)
  %11 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %11)
  %12 = getelementptr { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i64 0, i32 4
  %qubits = load %Array*, %Array** %12
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %value__inline__1 = fdiv double %maxTime, %trotterStepSize
  %__qsVar0__nTimeSlices__ = call i64 @__quantum__qis__ceiling__body(double %value__inline__1)
  %13 = call double @__quantum__qis__intasdouble__body(i64 %__qsVar0__nTimeSlices__)
  %__qsVar1__resizedTrotterStepSize__ = fdiv double %maxTime, %13
  %14 = sub i64 %__qsVar0__nTimeSlices__, 1
  %15 = sub i64 %14, 0
  %16 = udiv i64 %15, 1
  %17 = mul i64 1, %16
  %18 = add i64 0, %17
  %19 = load %Range, %Range* @EmptyRange
  %20 = insertvalue %Range %19, i64 %18, 0
  %21 = insertvalue %Range %20, i64 -1, 1
  %22 = insertvalue %Range %21, i64 0, 2
  %23 = extractvalue %Range %22, 0
  %24 = extractvalue %Range %22, 1
  %25 = extractvalue %Range %22, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %26 = icmp sgt i64 %24, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar2__idxTimeSlice__ = phi i64 [ %23, %preheader__1 ], [ %38, %exiting__1 ]
  %27 = icmp sge i64 %__qsVar2__idxTimeSlice__, %25
  %28 = icmp sle i64 %__qsVar2__idxTimeSlice__, %25
  %29 = select i1 %26, i1 %28, i1 %27
  br i1 %29, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %30 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %__qsVar1__resizedTrotterStepSize__)
  %31 = call %Callable* @__quantum__rt__callable_copy(%Callable* %30, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %31)
  call void @__quantum__rt__callable_make_controlled(%Callable* %31)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %33 = bitcast %Tuple* %32 to { %Array*, %Array* }*
  %34 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %33, i64 0, i32 0
  %35 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %33, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store %Array* %__controlQubits__, %Array** %34
  store %Array* %qubits, %Array** %35
  call void @__quantum__rt__callable_invoke(%Callable* %31, %Tuple* %32, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %30)
  call void @__quantum__rt__callable_unreference(%Callable* %31)
  %36 = load %Array*, %Array** %34
  call void @__quantum__rt__array_unreference(%Array* %36)
  %37 = load %Array*, %Array** %35
  call void @__quantum__rt__array_unreference(%Array* %37)
  call void @__quantum__rt__tuple_unreference(%Tuple* %32)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %38 = add i64 %__qsVar2__idxTimeSlice__, %24
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %7)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %10)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %11)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  ret void
}

define { { %Callable* }*, { i64, %Callable* }* }* @Microsoft__Quantum__Simulation__EvolutionGenerator__body({ %Callable* }* %__Item1__, { i64, %Callable* }* %__Item2__) {
entry:
  %0 = bitcast { %Callable* }* %__Item1__ to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %0)
  %1 = bitcast { i64, %Callable* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %1)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %3 = bitcast %Tuple* %2 to { { %Callable* }*, { i64, %Callable* }* }*
  %4 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %3, i64 0, i32 0
  %5 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %3, i64 0, i32 1
  store { %Callable* }* %__Item1__, { %Callable* }** %4
  %6 = getelementptr { %Callable* }, { %Callable* }* %__Item1__, i64 0, i32 0
  %7 = load %Callable*, %Callable** %6
  call void @__quantum__rt__callable_reference(%Callable* %7)
  %8 = bitcast { %Callable* }* %__Item1__ to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %8)
  store { i64, %Callable* }* %__Item2__, { i64, %Callable* }** %5
  %9 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %__Item2__, i64 0, i32 1
  %10 = load %Callable*, %Callable** %9
  call void @__quantum__rt__callable_reference(%Callable* %10)
  %11 = bitcast { i64, %Callable* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %11)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %0)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %1)
  ret { { %Callable* }*, { i64, %Callable* }* }* %3
}

define { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionUnitary__body(%Callable* %__Item1__) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr { %Callable* }, { %Callable* }* %1, i64 0, i32 0
  store %Callable* %__Item1__, %Callable** %2
  call void @__quantum__rt__callable_reference(%Callable* %__Item1__)
  ret { %Callable* }* %1
}

define void @Microsoft__Quantum__Canon___adbacdb710fc408f8e17aafda2be5602_ApplyToEachCA__body(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %register)
  %0 = call %Range @Microsoft__Quantum__Arrays___f86d0bba3cff42b280ddf2b05b9fce13_IndexRange__body(%Array* %register)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %4 = icmp sgt i64 %2, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxQubit = phi i64 [ %1, %preheader__1 ], [ %14, %exiting__1 ]
  %5 = icmp sge i64 %idxQubit, %3
  %6 = icmp sle i64 %idxQubit, %3
  %7 = select i1 %4, i1 %6, i1 %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %9 = bitcast i8* %8 to %Qubit**
  %10 = load %Qubit*, %Qubit** %9
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Qubit* }*
  %13 = getelementptr { %Qubit* }, { %Qubit* }* %12, i64 0, i32 0
  store %Qubit* %10, %Qubit** %13
  call void @__quantum__rt__callable_invoke(%Callable* %singleElementOperation, %Tuple* %11, %Tuple* null)
  call void @__quantum__rt__tuple_unreference(%Tuple* %11)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %14 = add i64 %idxQubit, %2
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %register)
  ret void
}

define %Range @Microsoft__Quantum__Arrays___f86d0bba3cff42b280ddf2b05b9fce13_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %array)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = load %Range, %Range* @EmptyRange
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  call void @__quantum__rt__array_remove_access(%Array* %array)
  ret %Range %5
}

define void @Microsoft__Quantum__Canon___adbacdb710fc408f8e17aafda2be5602_ApplyToEachCA__adj(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %register)
  %0 = call %Range @Microsoft__Quantum__Arrays___f86d0bba3cff42b280ddf2b05b9fce13_IndexRange__body(%Array* %register)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  %4 = sub i64 %3, %1
  %5 = udiv i64 %4, %2
  %6 = mul i64 %2, %5
  %7 = add i64 %1, %6
  %8 = load %Range, %Range* @EmptyRange
  %9 = insertvalue %Range %8, i64 %7, 0
  %10 = sub i64 0, %2
  %11 = insertvalue %Range %9, i64 %10, 1
  %12 = insertvalue %Range %11, i64 %1, 2
  %13 = extractvalue %Range %12, 0
  %14 = extractvalue %Range %12, 1
  %15 = extractvalue %Range %12, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %16 = icmp sgt i64 %14, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %13, %preheader__1 ], [ %27, %exiting__1 ]
  %17 = icmp sge i64 %__qsVar0__idxQubit__, %15
  %18 = icmp sle i64 %__qsVar0__idxQubit__, %15
  %19 = select i1 %16, i1 %18, i1 %17
  br i1 %19, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %20 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %20)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %22 = bitcast i8* %21 to %Qubit**
  %23 = load %Qubit*, %Qubit** %22
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Qubit* }*
  %26 = getelementptr { %Qubit* }, { %Qubit* }* %25, i64 0, i32 0
  store %Qubit* %23, %Qubit** %26
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %20)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %27 = add i64 %__qsVar0__idxQubit__, %14
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %register)
  ret void
}

define void @Microsoft__Quantum__Canon___adbacdb710fc408f8e17aafda2be5602_ApplyToEachCA__ctl(%Array* %__controlQubits__, { %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %singleElementOperation = load %Callable*, %Callable** %1
  %2 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %register = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %register)
  %3 = call %Range @Microsoft__Quantum__Arrays___f86d0bba3cff42b280ddf2b05b9fce13_IndexRange__body(%Array* %register)
  %4 = extractvalue %Range %3, 0
  %5 = extractvalue %Range %3, 1
  %6 = extractvalue %Range %3, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %7 = icmp sgt i64 %5, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxQubit = phi i64 [ %4, %preheader__1 ], [ %20, %exiting__1 ]
  %8 = icmp sge i64 %idxQubit, %6
  %9 = icmp sle i64 %idxQubit, %6
  %10 = select i1 %7, i1 %9, i1 %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %17 = bitcast i8* %16 to %Qubit**
  %18 = load %Qubit*, %Qubit** %17
  store %Array* %__controlQubits__, %Array** %14
  store %Qubit* %18, %Qubit** %15
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %11)
  %19 = load %Array*, %Array** %14
  call void @__quantum__rt__array_unreference(%Array* %19)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %idxQubit, %5
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %register)
  ret void
}

define void @Microsoft__Quantum__Canon___adbacdb710fc408f8e17aafda2be5602_ApplyToEachCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 0
  %singleElementOperation = load %Callable*, %Callable** %1
  %2 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i64 0, i32 1
  %register = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %register)
  %3 = call %Range @Microsoft__Quantum__Arrays___f86d0bba3cff42b280ddf2b05b9fce13_IndexRange__body(%Array* %register)
  %4 = extractvalue %Range %3, 0
  %5 = extractvalue %Range %3, 1
  %6 = extractvalue %Range %3, 2
  %7 = sub i64 %6, %4
  %8 = udiv i64 %7, %5
  %9 = mul i64 %5, %8
  %10 = add i64 %4, %9
  %11 = load %Range, %Range* @EmptyRange
  %12 = insertvalue %Range %11, i64 %10, 0
  %13 = sub i64 0, %5
  %14 = insertvalue %Range %12, i64 %13, 1
  %15 = insertvalue %Range %14, i64 %4, 2
  %16 = extractvalue %Range %15, 0
  %17 = extractvalue %Range %15, 1
  %18 = extractvalue %Range %15, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %19 = icmp sgt i64 %17, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %16, %preheader__1 ], [ %32, %exiting__1 ]
  %20 = icmp sge i64 %__qsVar0__idxQubit__, %18
  %21 = icmp sle i64 %__qsVar0__idxQubit__, %18
  %22 = select i1 %19, i1 %21, i1 %20
  br i1 %22, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %25 = bitcast %Tuple* %24 to { %Array*, %Qubit* }*
  %26 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %25, i64 0, i32 0
  %27 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %25, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %29 = bitcast i8* %28 to %Qubit**
  %30 = load %Qubit*, %Qubit** %29
  store %Array* %__controlQubits__, %Array** %26
  store %Qubit* %30, %Qubit** %27
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %23)
  %31 = load %Array*, %Array** %26
  call void @__quantum__rt__array_unreference(%Array* %31)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %32 = add i64 %__qsVar0__idxQubit__, %17
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %register)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %pauli, i1 %bitApply, %Array* %bits, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %bits)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = sub i64 %nBits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxBit = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %1 = icmp sge i64 %idxBit, %0
  %2 = icmp sle i64 %idxBit, %0
  %3 = select i1 true, i1 %2, i1 %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %idxBit)
  %5 = bitcast i8* %4 to i1*
  %6 = load i1, i1* %5
  %7 = icmp eq i1 %6, %bitApply
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 0)
  %10 = bitcast i8* %9 to i2*
  store i2 %pauli, i2* %10
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 0)
  %13 = bitcast i8* %12 to %Qubit**
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %idxBit)
  %15 = bitcast i8* %14 to %Qubit**
  %16 = load %Qubit*, %Qubit** %15
  store %Qubit* %16, %Qubit** %13
  call void @Microsoft__Quantum__Canon__ApplyPauli__body(%Array* %8, %Array* %11)
  call void @__quantum__rt__array_unreference(%Array* %8)
  call void @__quantum__rt__array_unreference(%Array* %11)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %17 = add i64 %idxBit, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauli__body(%Array* %pauli, %Array* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %pauli)
  call void @__quantum__rt__array_add_access(%Array* %target)
  %0 = call %Range @Microsoft__Quantum__Arrays___ad4411152a364fe89334234cb0b94654_IndexRange__body(%Array* %pauli)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %4 = icmp sgt i64 %2, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxPauli = phi i64 [ %1, %preheader__1 ], [ %18, %exiting__1 ]
  %5 = icmp sge i64 %idxPauli, %3
  %6 = icmp sle i64 %idxPauli, %3
  %7 = select i1 %4, i1 %6, i1 %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pauli, i64 %idxPauli)
  %9 = bitcast i8* %8 to i2*
  %P = load i2, i2* %9
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %target, i64 %idxPauli)
  %11 = bitcast i8* %10 to %Qubit**
  %targ = load %Qubit*, %Qubit** %11
  %12 = load i2, i2* @PauliX
  %13 = icmp eq i2 %P, %12
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__qis__x__body(%Qubit* %targ)
  br label %continue__1

test1__1:                                         ; preds = %body__1
  %14 = load i2, i2* @PauliY
  %15 = icmp eq i2 %P, %14
  br i1 %15, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__qis__y__body(%Qubit* %targ)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %16 = load i2, i2* @PauliZ
  %17 = icmp eq i2 %P, %16
  br i1 %17, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__qis__z__body(%Qubit* %targ)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %18 = add i64 %idxPauli, %2
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %pauli)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %pauli, i1 %bitApply, %Array* %bits, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %bits)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %__qsVar0__nBits__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = sub i64 %__qsVar0__nBits__, 1
  %1 = sub i64 %0, 0
  %2 = udiv i64 %1, 1
  %3 = mul i64 1, %2
  %4 = add i64 0, %3
  %5 = load %Range, %Range* @EmptyRange
  %6 = insertvalue %Range %5, i64 %4, 0
  %7 = insertvalue %Range %6, i64 -1, 1
  %8 = insertvalue %Range %7, i64 0, 2
  %9 = extractvalue %Range %8, 0
  %10 = extractvalue %Range %8, 1
  %11 = extractvalue %Range %8, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %12 = icmp sgt i64 %10, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar1__idxBit__ = phi i64 [ %9, %preheader__1 ], [ %29, %exiting__1 ]
  %13 = icmp sge i64 %__qsVar1__idxBit__, %11
  %14 = icmp sle i64 %__qsVar1__idxBit__, %11
  %15 = select i1 %12, i1 %14, i1 %13
  br i1 %15, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %__qsVar1__idxBit__)
  %17 = bitcast i8* %16 to i1*
  %18 = load i1, i1* %17
  %19 = icmp eq i1 %18, %bitApply
  br i1 %19, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 0)
  %22 = bitcast i8* %21 to i2*
  store i2 %pauli, i2* %22
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 0)
  %25 = bitcast i8* %24 to %Qubit**
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %__qsVar1__idxBit__)
  %27 = bitcast i8* %26 to %Qubit**
  %28 = load %Qubit*, %Qubit** %27
  store %Qubit* %28, %Qubit** %25
  call void @Microsoft__Quantum__Canon__ApplyPauli__adj(%Array* %20, %Array* %23)
  call void @__quantum__rt__array_unreference(%Array* %20)
  call void @__quantum__rt__array_unreference(%Array* %23)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %29 = add i64 %__qsVar1__idxBit__, %10
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauli__adj(%Array* %pauli, %Array* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %pauli)
  call void @__quantum__rt__array_add_access(%Array* %target)
  %0 = call %Range @Microsoft__Quantum__Arrays___ad4411152a364fe89334234cb0b94654_IndexRange__body(%Array* %pauli)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  %4 = sub i64 %3, %1
  %5 = udiv i64 %4, %2
  %6 = mul i64 %2, %5
  %7 = add i64 %1, %6
  %8 = load %Range, %Range* @EmptyRange
  %9 = insertvalue %Range %8, i64 %7, 0
  %10 = sub i64 0, %2
  %11 = insertvalue %Range %9, i64 %10, 1
  %12 = insertvalue %Range %11, i64 %1, 2
  %13 = extractvalue %Range %12, 0
  %14 = extractvalue %Range %12, 1
  %15 = extractvalue %Range %12, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %16 = icmp sgt i64 %14, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxPauli__ = phi i64 [ %13, %preheader__1 ], [ %30, %exiting__1 ]
  %17 = icmp sge i64 %__qsVar0__idxPauli__, %15
  %18 = icmp sle i64 %__qsVar0__idxPauli__, %15
  %19 = select i1 %16, i1 %18, i1 %17
  br i1 %19, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pauli, i64 %__qsVar0__idxPauli__)
  %21 = bitcast i8* %20 to i2*
  %__qsVar1__P__ = load i2, i2* %21
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %target, i64 %__qsVar0__idxPauli__)
  %23 = bitcast i8* %22 to %Qubit**
  %__qsVar2__targ__ = load %Qubit*, %Qubit** %23
  %24 = load i2, i2* @PauliX
  %25 = icmp eq i2 %__qsVar1__P__, %24
  br i1 %25, label %then0__1, label %test1__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__qis__x__body(%Qubit* %__qsVar2__targ__)
  br label %continue__1

test1__1:                                         ; preds = %body__1
  %26 = load i2, i2* @PauliY
  %27 = icmp eq i2 %__qsVar1__P__, %26
  br i1 %27, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__qis__y__body(%Qubit* %__qsVar2__targ__)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %28 = load i2, i2* @PauliZ
  %29 = icmp eq i2 %__qsVar1__P__, %28
  br i1 %29, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__qis__z__body(%Qubit* %__qsVar2__targ__)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %30 = add i64 %__qsVar0__idxPauli__, %14
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %pauli)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__ctl(%Array* %__controlQubits__, { i2, i1, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 0
  %pauli = load i2, i2* %1
  %2 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 1
  %bitApply = load i1, i1* %2
  %3 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 2
  %bits = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %4 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 3
  %qubits = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %5 = sub i64 %nBits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxBit = phi i64 [ 0, %entry ], [ %28, %exiting__1 ]
  %6 = icmp sge i64 %idxBit, %5
  %7 = icmp sle i64 %idxBit, %5
  %8 = select i1 true, i1 %7, i1 %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %idxBit)
  %10 = bitcast i8* %9 to i1*
  %11 = load i1, i1* %10
  %12 = icmp eq i1 %11, %bitApply
  br i1 %12, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %14 = bitcast %Tuple* %13 to { %Array*, %Array* }*
  %15 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %14, i64 0, i32 0
  %16 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %14, i64 0, i32 1
  %17 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 0)
  %19 = bitcast i8* %18 to i2*
  store i2 %pauli, i2* %19
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 0)
  %22 = bitcast i8* %21 to %Qubit**
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %idxBit)
  %24 = bitcast i8* %23 to %Qubit**
  %25 = load %Qubit*, %Qubit** %24
  store %Qubit* %25, %Qubit** %22
  store %Array* %17, %Array** %15
  store %Array* %20, %Array** %16
  call void @Microsoft__Quantum__Canon__ApplyPauli__ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %14)
  %26 = load %Array*, %Array** %15
  call void @__quantum__rt__array_unreference(%Array* %26)
  %27 = load %Array*, %Array** %16
  call void @__quantum__rt__array_unreference(%Array* %27)
  call void @__quantum__rt__tuple_unreference(%Tuple* %13)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %28 = add i64 %idxBit, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauli__ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %pauli = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %pauli)
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %target = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %target)
  %3 = call %Range @Microsoft__Quantum__Arrays___ad4411152a364fe89334234cb0b94654_IndexRange__body(%Array* %pauli)
  %4 = extractvalue %Range %3, 0
  %5 = extractvalue %Range %3, 1
  %6 = extractvalue %Range %3, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %7 = icmp sgt i64 %5, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxPauli = phi i64 [ %4, %preheader__1 ], [ %21, %exiting__1 ]
  %8 = icmp sge i64 %idxPauli, %6
  %9 = icmp sle i64 %idxPauli, %6
  %10 = select i1 %7, i1 %9, i1 %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pauli, i64 %idxPauli)
  %12 = bitcast i8* %11 to i2*
  %P = load i2, i2* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %target, i64 %idxPauli)
  %14 = bitcast i8* %13 to %Qubit**
  %targ = load %Qubit*, %Qubit** %14
  %15 = load i2, i2* @PauliX
  %16 = icmp eq i2 %P, %15
  br i1 %16, label %then0__1, label %test1__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %targ)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  br label %continue__1

test1__1:                                         ; preds = %body__1
  %17 = load i2, i2* @PauliY
  %18 = icmp eq i2 %P, %17
  br i1 %18, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__y__ctl(%Array* %__controlQubits__, %Qubit* %targ)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %19 = load i2, i2* @PauliZ
  %20 = icmp eq i2 %P, %19
  br i1 %20, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %targ)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %21 = add i64 %idxPauli, %5
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %pauli)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__ctladj(%Array* %__controlQubits__, { i2, i1, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 0
  %pauli = load i2, i2* %1
  %2 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 1
  %bitApply = load i1, i1* %2
  %3 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 2
  %bits = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %4 = getelementptr { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i64 0, i32 3
  %qubits = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %__qsVar0__nBits__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %5 = sub i64 %__qsVar0__nBits__, 1
  %6 = sub i64 %5, 0
  %7 = udiv i64 %6, 1
  %8 = mul i64 1, %7
  %9 = add i64 0, %8
  %10 = load %Range, %Range* @EmptyRange
  %11 = insertvalue %Range %10, i64 %9, 0
  %12 = insertvalue %Range %11, i64 -1, 1
  %13 = insertvalue %Range %12, i64 0, 2
  %14 = extractvalue %Range %13, 0
  %15 = extractvalue %Range %13, 1
  %16 = extractvalue %Range %13, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %17 = icmp sgt i64 %15, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar1__idxBit__ = phi i64 [ %14, %preheader__1 ], [ %40, %exiting__1 ]
  %18 = icmp sge i64 %__qsVar1__idxBit__, %16
  %19 = icmp sle i64 %__qsVar1__idxBit__, %16
  %20 = select i1 %17, i1 %19, i1 %18
  br i1 %20, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %__qsVar1__idxBit__)
  %22 = bitcast i8* %21 to i1*
  %23 = load i1, i1* %22
  %24 = icmp eq i1 %23, %bitApply
  br i1 %24, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %26 = bitcast %Tuple* %25 to { %Array*, %Array* }*
  %27 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %26, i64 0, i32 0
  %28 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %26, i64 0, i32 1
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to i2*
  store i2 %pauli, i2* %31
  %32 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 0)
  %34 = bitcast i8* %33 to %Qubit**
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %__qsVar1__idxBit__)
  %36 = bitcast i8* %35 to %Qubit**
  %37 = load %Qubit*, %Qubit** %36
  store %Qubit* %37, %Qubit** %34
  store %Array* %29, %Array** %27
  store %Array* %32, %Array** %28
  call void @Microsoft__Quantum__Canon__ApplyPauli__ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %26)
  %38 = load %Array*, %Array** %27
  call void @__quantum__rt__array_unreference(%Array* %38)
  %39 = load %Array*, %Array** %28
  call void @__quantum__rt__array_unreference(%Array* %39)
  call void @__quantum__rt__tuple_unreference(%Tuple* %25)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %40 = add i64 %__qsVar1__idxBit__, %15
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  ret void
}

define void @Microsoft__Quantum__Canon__ApplyPauli__ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %pauli = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %pauli)
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %target = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %target)
  %3 = call %Range @Microsoft__Quantum__Arrays___ad4411152a364fe89334234cb0b94654_IndexRange__body(%Array* %pauli)
  %4 = extractvalue %Range %3, 0
  %5 = extractvalue %Range %3, 1
  %6 = extractvalue %Range %3, 2
  %7 = sub i64 %6, %4
  %8 = udiv i64 %7, %5
  %9 = mul i64 %5, %8
  %10 = add i64 %4, %9
  %11 = load %Range, %Range* @EmptyRange
  %12 = insertvalue %Range %11, i64 %10, 0
  %13 = sub i64 0, %5
  %14 = insertvalue %Range %12, i64 %13, 1
  %15 = insertvalue %Range %14, i64 %4, 2
  %16 = extractvalue %Range %15, 0
  %17 = extractvalue %Range %15, 1
  %18 = extractvalue %Range %15, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %19 = icmp sgt i64 %17, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxPauli__ = phi i64 [ %16, %preheader__1 ], [ %33, %exiting__1 ]
  %20 = icmp sge i64 %__qsVar0__idxPauli__, %18
  %21 = icmp sle i64 %__qsVar0__idxPauli__, %18
  %22 = select i1 %19, i1 %21, i1 %20
  br i1 %22, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pauli, i64 %__qsVar0__idxPauli__)
  %24 = bitcast i8* %23 to i2*
  %__qsVar1__P__ = load i2, i2* %24
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %target, i64 %__qsVar0__idxPauli__)
  %26 = bitcast i8* %25 to %Qubit**
  %__qsVar2__targ__ = load %Qubit*, %Qubit** %26
  %27 = load i2, i2* @PauliX
  %28 = icmp eq i2 %__qsVar1__P__, %27
  br i1 %28, label %then0__1, label %test1__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %__qsVar2__targ__)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  br label %continue__1

test1__1:                                         ; preds = %body__1
  %29 = load i2, i2* @PauliY
  %30 = icmp eq i2 %__qsVar1__P__, %29
  br i1 %30, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__y__ctl(%Array* %__controlQubits__, %Qubit* %__qsVar2__targ__)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %31 = load i2, i2* @PauliZ
  %32 = icmp eq i2 %__qsVar1__P__, %31
  br i1 %32, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %__qsVar2__targ__)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %33 = add i64 %__qsVar0__idxPauli__, %17
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %pauli)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____body({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %target)
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  %3 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %14, %exiting__1 ]
  %4 = icmp sge i64 %idx, %3
  %5 = icmp sle i64 %idx, %3
  %6 = select i1 true, i1 %5, i1 %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { i64, double, %Array* }*
  %9 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %8, i64 0, i32 0
  %10 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %8, i64 0, i32 1
  %11 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %8, i64 0, i32 2
  %12 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %idx, i64* %9
  store double %12, double* %10
  store %Array* %target, %Array** %11
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %7, %Tuple* null)
  %13 = load %Array*, %Array** %11
  call void @__quantum__rt__array_unreference(%Array* %13)
  call void @__quantum__rt__tuple_unreference(%Tuple* %7)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %14 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %15 = sub i64 %nSteps, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idx1 = phi i64 [ %15, %preheader__1 ], [ %26, %exiting__2 ]
  %16 = icmp sge i64 %idx1, 0
  %17 = icmp sle i64 %idx1, 0
  %18 = select i1 false, i1 %17, i1 %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { i64, double, %Array* }*
  %21 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %20, i64 0, i32 0
  %22 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %20, i64 0, i32 1
  %23 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %20, i64 0, i32 2
  %24 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %idx1, i64* %21
  store double %24, double* %22
  store %Array* %target, %Array** %23
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %19, %Tuple* null)
  %25 = load %Array*, %Array** %23
  call void @__quantum__rt__array_unreference(%Array* %25)
  call void @__quantum__rt__tuple_unreference(%Tuple* %19)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %26 = add i64 %idx1, -1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____adj({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %target)
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  %3 = sub i64 %nSteps, 1
  %4 = sub i64 0, %3
  %5 = udiv i64 %4, -1
  %6 = mul i64 -1, %5
  %7 = add i64 %3, %6
  %8 = load %Range, %Range* @EmptyRange
  %9 = insertvalue %Range %8, i64 %7, 0
  %10 = insertvalue %Range %9, i64 1, 1
  %11 = insertvalue %Range %10, i64 %3, 2
  %12 = extractvalue %Range %11, 0
  %13 = extractvalue %Range %11, 1
  %14 = extractvalue %Range %11, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %15 = icmp sgt i64 %13, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar1__idx__ = phi i64 [ %12, %preheader__1 ], [ %27, %exiting__1 ]
  %16 = icmp sge i64 %__qsVar1__idx__, %14
  %17 = icmp sle i64 %__qsVar1__idx__, %14
  %18 = select i1 %15, i1 %17, i1 %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %19)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, double, %Array* }*
  %22 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %21, i64 0, i32 2
  %25 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %__qsVar1__idx__, i64* %22
  store double %25, double* %23
  store %Array* %target, %Array** %24
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %19)
  %26 = load %Array*, %Array** %24
  call void @__quantum__rt__array_unreference(%Array* %26)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %27 = add i64 %__qsVar1__idx__, %13
  br label %header__1

exit__1:                                          ; preds = %header__1
  %28 = sub i64 %nSteps, 1
  %29 = sub i64 %28, 0
  %30 = udiv i64 %29, 1
  %31 = mul i64 1, %30
  %32 = add i64 0, %31
  %33 = load %Range, %Range* @EmptyRange
  %34 = insertvalue %Range %33, i64 %32, 0
  %35 = insertvalue %Range %34, i64 -1, 1
  %36 = insertvalue %Range %35, i64 0, 2
  %37 = extractvalue %Range %36, 0
  %38 = extractvalue %Range %36, 1
  %39 = extractvalue %Range %36, 2
  br label %preheader__2

preheader__2:                                     ; preds = %exit__1
  %40 = icmp sgt i64 %38, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__2
  %__qsVar0__idx__ = phi i64 [ %37, %preheader__2 ], [ %52, %exiting__2 ]
  %41 = icmp sge i64 %__qsVar0__idx__, %39
  %42 = icmp sle i64 %__qsVar0__idx__, %39
  %43 = select i1 %40, i1 %42, i1 %41
  br i1 %43, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %44 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %44)
  %45 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %46 = bitcast %Tuple* %45 to { i64, double, %Array* }*
  %47 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %46, i64 0, i32 0
  %48 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %46, i64 0, i32 1
  %49 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %46, i64 0, i32 2
  %50 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %__qsVar0__idx__, i64* %47
  store double %50, double* %48
  store %Array* %target, %Array** %49
  call void @__quantum__rt__callable_invoke(%Callable* %44, %Tuple* %45, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %44)
  %51 = load %Array*, %Array** %49
  call void @__quantum__rt__array_unreference(%Array* %51)
  call void @__quantum__rt__tuple_unreference(%Tuple* %45)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %52 = add i64 %__qsVar0__idx__, %38
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %3
  %4 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %target = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %target)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 0
  %nSteps = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 1
  %op = load %Callable*, %Callable** %6
  %7 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %27, %exiting__1 ]
  %8 = icmp sge i64 %idx, %7
  %9 = icmp sle i64 %idx, %7
  %10 = select i1 true, i1 %9, i1 %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { i64, double, %Array* }* }*
  %14 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %13, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64, double, %Array* }*
  %18 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %17, i64 0, i32 0
  %19 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %17, i64 0, i32 1
  %20 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %17, i64 0, i32 2
  %21 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %idx, i64* %18
  store double %21, double* %19
  store %Array* %target, %Array** %20
  store %Array* %__controlQubits__, %Array** %14
  store { i64, double, %Array* }* %17, { i64, double, %Array* }** %15
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %11)
  %22 = load %Array*, %Array** %14
  call void @__quantum__rt__array_unreference(%Array* %22)
  %23 = load { i64, double, %Array* }*, { i64, double, %Array* }** %15
  %24 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %23, i64 0, i32 2
  %25 = load %Array*, %Array** %24
  call void @__quantum__rt__array_unreference(%Array* %25)
  %26 = bitcast { i64, double, %Array* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %26)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %27 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %28 = sub i64 %nSteps, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idx1 = phi i64 [ %28, %preheader__1 ], [ %48, %exiting__2 ]
  %29 = icmp sge i64 %idx1, 0
  %30 = icmp sle i64 %idx1, 0
  %31 = select i1 false, i1 %30, i1 %29
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %32)
  %33 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %34 = bitcast %Tuple* %33 to { %Array*, { i64, double, %Array* }* }*
  %35 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %34, i64 0, i32 0
  %36 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %34, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %38 = bitcast %Tuple* %37 to { i64, double, %Array* }*
  %39 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %38, i64 0, i32 0
  %40 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %38, i64 0, i32 1
  %41 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %38, i64 0, i32 2
  %42 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %idx1, i64* %39
  store double %42, double* %40
  store %Array* %target, %Array** %41
  store %Array* %__controlQubits__, %Array** %35
  store { i64, double, %Array* }* %38, { i64, double, %Array* }** %36
  call void @__quantum__rt__callable_invoke(%Callable* %32, %Tuple* %33, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %32)
  %43 = load %Array*, %Array** %35
  call void @__quantum__rt__array_unreference(%Array* %43)
  %44 = load { i64, double, %Array* }*, { i64, double, %Array* }** %36
  %45 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %44, i64 0, i32 2
  %46 = load %Array*, %Array** %45
  call void @__quantum__rt__array_unreference(%Array* %46)
  %47 = bitcast { i64, double, %Array* }* %44 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %47)
  call void @__quantum__rt__tuple_unreference(%Tuple* %33)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %48 = add i64 %idx1, -1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %3
  %4 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %target = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %target)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 0
  %nSteps = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 1
  %op = load %Callable*, %Callable** %6
  %7 = sub i64 %nSteps, 1
  %8 = sub i64 0, %7
  %9 = udiv i64 %8, -1
  %10 = mul i64 -1, %9
  %11 = add i64 %7, %10
  %12 = load %Range, %Range* @EmptyRange
  %13 = insertvalue %Range %12, i64 %11, 0
  %14 = insertvalue %Range %13, i64 1, 1
  %15 = insertvalue %Range %14, i64 %7, 2
  %16 = extractvalue %Range %15, 0
  %17 = extractvalue %Range %15, 1
  %18 = extractvalue %Range %15, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %19 = icmp sgt i64 %17, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar1__idx__ = phi i64 [ %16, %preheader__1 ], [ %39, %exiting__1 ]
  %20 = icmp sge i64 %__qsVar1__idx__, %18
  %21 = icmp sle i64 %__qsVar1__idx__, %18
  %22 = select i1 %19, i1 %21, i1 %20
  br i1 %22, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %25 = bitcast %Tuple* %24 to { %Array*, { i64, double, %Array* }* }*
  %26 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %25, i64 0, i32 0
  %27 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %25, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { i64, double, %Array* }*
  %30 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %29, i64 0, i32 0
  %31 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %29, i64 0, i32 1
  %32 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %29, i64 0, i32 2
  %33 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %__qsVar1__idx__, i64* %30
  store double %33, double* %31
  store %Array* %target, %Array** %32
  store %Array* %__controlQubits__, %Array** %26
  store { i64, double, %Array* }* %29, { i64, double, %Array* }** %27
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %23)
  %34 = load %Array*, %Array** %26
  call void @__quantum__rt__array_unreference(%Array* %34)
  %35 = load { i64, double, %Array* }*, { i64, double, %Array* }** %27
  %36 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %35, i64 0, i32 2
  %37 = load %Array*, %Array** %36
  call void @__quantum__rt__array_unreference(%Array* %37)
  %38 = bitcast { i64, double, %Array* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %38)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %39 = add i64 %__qsVar1__idx__, %17
  br label %header__1

exit__1:                                          ; preds = %header__1
  %40 = sub i64 %nSteps, 1
  %41 = sub i64 %40, 0
  %42 = udiv i64 %41, 1
  %43 = mul i64 1, %42
  %44 = add i64 0, %43
  %45 = load %Range, %Range* @EmptyRange
  %46 = insertvalue %Range %45, i64 %44, 0
  %47 = insertvalue %Range %46, i64 -1, 1
  %48 = insertvalue %Range %47, i64 0, 2
  %49 = extractvalue %Range %48, 0
  %50 = extractvalue %Range %48, 1
  %51 = extractvalue %Range %48, 2
  br label %preheader__2

preheader__2:                                     ; preds = %exit__1
  %52 = icmp sgt i64 %50, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__2
  %__qsVar0__idx__ = phi i64 [ %49, %preheader__2 ], [ %72, %exiting__2 ]
  %53 = icmp sge i64 %__qsVar0__idx__, %51
  %54 = icmp sle i64 %__qsVar0__idx__, %51
  %55 = select i1 %52, i1 %54, i1 %53
  br i1 %55, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %56 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %56)
  call void @__quantum__rt__callable_make_controlled(%Callable* %56)
  %57 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %58 = bitcast %Tuple* %57 to { %Array*, { i64, double, %Array* }* }*
  %59 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %58, i64 0, i32 0
  %60 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %58, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %61 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %62 = bitcast %Tuple* %61 to { i64, double, %Array* }*
  %63 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %62, i64 0, i32 0
  %64 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %62, i64 0, i32 1
  %65 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %62, i64 0, i32 2
  %66 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %__qsVar0__idx__, i64* %63
  store double %66, double* %64
  store %Array* %target, %Array** %65
  store %Array* %__controlQubits__, %Array** %59
  store { i64, double, %Array* }* %62, { i64, double, %Array* }** %60
  call void @__quantum__rt__callable_invoke(%Callable* %56, %Tuple* %57, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %56)
  %67 = load %Array*, %Array** %59
  call void @__quantum__rt__array_unreference(%Array* %67)
  %68 = load { i64, double, %Array* }*, { i64, double, %Array* }** %60
  %69 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %68, i64 0, i32 2
  %70 = load %Array*, %Array** %69
  call void @__quantum__rt__array_unreference(%Array* %70)
  %71 = bitcast { i64, double, %Array* }* %68 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  call void @__quantum__rt__tuple_unreference(%Tuple* %57)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %72 = add i64 %__qsVar0__idx__, %50
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define %Range @Microsoft__Quantum__Arrays___ad4411152a364fe89334234cb0b94654_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %array)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = load %Range, %Range* @EmptyRange
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  call void @__quantum__rt__array_remove_access(%Array* %array)
  ret %Range %5
}

declare void @__quantum__qis__x__body(%Qubit*)

declare void @__quantum__qis__y__body(%Qubit*)

declare void @__quantum__qis__x__ctl(%Array*, %Qubit*)

declare void @__quantum__qis__y__ctl(%Array*, %Qubit*)

declare void @__quantum__qis__z__ctl(%Array*, %Qubit*)

define void @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____body(%Array* %3, %Array* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____adj(%Array* %3, %Array* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____ctl(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____ctladj(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_add_access(%Array* %1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %4 = trunc i64 %3 to i32
  %5 = call i64 @__quantum__rt__int_power(i64 -2, i32 %4)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___633d9520084e45849dce841979ad73fe_Padded__body(i64 %5, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_add_access(%Array* %coefficientsPadded)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %7 = icmp eq i64 %6, 1
  br i1 %7, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 0)
  %9 = bitcast i8* %8 to double*
  %a__inline__1 = load double, double* %9
  %10 = call double @__quantum__qis__absd__body(double %a__inline__1)
  %11 = fcmp ogt double %10, %tolerance
  br i1 %11, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  %paulis__inline__2 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis__inline__2, i64 0)
  %13 = bitcast i8* %12 to i2*
  %14 = load i2, i2* @PauliZ
  store i2 %14, i2* %13
  call void @__quantum__rt__array_add_access(%Array* %paulis__inline__2)
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 0)
  %16 = bitcast i8* %15 to double*
  %theta__inline__2 = load double, double* %16
  %qubits__inline__2 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__inline__2, i64 0)
  %18 = bitcast i8* %17 to %Qubit**
  store %Qubit* %target, %Qubit** %18
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__2)
  call void @__quantum__qis__exp__body(%Array* %paulis__inline__2, double %theta__inline__2, %Array* %qubits__inline__2)
  call void @__quantum__rt__array_remove_access(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_unreference(%Array* %qubits__inline__2)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  br label %continue__1

else__1:                                          ; preds = %entry
  %19 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef0__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %20 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 0
  %coefficients0 = load %Array*, %Array** %20
  call void @__quantum__rt__array_add_access(%Array* %coefficients0)
  %21 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 1
  %coefficients1 = load %Array*, %Array** %21
  call void @__quantum__rt__array_add_access(%Array* %coefficients1)
  %22 = sub i64 %3, 2
  %23 = load %Range, %Range* @EmptyRange
  %24 = insertvalue %Range %23, i64 0, 0
  %25 = insertvalue %Range %24, i64 1, 1
  %26 = insertvalue %Range %25, i64 %22, 2
  %27 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %26, i1 false)
  %28 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %27)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients0, { %Array* }* %28, %Qubit* %target)
  %29 = call i1 @Microsoft__Quantum__Canon____QsRef0__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients1)
  br i1 %29, label %then0__3, label %continue__3

then0__3:                                         ; preds = %else__1
  %30 = sub i64 %3, 1
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %30)
  %32 = bitcast i8* %31 to %Qubit**
  %33 = load %Qubit*, %Qubit** %32
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %33, %Qubit* %target)
  %34 = sub i64 %3, 2
  %35 = load %Range, %Range* @EmptyRange
  %36 = insertvalue %Range %35, i64 0, 0
  %37 = insertvalue %Range %36, i64 1, 1
  %38 = insertvalue %Range %37, i64 %34, 2
  %39 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %38, i1 false)
  %40 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %39)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %40, %Qubit* %target)
  %41 = sub i64 %3, 1
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %41)
  %43 = bitcast i8* %42 to %Qubit**
  %44 = load %Qubit*, %Qubit** %43
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %44, %Qubit* %target)
  call void @__quantum__rt__array_unreference(%Array* %39)
  %45 = getelementptr { %Array* }, { %Array* }* %40, i64 0, i32 0
  %46 = load %Array*, %Array** %45
  call void @__quantum__rt__array_unreference(%Array* %46)
  %47 = bitcast { %Array* }* %40 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %47)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %else__1
  call void @__quantum__rt__array_remove_access(%Array* %coefficients0)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients1)
  call void @__quantum__rt__array_unreference(%Array* %coefficients0)
  call void @__quantum__rt__array_unreference(%Array* %coefficients1)
  %48 = bitcast { %Array*, %Array* }* %19 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %48)
  call void @__quantum__rt__array_unreference(%Array* %27)
  %49 = getelementptr { %Array* }, { %Array* }* %28, i64 0, i32 0
  %50 = load %Array*, %Array** %49
  call void @__quantum__rt__array_unreference(%Array* %50)
  %51 = bitcast { %Array* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %51)
  br label %continue__1

continue__1:                                      ; preds = %continue__3, %continue__2
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  call void @__quantum__rt__array_remove_access(%Array* %coefficientsPadded)
  call void @__quantum__rt__array_unreference(%Array* %coefficientsPadded)
  ret void
}

define %Array* @Microsoft__Quantum__Arrays___633d9520084e45849dce841979ad73fe_Padded__body(i64 %nElementsTotal, double %defaultElement, %Array* %inputArray) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %inputArray)
  %nElementsInitial = call i64 @__quantum__rt__array_get_size_1d(%Array* %inputArray)
  %nAbsElementsTotal = call i64 @__quantum__qis__absi__body(i64 %nElementsTotal)
  %0 = icmp sge i64 %nAbsElementsTotal, %nElementsInitial
  %1 = call %String* @__quantum__rt__string_create(i32 70, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @24, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %0, i1 true, %String* %1)
  %nElementsPad = sub i64 %nAbsElementsTotal, %nElementsInitial
  %padArray = call %Array* @Microsoft__Quantum__Arrays___8aaa902f0f2742a29575057afd257126_ConstantArray__body(i64 %nElementsPad, double %defaultElement)
  call void @__quantum__rt__array_add_access(%Array* %padArray)
  %2 = icmp sge i64 %nElementsTotal, 0
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %3 = call %Array* @__quantum__rt__array_concatenate(%Array* %padArray, %Array* %inputArray)
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %4 = call %Array* @__quantum__rt__array_concatenate(%Array* %inputArray, %Array* %padArray)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %5 = phi %Array* [ %3, %condTrue__1 ], [ %4, %condFalse__1 ]
  call void @__quantum__rt__array_remove_access(%Array* %inputArray)
  call void @__quantum__rt__array_remove_access(%Array* %padArray)
  call void @__quantum__rt__string_unreference(%String* %1)
  call void @__quantum__rt__array_unreference(%Array* %padArray)
  ret %Array* %5
}

define { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef0__MultiplexZCoefficients____body(%Array* %coefficients) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %newCoefficientsLength = udiv i64 %0, 2
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %newCoefficientsLength)
  %coefficients0 = alloca %Array*
  store %Array* %1, %Array** %coefficients0
  call void @__quantum__rt__array_add_access(%Array* %1)
  %2 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %newCoefficientsLength)
  %coefficients1 = alloca %Array*
  store %Array* %2, %Array** %coefficients1
  call void @__quantum__rt__array_add_access(%Array* %2)
  %3 = sub i64 %newCoefficientsLength, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxCoeff = phi i64 [ 0, %entry ], [ %37, %exiting__1 ]
  %4 = icmp sge i64 %idxCoeff, %3
  %5 = icmp sle i64 %idxCoeff, %3
  %6 = select i1 true, i1 %5, i1 %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = load %Array*, %Array** %coefficients0
  %8 = call %Array* @__quantum__rt__array_copy(%Array* %7, i1 false)
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10
  %12 = add i64 %idxCoeff, %newCoefficientsLength
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %12)
  %14 = bitcast i8* %13 to double*
  %15 = load double, double* %14
  %16 = fadd double %11, %15
  %17 = fmul double 5.000000e-01, %16
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %idxCoeff)
  %19 = bitcast i8* %18 to double*
  %20 = load double, double* %19
  store double %17, double* %19
  %21 = load %Array*, %Array** %coefficients0
  call void @__quantum__rt__array_remove_access(%Array* %21)
  store %Array* %8, %Array** %coefficients0
  call void @__quantum__rt__array_add_access(%Array* %8)
  %22 = load %Array*, %Array** %coefficients1
  %23 = call %Array* @__quantum__rt__array_copy(%Array* %22, i1 false)
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %25 = bitcast i8* %24 to double*
  %26 = load double, double* %25
  %27 = add i64 %idxCoeff, %newCoefficientsLength
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %27)
  %29 = bitcast i8* %28 to double*
  %30 = load double, double* %29
  %31 = fsub double %26, %30
  %32 = fmul double 5.000000e-01, %31
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %idxCoeff)
  %34 = bitcast i8* %33 to double*
  %35 = load double, double* %34
  store double %32, double* %34
  %36 = load %Array*, %Array** %coefficients1
  call void @__quantum__rt__array_remove_access(%Array* %36)
  store %Array* %23, %Array** %coefficients1
  call void @__quantum__rt__array_add_access(%Array* %23)
  call void @__quantum__rt__array_unreference(%Array* %8)
  call void @__quantum__rt__array_unreference(%Array* %23)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %37 = add i64 %idxCoeff, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %38 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %39 = bitcast %Tuple* %38 to { %Array*, %Array* }*
  %40 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %39, i64 0, i32 0
  %41 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %39, i64 0, i32 1
  %42 = load %Array*, %Array** %coefficients0
  call void @__quantum__rt__array_reference(%Array* %42)
  %43 = load %Array*, %Array** %coefficients1
  call void @__quantum__rt__array_reference(%Array* %43)
  store %Array* %42, %Array** %40
  store %Array* %43, %Array** %41
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %42)
  call void @__quantum__rt__array_remove_access(%Array* %43)
  call void @__quantum__rt__array_unreference(%Array* %1)
  call void @__quantum__rt__array_unreference(%Array* %2)
  ret { %Array*, %Array* }* %39
}

define void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %control, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control, %Qubit* %target)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %coefficients, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %1 = load %Array*, %Array** %0
  call void @__quantum__rt__array_add_access(%Array* %1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %4 = trunc i64 %3 to i32
  %5 = call i64 @__quantum__rt__int_power(i64 -2, i32 %4)
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___633d9520084e45849dce841979ad73fe_Padded__body(i64 %5, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__coefficientsPadded__)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %7 = icmp eq i64 %6, 1
  br i1 %7, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsPadded__, i64 0)
  %9 = bitcast i8* %8 to double*
  %a__inline__1 = load double, double* %9
  %10 = call double @__quantum__qis__absd__body(double %a__inline__1)
  %11 = fcmp ogt double %10, %tolerance
  br i1 %11, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  %paulis__inline__2 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis__inline__2, i64 0)
  %13 = bitcast i8* %12 to i2*
  %14 = load i2, i2* @PauliZ
  store i2 %14, i2* %13
  call void @__quantum__rt__array_add_access(%Array* %paulis__inline__2)
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsPadded__, i64 0)
  %16 = bitcast i8* %15 to double*
  %theta__inline__2 = load double, double* %16
  %qubits__inline__2 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__inline__2, i64 0)
  %18 = bitcast i8* %17 to %Qubit**
  store %Qubit* %target, %Qubit** %18
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__2)
  call void @__quantum__qis__exp__adj(%Array* %paulis__inline__2, double %theta__inline__2, %Array* %qubits__inline__2)
  call void @__quantum__rt__array_remove_access(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_unreference(%Array* %qubits__inline__2)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  br label %continue__1

else__1:                                          ; preds = %entry
  %19 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef0__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %20 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %20
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__coefficients0__)
  %21 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %21
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__coefficients1__)
  %22 = call i1 @Microsoft__Quantum__Canon____QsRef0__AnyOutsideToleranceD____body(double %tolerance, %Array* %__qsVar2__coefficients1__)
  br i1 %22, label %then0__3, label %continue__3

then0__3:                                         ; preds = %else__1
  %23 = sub i64 %3, 1
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %23)
  %25 = bitcast i8* %24 to %Qubit**
  %26 = load %Qubit*, %Qubit** %25
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %26, %Qubit* %target)
  %27 = sub i64 %3, 2
  %28 = load %Range, %Range* @EmptyRange
  %29 = insertvalue %Range %28, i64 0, 0
  %30 = insertvalue %Range %29, i64 1, 1
  %31 = insertvalue %Range %30, i64 %27, 2
  %32 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %31, i1 false)
  %33 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %32)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %33, %Qubit* %target)
  %34 = sub i64 %3, 1
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %34)
  %36 = bitcast i8* %35 to %Qubit**
  %37 = load %Qubit*, %Qubit** %36
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %37, %Qubit* %target)
  call void @__quantum__rt__array_unreference(%Array* %32)
  %38 = getelementptr { %Array* }, { %Array* }* %33, i64 0, i32 0
  %39 = load %Array*, %Array** %38
  call void @__quantum__rt__array_unreference(%Array* %39)
  %40 = bitcast { %Array* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %40)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %else__1
  %41 = sub i64 %3, 2
  %42 = load %Range, %Range* @EmptyRange
  %43 = insertvalue %Range %42, i64 0, 0
  %44 = insertvalue %Range %43, i64 1, 1
  %45 = insertvalue %Range %44, i64 %41, 2
  %46 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %45, i1 false)
  %47 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %46)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %47, %Qubit* %target)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coefficients0__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__coefficients1__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar1__coefficients0__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar2__coefficients1__)
  %48 = bitcast { %Array*, %Array* }* %19 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %48)
  call void @__quantum__rt__array_unreference(%Array* %46)
  %49 = getelementptr { %Array* }, { %Array* }* %47, i64 0, i32 0
  %50 = load %Array*, %Array** %49
  call void @__quantum__rt__array_unreference(%Array* %50)
  %51 = bitcast { %Array* }* %47 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %51)
  br label %continue__1

continue__1:                                      ; preds = %continue__3, %continue__2
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__coefficientsPadded__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__coefficientsPadded__)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %controlRegister, { double, %Array*, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %1 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %3 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %control = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %5)
  %6 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %target = load %Qubit*, %Qubit** %7
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %9 = add i64 %8, 1
  %10 = trunc i64 %9 to i32
  %11 = call i64 @__quantum__rt__int_power(i64 2, i32 %10)
  %12 = trunc i64 %8 to i32
  %13 = call i64 @__quantum__rt__int_power(i64 -2, i32 %12)
  %14 = call %Array* @Microsoft__Quantum__Arrays___633d9520084e45849dce841979ad73fe_Padded__body(i64 %13, double 0.000000e+00, %Array* %coefficients)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___633d9520084e45849dce841979ad73fe_Padded__body(i64 %11, double 0.000000e+00, %Array* %14)
  call void @__quantum__rt__array_add_access(%Array* %coefficientsPadded)
  %15 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef0__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %16 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %15, i64 0, i32 0
  %coefficients0 = load %Array*, %Array** %16
  call void @__quantum__rt__array_add_access(%Array* %coefficients0)
  %17 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %15, i64 0, i32 1
  %coefficients1 = load %Array*, %Array** %17
  call void @__quantum__rt__array_add_access(%Array* %coefficients1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients0, { %Array* }* %control, %Qubit* %target)
  %18 = call i1 @Microsoft__Quantum__Canon____QsRef0__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients1)
  br i1 %18, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %5)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %coefficientsPadded)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients0)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients1)
  call void @__quantum__rt__array_unreference(%Array* %14)
  call void @__quantum__rt__array_unreference(%Array* %coefficientsPadded)
  call void @__quantum__rt__array_unreference(%Array* %coefficients0)
  call void @__quantum__rt__array_unreference(%Array* %coefficients1)
  %19 = bitcast { %Array*, %Array* }* %15 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %19)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %controlRegister, { double, %Array*, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %1 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %3 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %control = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %control, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %5)
  %6 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %target = load %Qubit*, %Qubit** %7
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %9 = add i64 %8, 1
  %10 = trunc i64 %9 to i32
  %11 = call i64 @__quantum__rt__int_power(i64 2, i32 %10)
  %12 = trunc i64 %8 to i32
  %13 = call i64 @__quantum__rt__int_power(i64 -2, i32 %12)
  %14 = call %Array* @Microsoft__Quantum__Arrays___633d9520084e45849dce841979ad73fe_Padded__body(i64 %13, double 0.000000e+00, %Array* %coefficients)
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___633d9520084e45849dce841979ad73fe_Padded__body(i64 %11, double 0.000000e+00, %Array* %14)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__coefficientsPadded__)
  %15 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef0__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %16 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %15, i64 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %16
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__coefficients0__)
  %17 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %15, i64 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %17
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__coefficients1__)
  %18 = call i1 @Microsoft__Quantum__Canon____QsRef0__AnyOutsideToleranceD____body(double %tolerance, %Array* %__qsVar2__coefficients1__)
  br i1 %18, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  call void @__quantum__qis__x__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %5)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__coefficientsPadded__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coefficients0__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__coefficients1__)
  call void @__quantum__rt__array_unreference(%Array* %14)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__coefficientsPadded__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar1__coefficients0__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar2__coefficients1__)
  %19 = bitcast { %Array*, %Array* }* %15 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %19)
  ret void
}

define %Callable* @Microsoft__Quantum__Canon___c921dc5656a74657aa6bca85dde938ab_ControlledOnInt__body(i64 %numberState, %Callable* %oracle) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, i64, %Callable* }*
  %2 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i64 0, i32 1
  %4 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i64 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt, %Tuple* null)
  call void @__quantum__rt__callable_reference(%Callable* %oracle)
  store %Callable* %5, %Callable** %2
  store i64 %numberState, i64* %3
  store %Callable* %oracle, %Callable** %4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.12, %Tuple* %0)
  ret %Callable* %6
}

define void @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Array* }*
  %1 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %5 = load i64, i64* %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__body(i64 %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Array* }*
  %1 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %5 = load i64, i64* %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__adj(i64 %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, %Callable*, %Array*, %Array* }*, { i64, %Callable*, %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__ctl(%Array* %3, { i64, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, %Callable*, %Array*, %Array* }*, { i64, %Callable*, %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__ctladj(%Array* %3, { i64, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define %Callable* @Microsoft__Quantum__Canon___c4b8d488ccbc4155b9b01e21f87d5903_ControlledOnInt__body(i64 %numberState, %Callable* %oracle) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, i64, %Callable* }*
  %2 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i64 0, i32 1
  %4 = getelementptr { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i64 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt, %Tuple* null)
  call void @__quantum__rt__callable_reference(%Callable* %oracle)
  store %Callable* %5, %Callable** %2
  store i64 %numberState, i64* %3
  store %Callable* %oracle, %Callable** %4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.13, %Tuple* %0)
  ret %Callable* %6
}

define void @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %5 = load i64, i64* %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Qubit*, %Qubit** %4
  call void @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__body(i64 %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %5 = load i64, i64* %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Qubit*, %Qubit** %4
  call void @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__adj(i64 %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, %Callable*, %Array*, %Qubit* }*, { i64, %Callable*, %Array*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__ctl(%Array* %3, { i64, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, %Callable*, %Array*, %Qubit* }*, { i64, %Callable*, %Array*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__ctladj(%Array* %3, { i64, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %5 = load double, double* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____body({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %5 = load double, double* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____adj({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____ctl(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____ctladj(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %5 = load double, double* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____body({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %5 = load double, double* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____adj({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____ctl(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____ctladj(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 3
  %5 = load i64, i64* %1
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %2
  %7 = load double, double* %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____body(i64 %5, { i64, %Callable* }* %6, double %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 3
  %5 = load i64, i64* %1
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %2
  %7 = load double, double* %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____adj(i64 %5, { i64, %Callable* }* %6, double %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, { i64, %Callable* }*, double, %Array* }*, { i64, { i64, %Callable* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctl(%Array* %3, { i64, { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { i64, { i64, %Callable* }*, double, %Array* }*, { i64, { i64, %Callable* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctladj(%Array* %3, { i64, { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

declare %String* @__quantum__rt__string_create(i32, i8*)

declare %String* @__quantum__rt__int_to_string(i64)

declare %String* @__quantum__rt__string_concatenate(%String*, %String*)

declare void @__quantum__rt__string_unreference(%String*)

declare void @__quantum__rt__fail(%String*)

define void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____body({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %target)
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  %3 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %4 = icmp sge i64 %idx, %3
  %5 = icmp sle i64 %idx, %3
  %6 = select i1 true, i1 %5, i1 %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { i64, double, %Array* }*
  %9 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %8, i64 0, i32 0
  %10 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %8, i64 0, i32 1
  %11 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %8, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %idx, i64* %9
  store double %stepSize, double* %10
  store %Array* %target, %Array** %11
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %7, %Tuple* null)
  %12 = load %Array*, %Array** %11
  call void @__quantum__rt__array_unreference(%Array* %12)
  call void @__quantum__rt__tuple_unreference(%Tuple* %7)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____adj({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %target)
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  %3 = sub i64 %nSteps, 1
  %4 = sub i64 %3, 0
  %5 = udiv i64 %4, 1
  %6 = mul i64 1, %5
  %7 = add i64 0, %6
  %8 = load %Range, %Range* @EmptyRange
  %9 = insertvalue %Range %8, i64 %7, 0
  %10 = insertvalue %Range %9, i64 -1, 1
  %11 = insertvalue %Range %10, i64 0, 2
  %12 = extractvalue %Range %11, 0
  %13 = extractvalue %Range %11, 1
  %14 = extractvalue %Range %11, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %15 = icmp sgt i64 %13, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idx__ = phi i64 [ %12, %preheader__1 ], [ %26, %exiting__1 ]
  %16 = icmp sge i64 %__qsVar0__idx__, %14
  %17 = icmp sle i64 %__qsVar0__idx__, %14
  %18 = select i1 %15, i1 %17, i1 %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %19)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, double, %Array* }*
  %22 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %21, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %__qsVar0__idx__, i64* %22
  store double %stepSize, double* %23
  store %Array* %target, %Array** %24
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %19)
  %25 = load %Array*, %Array** %24
  call void @__quantum__rt__array_unreference(%Array* %25)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %26 = add i64 %__qsVar0__idx__, %13
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %3
  %4 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %target = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %target)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 0
  %nSteps = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 1
  %op = load %Callable*, %Callable** %6
  %7 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %26, %exiting__1 ]
  %8 = icmp sge i64 %idx, %7
  %9 = icmp sle i64 %idx, %7
  %10 = select i1 true, i1 %9, i1 %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, { i64, double, %Array* }* }*
  %14 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %13, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64, double, %Array* }*
  %18 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %17, i64 0, i32 0
  %19 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %17, i64 0, i32 1
  %20 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %17, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %idx, i64* %18
  store double %stepSize, double* %19
  store %Array* %target, %Array** %20
  store %Array* %__controlQubits__, %Array** %14
  store { i64, double, %Array* }* %17, { i64, double, %Array* }** %15
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %11)
  %21 = load %Array*, %Array** %14
  call void @__quantum__rt__array_unreference(%Array* %21)
  %22 = load { i64, double, %Array* }*, { i64, double, %Array* }** %15
  %23 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %22, i64 0, i32 2
  %24 = load %Array*, %Array** %23
  call void @__quantum__rt__array_unreference(%Array* %24)
  %25 = bitcast { i64, double, %Array* }* %22 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %25)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %26 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %3 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %3
  %4 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %target = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %target)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 0
  %nSteps = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %2, i64 0, i32 1
  %op = load %Callable*, %Callable** %6
  %7 = sub i64 %nSteps, 1
  %8 = sub i64 %7, 0
  %9 = udiv i64 %8, 1
  %10 = mul i64 1, %9
  %11 = add i64 0, %10
  %12 = load %Range, %Range* @EmptyRange
  %13 = insertvalue %Range %12, i64 %11, 0
  %14 = insertvalue %Range %13, i64 -1, 1
  %15 = insertvalue %Range %14, i64 0, 2
  %16 = extractvalue %Range %15, 0
  %17 = extractvalue %Range %15, 1
  %18 = extractvalue %Range %15, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %19 = icmp sgt i64 %17, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idx__ = phi i64 [ %16, %preheader__1 ], [ %38, %exiting__1 ]
  %20 = icmp sge i64 %__qsVar0__idx__, %18
  %21 = icmp sle i64 %__qsVar0__idx__, %18
  %22 = select i1 %19, i1 %21, i1 %20
  br i1 %22, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %25 = bitcast %Tuple* %24 to { %Array*, { i64, double, %Array* }* }*
  %26 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %25, i64 0, i32 0
  %27 = getelementptr { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %25, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { i64, double, %Array* }*
  %30 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %29, i64 0, i32 0
  %31 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %29, i64 0, i32 1
  %32 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %29, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %__qsVar0__idx__, i64* %30
  store double %stepSize, double* %31
  store %Array* %target, %Array** %32
  store %Array* %__controlQubits__, %Array** %26
  store { i64, double, %Array* }* %29, { i64, double, %Array* }** %27
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %23)
  %33 = load %Array*, %Array** %26
  call void @__quantum__rt__array_unreference(%Array* %33)
  %34 = load { i64, double, %Array* }*, { i64, double, %Array* }** %27
  %35 = getelementptr { i64, double, %Array* }, { i64, double, %Array* }* %34, i64 0, i32 2
  %36 = load %Array*, %Array** %35
  call void @__quantum__rt__array_unreference(%Array* %36)
  %37 = bitcast { i64, double, %Array* }* %34 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %37)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %38 = add i64 %__qsVar0__idx__, %17
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____body(%Array* %operations, %Array* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %operations)
  call void @__quantum__rt__array_add_access(%Array* %target)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %op = load %Callable*, %Callable** %5
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array* }*
  %8 = getelementptr { %Array* }, { %Array* }* %7, i64 0, i32 0
  store %Array* %target, %Array** %8
  call void @__quantum__rt__array_reference(%Array* %target)
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %6, %Tuple* null)
  %9 = load %Array*, %Array** %8
  call void @__quantum__rt__array_unreference(%Array* %9)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %operations)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____adj(%Array* %operations, %Array* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %operations)
  call void @__quantum__rt__array_add_access(%Array* %target)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  %2 = load %Range, %Range* @EmptyRange
  %3 = insertvalue %Range %2, i64 %1, 0
  %4 = insertvalue %Range %3, i64 -1, 1
  %5 = insertvalue %Range %4, i64 0, 2
  %6 = call %Array* @__quantum__rt__array_slice_1d(%Array* %operations, %Range %5, i1 false)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %9)
  %12 = bitcast i8* %11 to %Callable**
  %__qsVar0__op__ = load %Callable*, %Callable** %12
  %13 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %13)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array* }*
  %16 = getelementptr { %Array* }, { %Array* }* %15, i64 0, i32 0
  store %Array* %target, %Array** %16
  call void @__quantum__rt__array_reference(%Array* %target)
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %14, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %13)
  %17 = load %Array*, %Array** %16
  call void @__quantum__rt__array_unreference(%Array* %17)
  call void @__quantum__rt__tuple_unreference(%Tuple* %14)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %operations)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  %19 = sub i64 %7, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %20)
  %23 = bitcast i8* %22 to %Callable**
  %24 = load %Callable*, %Callable** %23
  call void @__quantum__rt__callable_unreference(%Callable* %24)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_unreference(%Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %operations = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %operations)
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %target = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %target)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %16, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %5)
  %8 = bitcast i8* %7 to %Callable**
  %op = load %Callable*, %Callable** %8
  %9 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %9)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %11 = bitcast %Tuple* %10 to { %Array*, %Array* }*
  %12 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %11, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_reference(%Array* %target)
  store %Array* %__controlQubits__, %Array** %12
  store %Array* %target, %Array** %13
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %10, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %9)
  %14 = load %Array*, %Array** %12
  call void @__quantum__rt__array_unreference(%Array* %14)
  %15 = load %Array*, %Array** %13
  call void @__quantum__rt__array_unreference(%Array* %15)
  call void @__quantum__rt__tuple_unreference(%Tuple* %10)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %16 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %operations)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___a92679108f644e7f9bcdbbda1f5b3753___QsRef0__ApplyBoundCA____ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %operations = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %operations)
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %target = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %target)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %4 = sub i64 %3, 1
  %5 = load %Range, %Range* @EmptyRange
  %6 = insertvalue %Range %5, i64 %4, 0
  %7 = insertvalue %Range %6, i64 -1, 1
  %8 = insertvalue %Range %7, i64 0, 2
  %9 = call %Array* @__quantum__rt__array_slice_1d(%Array* %operations, %Range %8, i1 false)
  %10 = call i64 @__quantum__rt__array_get_size_1d(%Array* %9)
  %11 = sub i64 %10, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %12 = phi i64 [ 0, %entry ], [ %23, %exiting__1 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %12)
  %15 = bitcast i8* %14 to %Callable**
  %__qsVar0__op__ = load %Callable*, %Callable** %15
  %16 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %16)
  call void @__quantum__rt__callable_make_controlled(%Callable* %16)
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %18 = bitcast %Tuple* %17 to { %Array*, %Array* }*
  %19 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %18, i64 0, i32 0
  %20 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %18, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_reference(%Array* %target)
  store %Array* %__controlQubits__, %Array** %19
  store %Array* %target, %Array** %20
  call void @__quantum__rt__callable_invoke(%Callable* %16, %Tuple* %17, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %16)
  %21 = load %Array*, %Array** %19
  call void @__quantum__rt__array_unreference(%Array* %21)
  %22 = load %Array*, %Array** %20
  call void @__quantum__rt__array_unreference(%Array* %22)
  call void @__quantum__rt__tuple_unreference(%Tuple* %17)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %23 = add i64 %12, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %operations)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  %24 = sub i64 %10, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %25 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %25)
  %28 = bitcast i8* %27 to %Callable**
  %29 = load %Callable*, %Callable** %28
  call void @__quantum__rt__callable_unreference(%Callable* %29)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %25, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_unreference(%Array* %9)
  ret void
}

define void @Microsoft__Quantum__Canon___844e0d33639542558228c58de0107c92___QsRef0__ComposedOutput____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Callable*, double }*
  %1 = getelementptr { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %0, i64 0, i32 0
  %2 = getelementptr { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %0, i64 0, i32 1
  %3 = getelementptr { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %0, i64 0, i32 2
  %4 = load %Callable*, %Callable** %1
  %5 = load %Callable*, %Callable** %2
  %6 = load double, double* %3
  %7 = call { double, double }* @Microsoft__Quantum__Canon___844e0d33639542558228c58de0107c92___QsRef0__ComposedOutput____body(%Callable* %4, %Callable* %5, double %6)
  %8 = bitcast %Tuple* %result-tuple to { { double, double }* }*
  %9 = getelementptr { { double, double }* }, { { double, double }* }* %8, i64 0, i32 0
  store { double, double }* %7, { double, double }** %9
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %qubits__inline__2 = load %Array*, %Array** %0
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__2)
  %1 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %1)
  %2 = call i1 @Microsoft__Quantum__Arrays___6245568497cc49fc9de41550447dd6df_IsEmpty__body(%Array* %qubits__inline__2)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i32 74, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @2, i32 0, i32 0))
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__inline__2)
  %5 = trunc i64 %4 to i32
  %6 = call i64 @__quantum__rt__int_power(i64 -2, i32 %5)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___633d9520084e45849dce841979ad73fe_Padded__body(i64 %6, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_add_access(%Array* %coefficientsPadded)
  %7 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef0__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %8 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 0
  %coefficients0 = load %Array*, %Array** %8
  call void @__quantum__rt__array_add_access(%Array* %coefficients0)
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 1
  %coefficients1 = load %Array*, %Array** %9
  call void @__quantum__rt__array_add_access(%Array* %coefficients1)
  %10 = sub i64 %4, 2
  %11 = load %Range, %Range* @EmptyRange
  %12 = insertvalue %Range %11, i64 0, 0
  %13 = insertvalue %Range %12, i64 1, 1
  %14 = insertvalue %Range %13, i64 %10, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits__inline__2, %Range %14, i1 false)
  %16 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %15)
  %17 = sub i64 %4, 1
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__inline__2, i64 %17)
  %19 = bitcast i8* %18 to %Qubit**
  %20 = load %Qubit*, %Qubit** %19
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %16, %Qubit* %20)
  %21 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %22 = icmp eq i64 %21, 2
  br i1 %22, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %24 = bitcast i8* %23 to double*
  %a__inline__1 = load double, double* %24
  %25 = call double @__quantum__qis__absd__body(double %a__inline__1)
  %26 = fcmp ogt double %25, %tolerance
  br i1 %26, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  %paulis__inline__2 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis__inline__2, i64 0)
  %28 = bitcast i8* %27 to i2*
  %29 = load i2, i2* @PauliI
  store i2 %29, i2* %28
  call void @__quantum__rt__array_add_access(%Array* %paulis__inline__2)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %31 = bitcast i8* %30 to double*
  %32 = load double, double* %31
  %theta__inline__2 = fmul double 1.000000e+00, %32
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__2)
  call void @__quantum__qis__exp__body(%Array* %paulis__inline__2, double %theta__inline__2, %Array* %qubits__inline__2)
  call void @__quantum__rt__array_remove_access(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__2)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %33 = call %Array* @Microsoft__Quantum__Arrays___3292f5d8e8a540d3ab6e72d82eea1185_Most__body(%Array* %qubits__inline__2)
  %34 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %33)
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients0, { %Array* }* %34)
  call void @__quantum__rt__array_unreference(%Array* %33)
  %35 = getelementptr { %Array* }, { %Array* }* %34, i64 0, i32 0
  %36 = load %Array*, %Array** %35
  call void @__quantum__rt__array_unreference(%Array* %36)
  %37 = bitcast { %Array* }* %34 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %37)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %1)
  call void @__quantum__rt__array_remove_access(%Array* %coefficientsPadded)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients0)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients1)
  call void @__quantum__rt__array_unreference(%Array* %coefficientsPadded)
  call void @__quantum__rt__array_unreference(%Array* %coefficients0)
  call void @__quantum__rt__array_unreference(%Array* %coefficients1)
  %38 = bitcast { %Array*, %Array* }* %7 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %38)
  call void @__quantum__rt__array_unreference(%Array* %15)
  %39 = getelementptr { %Array* }, { %Array* }* %16, i64 0, i32 0
  %40 = load %Array*, %Array** %39
  call void @__quantum__rt__array_unreference(%Array* %40)
  %41 = bitcast { %Array* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %41)
  ret void
}

define i1 @Microsoft__Quantum__Arrays___6245568497cc49fc9de41550447dd6df_IsEmpty__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %array)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = icmp eq i64 %0, 0
  call void @__quantum__rt__array_remove_access(%Array* %array)
  ret i1 %1
}

define %Array* @Microsoft__Quantum__Arrays___3292f5d8e8a540d3ab6e72d82eea1185_Most__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %array)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 2
  %2 = load %Range, %Range* @EmptyRange
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  %6 = call %Array* @__quantum__rt__array_slice_1d(%Array* %array, %Range %5, i1 false)
  call void @__quantum__rt__array_remove_access(%Array* %array)
  ret %Array* %6
}

define void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %0 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %qubits__inline__2 = load %Array*, %Array** %0
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__2)
  %1 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %1)
  %2 = call i1 @Microsoft__Quantum__Arrays___6245568497cc49fc9de41550447dd6df_IsEmpty__body(%Array* %qubits__inline__2)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i32 74, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @3, i32 0, i32 0))
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__inline__2)
  %5 = trunc i64 %4 to i32
  %6 = call i64 @__quantum__rt__int_power(i64 -2, i32 %5)
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___633d9520084e45849dce841979ad73fe_Padded__body(i64 %6, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__coefficientsPadded__)
  %7 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef0__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %8 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %8
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__coefficients0__)
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %7, i64 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %9
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__coefficients1__)
  %10 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %11 = icmp eq i64 %10, 2
  br i1 %11, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %13 = bitcast i8* %12 to double*
  %a__inline__1 = load double, double* %13
  %14 = call double @__quantum__qis__absd__body(double %a__inline__1)
  %15 = fcmp ogt double %14, %tolerance
  br i1 %15, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  %paulis__inline__2 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis__inline__2, i64 0)
  %17 = bitcast i8* %16 to i2*
  %18 = load i2, i2* @PauliI
  store i2 %18, i2* %17
  call void @__quantum__rt__array_add_access(%Array* %paulis__inline__2)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %20 = bitcast i8* %19 to double*
  %21 = load double, double* %20
  %theta__inline__2 = fmul double 1.000000e+00, %21
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__2)
  call void @__quantum__qis__exp__adj(%Array* %paulis__inline__2, double %theta__inline__2, %Array* %qubits__inline__2)
  call void @__quantum__rt__array_remove_access(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__2)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %22 = call %Array* @Microsoft__Quantum__Arrays___3292f5d8e8a540d3ab6e72d82eea1185_Most__body(%Array* %qubits__inline__2)
  %23 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %22)
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %23)
  call void @__quantum__rt__array_unreference(%Array* %22)
  %24 = getelementptr { %Array* }, { %Array* }* %23, i64 0, i32 0
  %25 = load %Array*, %Array** %24
  call void @__quantum__rt__array_unreference(%Array* %25)
  %26 = bitcast { %Array* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %26)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %27 = sub i64 %4, 2
  %28 = load %Range, %Range* @EmptyRange
  %29 = insertvalue %Range %28, i64 0, 0
  %30 = insertvalue %Range %29, i64 1, 1
  %31 = insertvalue %Range %30, i64 %27, 2
  %32 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits__inline__2, %Range %31, i1 false)
  %33 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %32)
  %34 = sub i64 %4, 1
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__inline__2, i64 %34)
  %36 = bitcast i8* %35 to %Qubit**
  %37 = load %Qubit*, %Qubit** %36
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %33, %Qubit* %37)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %1)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__coefficientsPadded__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coefficients0__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__coefficients1__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__coefficientsPadded__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar1__coefficients0__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar2__coefficients1__)
  %38 = bitcast { %Array*, %Array* }* %7 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %38)
  call void @__quantum__rt__array_unreference(%Array* %32)
  %39 = getelementptr { %Array* }, { %Array* }* %33, i64 0, i32 0
  %40 = load %Array*, %Array** %39
  call void @__quantum__rt__array_unreference(%Array* %40)
  %41 = bitcast { %Array* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %41)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %3 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %qubits__inline__2 = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__2)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %5)
  %6 = call i1 @Microsoft__Quantum__Arrays___6245568497cc49fc9de41550447dd6df_IsEmpty__body(%Array* %qubits__inline__2)
  br i1 %6, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %7 = call %String* @__quantum__rt__string_create(i32 74, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @4, i32 0, i32 0))
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__fail(%String* %7)
  unreachable

continue__1:                                      ; preds = %entry
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__inline__2)
  %9 = trunc i64 %8 to i32
  %10 = call i64 @__quantum__rt__int_power(i64 -2, i32 %9)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___633d9520084e45849dce841979ad73fe_Padded__body(i64 %10, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_add_access(%Array* %coefficientsPadded)
  %11 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef0__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %12 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %11, i64 0, i32 0
  %coefficients0 = load %Array*, %Array** %12
  call void @__quantum__rt__array_add_access(%Array* %coefficients0)
  %13 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %11, i64 0, i32 1
  %coefficients1 = load %Array*, %Array** %13
  call void @__quantum__rt__array_add_access(%Array* %coefficients1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, { %Array* }*, %Qubit* }*
  %16 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %15, i64 0, i32 0
  %17 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %15, i64 0, i32 1
  %18 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %15, i64 0, i32 2
  %19 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %15, i64 0, i32 3
  call void @__quantum__rt__array_reference(%Array* %coefficients1)
  %20 = sub i64 %8, 2
  %21 = load %Range, %Range* @EmptyRange
  %22 = insertvalue %Range %21, i64 0, 0
  %23 = insertvalue %Range %22, i64 1, 1
  %24 = insertvalue %Range %23, i64 %20, 2
  %25 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits__inline__2, %Range %24, i1 false)
  %26 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %25)
  call void @__quantum__rt__array_unreference(%Array* %25)
  %27 = sub i64 %8, 1
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__inline__2, i64 %27)
  %29 = bitcast i8* %28 to %Qubit**
  %30 = load %Qubit*, %Qubit** %29
  store double %tolerance, double* %16
  store %Array* %coefficients1, %Array** %17
  store { %Array* }* %26, { %Array* }** %18
  store %Qubit* %30, %Qubit** %19
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }*, %Qubit* }* %15)
  %31 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %32 = icmp eq i64 %31, 2
  br i1 %32, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %34 = bitcast i8* %33 to double*
  %a__inline__1 = load double, double* %34
  %35 = call double @__quantum__qis__absd__body(double %a__inline__1)
  %36 = fcmp ogt double %35, %tolerance
  br i1 %36, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %paulis__inline__2 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis__inline__2, i64 0)
  %38 = bitcast i8* %37 to i2*
  %39 = load i2, i2* @PauliI
  store i2 %39, i2* %38
  call void @__quantum__rt__array_add_access(%Array* %paulis__inline__2)
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %41 = bitcast i8* %40 to double*
  %42 = load double, double* %41
  %theta__inline__2 = fmul double 1.000000e+00, %42
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__2)
  %43 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %44 = bitcast %Tuple* %43 to { %Array*, double, %Array* }*
  %45 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %44, i64 0, i32 0
  %46 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %44, i64 0, i32 1
  %47 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %44, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_reference(%Array* %qubits__inline__2)
  store %Array* %paulis__inline__2, %Array** %45
  store double %theta__inline__2, double* %46
  store %Array* %qubits__inline__2, %Array** %47
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %44)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_unreference(%Array* %qubits__inline__2)
  call void @__quantum__rt__tuple_unreference(%Tuple* %43)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %48 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %49 = bitcast %Tuple* %48 to { double, %Array*, { %Array* }* }*
  %50 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %49, i64 0, i32 0
  %51 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %49, i64 0, i32 1
  %52 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %49, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %coefficients0)
  %53 = call %Array* @Microsoft__Quantum__Arrays___3292f5d8e8a540d3ab6e72d82eea1185_Most__body(%Array* %qubits__inline__2)
  %54 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %53)
  call void @__quantum__rt__array_unreference(%Array* %53)
  store double %tolerance, double* %50
  store %Array* %coefficients0, %Array** %51
  store { %Array* }* %54, { %Array* }** %52
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %49)
  call void @__quantum__rt__array_unreference(%Array* %coefficients0)
  %55 = getelementptr { %Array* }, { %Array* }* %54, i64 0, i32 0
  %56 = load %Array*, %Array** %55
  call void @__quantum__rt__array_unreference(%Array* %56)
  %57 = bitcast { %Array* }* %54 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %57)
  call void @__quantum__rt__tuple_unreference(%Tuple* %48)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__array_remove_access(%Array* %coefficientsPadded)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients0)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients1)
  call void @__quantum__rt__array_unreference(%Array* %coefficientsPadded)
  call void @__quantum__rt__array_unreference(%Array* %coefficients0)
  call void @__quantum__rt__array_unreference(%Array* %coefficients1)
  %58 = bitcast { %Array*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %58)
  call void @__quantum__rt__array_unreference(%Array* %coefficients1)
  %59 = getelementptr { %Array* }, { %Array* }* %26, i64 0, i32 0
  %60 = load %Array*, %Array** %59
  call void @__quantum__rt__array_unreference(%Array* %60)
  %61 = bitcast { %Array* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %61)
  call void @__quantum__rt__tuple_unreference(%Tuple* %14)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 0
  %tolerance = load double, double* %1
  %2 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 1
  %coefficients = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %coefficients)
  %3 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i64 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %qubits, i64 0, i32 0
  %qubits__inline__2 = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__2)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %5)
  %6 = call i1 @Microsoft__Quantum__Arrays___6245568497cc49fc9de41550447dd6df_IsEmpty__body(%Array* %qubits__inline__2)
  br i1 %6, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %7 = call %String* @__quantum__rt__string_create(i32 74, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @5, i32 0, i32 0))
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__fail(%String* %7)
  unreachable

continue__1:                                      ; preds = %entry
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits__inline__2)
  %9 = trunc i64 %8 to i32
  %10 = call i64 @__quantum__rt__int_power(i64 -2, i32 %9)
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___633d9520084e45849dce841979ad73fe_Padded__body(i64 %10, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__coefficientsPadded__)
  %11 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef0__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %12 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %11, i64 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %12
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__coefficients0__)
  %13 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %11, i64 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %13
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__coefficients1__)
  %14 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %15 = icmp eq i64 %14, 2
  br i1 %15, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %17 = bitcast i8* %16 to double*
  %a__inline__1 = load double, double* %17
  %18 = call double @__quantum__qis__absd__body(double %a__inline__1)
  %19 = fcmp ogt double %18, %tolerance
  br i1 %19, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %paulis__inline__2 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis__inline__2, i64 0)
  %21 = bitcast i8* %20 to i2*
  %22 = load i2, i2* @PauliI
  store i2 %22, i2* %21
  call void @__quantum__rt__array_add_access(%Array* %paulis__inline__2)
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %24 = bitcast i8* %23 to double*
  %25 = load double, double* %24
  %theta__inline__2 = fmul double 1.000000e+00, %25
  call void @__quantum__rt__array_add_access(%Array* %qubits__inline__2)
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { %Array*, double, %Array* }*
  %28 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %27, i64 0, i32 0
  %29 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %27, i64 0, i32 1
  %30 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %27, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_reference(%Array* %qubits__inline__2)
  store %Array* %paulis__inline__2, %Array** %28
  store double %theta__inline__2, double* %29
  store %Array* %qubits__inline__2, %Array** %30
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %27)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_unreference(%Array* %paulis__inline__2)
  call void @__quantum__rt__array_unreference(%Array* %qubits__inline__2)
  call void @__quantum__rt__tuple_unreference(%Tuple* %26)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { double, %Array*, { %Array* }* }*
  %33 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %32, i64 0, i32 0
  %34 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %32, i64 0, i32 1
  %35 = getelementptr { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %32, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %__qsVar1__coefficients0__)
  %36 = call %Array* @Microsoft__Quantum__Arrays___3292f5d8e8a540d3ab6e72d82eea1185_Most__body(%Array* %qubits__inline__2)
  %37 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %36)
  call void @__quantum__rt__array_unreference(%Array* %36)
  store double %tolerance, double* %33
  store %Array* %__qsVar1__coefficients0__, %Array** %34
  store { %Array* }* %37, { %Array* }** %35
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %32)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar1__coefficients0__)
  %38 = getelementptr { %Array* }, { %Array* }* %37, i64 0, i32 0
  %39 = load %Array*, %Array** %38
  call void @__quantum__rt__array_unreference(%Array* %39)
  %40 = bitcast { %Array* }* %37 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %40)
  call void @__quantum__rt__tuple_unreference(%Tuple* %31)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { double, %Array*, { %Array* }*, %Qubit* }*
  %43 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %42, i64 0, i32 0
  %44 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %42, i64 0, i32 1
  %45 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %42, i64 0, i32 2
  %46 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %42, i64 0, i32 3
  call void @__quantum__rt__array_reference(%Array* %__qsVar2__coefficients1__)
  %47 = sub i64 %8, 2
  %48 = load %Range, %Range* @EmptyRange
  %49 = insertvalue %Range %48, i64 0, 0
  %50 = insertvalue %Range %49, i64 1, 1
  %51 = insertvalue %Range %50, i64 %47, 2
  %52 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits__inline__2, %Range %51, i1 false)
  %53 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %52)
  call void @__quantum__rt__array_unreference(%Array* %52)
  %54 = sub i64 %8, 1
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits__inline__2, i64 %54)
  %56 = bitcast i8* %55 to %Qubit**
  %57 = load %Qubit*, %Qubit** %56
  store double %tolerance, double* %43
  store %Array* %__qsVar2__coefficients1__, %Array** %44
  store { %Array* }* %53, { %Array* }** %45
  store %Qubit* %57, %Qubit** %46
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }*, %Qubit* }* %42)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %coefficients)
  call void @__quantum__rt__array_remove_access(%Array* %qubits__inline__2)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %5)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__coefficientsPadded__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coefficients0__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__coefficients1__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__coefficientsPadded__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar1__coefficients0__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar2__coefficients1__)
  %58 = bitcast { %Array*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %58)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar2__coefficients1__)
  %59 = getelementptr { %Array* }, { %Array* }* %53, i64 0, i32 0
  %60 = load %Array*, %Array** %59
  call void @__quantum__rt__array_unreference(%Array* %60)
  %61 = bitcast { %Array* }* %53 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %61)
  call void @__quantum__rt__tuple_unreference(%Tuple* %41)
  ret void
}

define { double, double }* @Microsoft__Quantum__Canon___844e0d33639542558228c58de0107c92___QsRef0__ComposedOutput____body(%Callable* %outer, %Callable* %inner, double %target) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double }*
  %2 = getelementptr { double }, { double }* %1, i64 0, i32 0
  store double %target, double* %2
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %inner, %Tuple* %0, %Tuple* %3)
  %4 = bitcast %Tuple* %3 to { double }*
  %5 = getelementptr { double }, { double }* %4, i64 0, i32 0
  %6 = load double, double* %5
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { double }*
  %9 = getelementptr { double }, { double }* %8, i64 0, i32 0
  store double %6, double* %9
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %outer, %Tuple* %7, %Tuple* %10)
  %11 = bitcast %Tuple* %10 to { { double, double }* }*
  %12 = getelementptr { { double, double }* }, { { double, double }* }* %11, i64 0, i32 0
  %13 = load { double, double }*, { double, double }** %12
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %14)
  call void @__quantum__rt__tuple_unreference(%Tuple* %0)
  call void @__quantum__rt__tuple_unreference(%Tuple* %3)
  call void @__quantum__rt__tuple_unreference(%Tuple* %7)
  call void @__quantum__rt__tuple_unreference(%Tuple* %14)
  call void @__quantum__rt__tuple_unreference(%Tuple* %10)
  ret { double, double }* %13
}

define double @Microsoft__Quantum__Canon____QsRef0__TrotterStepSize____body(i64 %order) {
entry:
  %0 = call double @__quantum__qis__intasdouble__body(i64 %order)
  %1 = fsub double %0, 1.000000e+00
  %y__inline__1 = fdiv double 1.000000e+00, %1
  %2 = call double @__quantum__qis__powd__body(double 4.000000e+00, double %y__inline__1)
  %3 = fsub double 4.000000e+00, %2
  %4 = fdiv double 1.000000e+00, %3
  ret double %4
}

declare double @__quantum__qis__powd__body(double, double)

define %Callable* @Microsoft__Quantum__Canon__MultiplexerBruteForceFromGenerator__body(i64 %0, %Callable* %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %unitaryGenerator = bitcast %Tuple* %2 to { i64, %Callable* }*
  %3 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 0
  %4 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 1
  store i64 %0, i64* %3
  store %Callable* %1, %Callable** %4
  call void @__quantum__rt__callable_reference(%Callable* %1)
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %6 = bitcast %Tuple* %5 to { %Callable*, { i64, %Callable* }* }*
  %7 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %6, i64 0, i32 0
  %8 = getelementptr { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %6, i64 0, i32 1
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator, %Tuple* null)
  call void @__quantum__rt__callable_reference(%Callable* %1)
  call void @__quantum__rt__tuple_reference(%Tuple* %2)
  store %Callable* %9, %Callable** %7
  store { i64, %Callable* }* %unitaryGenerator, { i64, %Callable* }** %8
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.18, %Tuple* %5)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  call void @__quantum__rt__callable_unreference(%Callable* %1)
  call void @__quantum__rt__tuple_unreference(%Tuple* %2)
  ret %Callable* %10
}

define void @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %1 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %5 = load { %Array* }*, { %Array* }** %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__body({ i64, %Callable* }* %4, { %Array* }* %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %1 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %5 = load { %Array* }*, { %Array* }** %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__adj({ i64, %Callable* }* %4, { %Array* }* %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %1 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { i64, %Callable* }*, { %Array* }*, %Array* }*, { { i64, %Callable* }*, { %Array* }*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__ctl(%Array* %3, { { i64, %Callable* }*, { %Array* }*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %1 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { i64, %Callable* }*, { %Array* }*, %Array* }*, { { i64, %Callable* }*, { %Array* }*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__ctladj(%Array* %3, { { i64, %Callable* }*, { %Array* }*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__body(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %1 = call %Callable* @Microsoft__Quantum__Canon___da6b71fbc3dd4560b9da5376f0eca418_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %3 = bitcast %Tuple* %2 to { %Array*, %Qubit* }*
  %4 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %3, i64 0, i32 0
  %5 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %3, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlRegister)
  store %Array* %controlRegister, %Array** %4
  store %Qubit* %targetRegister, %Qubit** %5
  call void @__quantum__rt__callable_invoke(%Callable* %1, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_unreference(%Array* %bits)
  call void @__quantum__rt__callable_unreference(%Callable* %1)
  call void @__quantum__rt__array_unreference(%Array* %controlRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %2)
  ret void
}

define %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %number, i64 %bits) {
entry:
  %0 = icmp sge i64 %bits, 0
  %1 = icmp sle i64 %bits, 63
  %2 = and i1 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i32 32, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @25, i32 0, i32 0))
  %4 = trunc i64 %bits to i32
  %5 = call i64 @__quantum__rt__int_power(i64 2, i32 %4)
  %6 = call %String* @__quantum__rt__int_to_string(i64 %5)
  %7 = call %String* @__quantum__rt__string_concatenate(%String* %3, %String* %6)
  call void @__quantum__rt__string_unreference(%String* %3)
  call void @__quantum__rt__string_unreference(%String* %6)
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %7)
  %8 = icmp sge i64 %number, 0
  %9 = trunc i64 %bits to i32
  %10 = call i64 @__quantum__rt__int_power(i64 2, i32 %9)
  %11 = icmp slt i64 %number, %10
  %12 = and i1 %8, %11
  %13 = call %String* @__quantum__rt__string_create(i32 43, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @26, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %12, i1 true, %String* %13)
  %14 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %bits)
  %outputBits = alloca %Array*
  store %Array* %14, %Array** %outputBits
  call void @__quantum__rt__array_add_access(%Array* %14)
  %tempInt = alloca i64
  store i64 %number, i64* %tempInt
  %15 = sub i64 %bits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxBit = phi i64 [ 0, %entry ], [ %31, %exiting__1 ]
  %16 = icmp sge i64 %idxBit, %15
  %17 = icmp sle i64 %idxBit, %15
  %18 = select i1 true, i1 %17, i1 %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = load %Array*, %Array** %outputBits
  %20 = call %Array* @__quantum__rt__array_copy(%Array* %19, i1 false)
  %21 = load i64, i64* %tempInt
  %22 = srem i64 %21, 2
  %23 = icmp eq i64 %22, 0
  %24 = select i1 %23, i1 false, i1 true
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %idxBit)
  %26 = bitcast i8* %25 to i1*
  %27 = load i1, i1* %26
  store i1 %24, i1* %26
  %28 = load %Array*, %Array** %outputBits
  call void @__quantum__rt__array_remove_access(%Array* %28)
  store %Array* %20, %Array** %outputBits
  call void @__quantum__rt__array_add_access(%Array* %20)
  %29 = load i64, i64* %tempInt
  %30 = udiv i64 %29, 2
  store i64 %30, i64* %tempInt
  call void @__quantum__rt__array_unreference(%Array* %20)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %31 = add i64 %idxBit, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %32 = load %Array*, %Array** %outputBits
  call void @__quantum__rt__array_reference(%Array* %32)
  call void @__quantum__rt__array_remove_access(%Array* %32)
  call void @__quantum__rt__string_unreference(%String* %7)
  call void @__quantum__rt__string_unreference(%String* %13)
  call void @__quantum__rt__array_unreference(%Array* %14)
  ret %Array* %32
}

define %Callable* @Microsoft__Quantum__Canon___da6b71fbc3dd4560b9da5376f0eca418_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array*, %Callable* }*
  %2 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i64 0, i32 1
  %4 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i64 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %bits)
  call void @__quantum__rt__callable_reference(%Callable* %oracle)
  store %Callable* %5, %Callable** %2
  store %Array* %bits, %Array** %3
  store %Callable* %oracle, %Callable** %4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.19, %Tuple* %0)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  ret %Callable* %6
}

define void @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__adj(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__bits__)
  %1 = call %Callable* @Microsoft__Quantum__Canon___da6b71fbc3dd4560b9da5376f0eca418_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %2 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %2)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %4 = bitcast %Tuple* %3 to { %Array*, %Qubit* }*
  %5 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i64 0, i32 0
  %6 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlRegister)
  store %Array* %controlRegister, %Array** %5
  store %Qubit* %targetRegister, %Qubit** %6
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__bits__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__bits__)
  call void @__quantum__rt__callable_unreference(%Callable* %1)
  call void @__quantum__rt__callable_unreference(%Callable* %2)
  call void @__quantum__rt__array_unreference(%Array* %controlRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %3)
  ret void
}

define void @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__ctl(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %numberState = load i64, i64* %1
  %2 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  %3 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %4 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %6 = call %Callable* @Microsoft__Quantum__Canon___da6b71fbc3dd4560b9da5376f0eca418_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array*, %Qubit* }* }*
  %10 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %9, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlRegister)
  store %Array* %controlRegister, %Array** %14
  store %Qubit* %targetRegister, %Qubit** %15
  store %Array* %__controlQubits__, %Array** %10
  store { %Array*, %Qubit* }* %13, { %Array*, %Qubit* }** %11
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_unreference(%Array* %bits)
  call void @__quantum__rt__callable_unreference(%Callable* %6)
  call void @__quantum__rt__callable_unreference(%Callable* %7)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %controlRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___1711362cef654d8baf799105644c46da_ApplyControlledOnInt__ctladj(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %numberState = load i64, i64* %1
  %2 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  %3 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %4 = getelementptr { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__bits__)
  %6 = call %Callable* @Microsoft__Quantum__Canon___da6b71fbc3dd4560b9da5376f0eca418_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %7)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array*, %Qubit* }* }*
  %10 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %9, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlRegister)
  store %Array* %controlRegister, %Array** %14
  store %Qubit* %targetRegister, %Qubit** %15
  store %Array* %__controlQubits__, %Array** %10
  store { %Array*, %Qubit* }* %13, { %Array*, %Qubit* }** %11
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__bits__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__bits__)
  call void @__quantum__rt__callable_unreference(%Callable* %6)
  call void @__quantum__rt__callable_unreference(%Callable* %7)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %controlRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__body(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  call void @__quantum__rt__array_add_access(%Array* %targetRegister)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %1 = call %Callable* @Microsoft__Quantum__Canon___24272c307d4d463aa428a9de41522c34_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %3 = bitcast %Tuple* %2 to { %Array*, %Array* }*
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlRegister)
  call void @__quantum__rt__array_reference(%Array* %targetRegister)
  store %Array* %controlRegister, %Array** %4
  store %Array* %targetRegister, %Array** %5
  call void @__quantum__rt__callable_invoke(%Callable* %1, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %targetRegister)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_unreference(%Array* %bits)
  call void @__quantum__rt__callable_unreference(%Callable* %1)
  call void @__quantum__rt__array_unreference(%Array* %controlRegister)
  call void @__quantum__rt__array_unreference(%Array* %targetRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %2)
  ret void
}

define %Callable* @Microsoft__Quantum__Canon___24272c307d4d463aa428a9de41522c34_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 3))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array*, %Callable* }*
  %2 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i64 0, i32 1
  %4 = getelementptr { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i64 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %bits)
  call void @__quantum__rt__callable_reference(%Callable* %oracle)
  store %Callable* %5, %Callable** %2
  store %Array* %bits, %Array** %3
  store %Callable* %oracle, %Callable** %4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.20, %Tuple* %0)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  ret %Callable* %6
}

define void @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__adj(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  call void @__quantum__rt__array_add_access(%Array* %targetRegister)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__bits__)
  %1 = call %Callable* @Microsoft__Quantum__Canon___24272c307d4d463aa428a9de41522c34_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %2 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %2)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %4 = bitcast %Tuple* %3 to { %Array*, %Array* }*
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %4, i64 0, i32 0
  %6 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %4, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlRegister)
  call void @__quantum__rt__array_reference(%Array* %targetRegister)
  store %Array* %controlRegister, %Array** %5
  store %Array* %targetRegister, %Array** %6
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %targetRegister)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__bits__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__bits__)
  call void @__quantum__rt__callable_unreference(%Callable* %1)
  call void @__quantum__rt__callable_unreference(%Callable* %2)
  call void @__quantum__rt__array_unreference(%Array* %controlRegister)
  call void @__quantum__rt__array_unreference(%Array* %targetRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %3)
  ret void
}

define void @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__ctl(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %numberState = load i64, i64* %1
  %2 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  %3 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %4 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %targetRegister = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %targetRegister)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %6 = call %Callable* @Microsoft__Quantum__Canon___24272c307d4d463aa428a9de41522c34_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array*, %Array* }* }*
  %10 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %9, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, %Array* }*
  %14 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %13, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlRegister)
  call void @__quantum__rt__array_reference(%Array* %targetRegister)
  store %Array* %controlRegister, %Array** %14
  store %Array* %targetRegister, %Array** %15
  store %Array* %__controlQubits__, %Array** %10
  store { %Array*, %Array* }* %13, { %Array*, %Array* }** %11
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %targetRegister)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_unreference(%Array* %bits)
  call void @__quantum__rt__callable_unreference(%Callable* %6)
  call void @__quantum__rt__callable_unreference(%Callable* %7)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %controlRegister)
  call void @__quantum__rt__array_unreference(%Array* %targetRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___644827fb357f44baa7a9a6a93e61da18_ApplyControlledOnInt__ctladj(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %numberState = load i64, i64* %1
  %2 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  %3 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %4 = getelementptr { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %targetRegister = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %targetRegister)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__bits__)
  %6 = call %Callable* @Microsoft__Quantum__Canon___24272c307d4d463aa428a9de41522c34_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %7)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array*, %Array* }* }*
  %10 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %9, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %13 = bitcast %Tuple* %12 to { %Array*, %Array* }*
  %14 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %13, i64 0, i32 0
  %15 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %13, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlRegister)
  call void @__quantum__rt__array_reference(%Array* %targetRegister)
  store %Array* %controlRegister, %Array** %14
  store %Array* %targetRegister, %Array** %15
  store %Array* %__controlQubits__, %Array** %10
  store { %Array*, %Array* }* %13, { %Array*, %Array* }** %11
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %targetRegister)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__bits__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__bits__)
  call void @__quantum__rt__callable_unreference(%Callable* %6)
  call void @__quantum__rt__callable_unreference(%Callable* %7)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %controlRegister)
  call void @__quantum__rt__array_unreference(%Array* %targetRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__body(%Array* %input) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %input)
  call void @__quantum__rt__array_remove_access(%Array* %input)
  ret void
}

define void @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__adj(%Array* %input) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %input)
  call void @__quantum__rt__array_remove_access(%Array* %input)
  ret void
}

define void @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__ctl(%Array* %__controlQubits__, %Array* %input) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_add_access(%Array* %input)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %input)
  ret void
}

define void @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__ctladj(%Array* %__controlQubits__, %Array* %input) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_add_access(%Array* %input)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %input)
  ret void
}

define void @Microsoft__Quantum__Canon___64296e0a5b7546ff9012499eddaeb34d_ApplyWithCA__body(%Callable* %outerOperation, %Callable* %innerOperation, %Qubit* %target) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Qubit* }*
  %2 = getelementptr { %Qubit* }, { %Qubit* }* %1, i64 0, i32 0
  store %Qubit* %target, %Qubit** %2
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %0, %Tuple* null)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Qubit* }*
  %5 = getelementptr { %Qubit* }, { %Qubit* }* %4, i64 0, i32 0
  store %Qubit* %target, %Qubit** %5
  call void @__quantum__rt__callable_invoke(%Callable* %innerOperation, %Tuple* %3, %Tuple* null)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Qubit* }*
  %9 = getelementptr { %Qubit* }, { %Qubit* }* %8, i64 0, i32 0
  store %Qubit* %target, %Qubit** %9
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__tuple_unreference(%Tuple* %0)
  call void @__quantum__rt__tuple_unreference(%Tuple* %3)
  call void @__quantum__rt__callable_unreference(%Callable* %6)
  call void @__quantum__rt__tuple_unreference(%Tuple* %7)
  ret void
}

define void @Microsoft__Quantum__Canon___64296e0a5b7546ff9012499eddaeb34d_ApplyWithCA__adj(%Callable* %outerOperation, %Callable* %innerOperation, %Qubit* %target) {
entry:
  %0 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Qubit* }*
  %3 = getelementptr { %Qubit* }, { %Qubit* }* %2, i64 0, i32 0
  store %Qubit* %target, %Qubit** %3
  call void @__quantum__rt__callable_invoke(%Callable* %0, %Tuple* %1, %Tuple* null)
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Qubit* }*
  %7 = getelementptr { %Qubit* }, { %Qubit* }* %6, i64 0, i32 0
  store %Qubit* %target, %Qubit** %7
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Qubit* }*
  %11 = getelementptr { %Qubit* }, { %Qubit* }* %10, i64 0, i32 0
  store %Qubit* %target, %Qubit** %11
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  call void @__quantum__rt__callable_unreference(%Callable* %0)
  call void @__quantum__rt__tuple_unreference(%Tuple* %1)
  call void @__quantum__rt__callable_unreference(%Callable* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %5)
  call void @__quantum__rt__callable_unreference(%Callable* %8)
  call void @__quantum__rt__tuple_unreference(%Tuple* %9)
  ret void
}

define void @Microsoft__Quantum__Canon___64296e0a5b7546ff9012499eddaeb34d_ApplyWithCA__ctl(%Array* %controlRegister, { %Callable*, %Callable*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %1 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i64 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1
  %2 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i64 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2
  %3 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i64 0, i32 2
  %target = load %Qubit*, %Qubit** %3
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Qubit* }*
  %6 = getelementptr { %Qubit* }, { %Qubit* }* %5, i64 0, i32 0
  store %Qubit* %target, %Qubit** %6
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %4, %Tuple* null)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %9 = bitcast %Tuple* %8 to { %Array*, %Qubit* }*
  %10 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i64 0, i32 0
  %11 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlRegister)
  store %Array* %controlRegister, %Array** %10
  store %Qubit* %target, %Qubit** %11
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Qubit* }*
  %15 = getelementptr { %Qubit* }, { %Qubit* }* %14, i64 0, i32 0
  store %Qubit* %target, %Qubit** %15
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %4)
  call void @__quantum__rt__callable_unreference(%Callable* %7)
  call void @__quantum__rt__array_unreference(%Array* %controlRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  call void @__quantum__rt__callable_unreference(%Callable* %12)
  call void @__quantum__rt__tuple_unreference(%Tuple* %13)
  ret void
}

define void @Microsoft__Quantum__Canon___64296e0a5b7546ff9012499eddaeb34d_ApplyWithCA__ctladj(%Array* %controlRegister, { %Callable*, %Callable*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %1 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i64 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1
  %2 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i64 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2
  %3 = getelementptr { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i64 0, i32 2
  %target = load %Qubit*, %Qubit** %3
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Qubit* }*
  %7 = getelementptr { %Qubit* }, { %Qubit* }* %6, i64 0, i32 0
  store %Qubit* %target, %Qubit** %7
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %8)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %10 = bitcast %Tuple* %9 to { %Array*, %Qubit* }*
  %11 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i64 0, i32 0
  %12 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlRegister)
  store %Array* %controlRegister, %Array** %11
  store %Qubit* %target, %Qubit** %12
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  %13 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %13)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Qubit* }*
  %16 = getelementptr { %Qubit* }, { %Qubit* }* %15, i64 0, i32 0
  store %Qubit* %target, %Qubit** %16
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %14, %Tuple* null)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__callable_unreference(%Callable* %4)
  call void @__quantum__rt__tuple_unreference(%Tuple* %5)
  call void @__quantum__rt__callable_unreference(%Callable* %8)
  call void @__quantum__rt__array_unreference(%Array* %controlRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %9)
  call void @__quantum__rt__callable_unreference(%Callable* %13)
  call void @__quantum__rt__tuple_unreference(%Tuple* %14)
  ret void
}

define void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____body(i64 %order, { i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %target)
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  %3 = icmp sgt i64 %order, 2
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %stepSizeOuter = call double @Microsoft__Quantum__Canon____QsRef0__TrotterStepSize____body(i64 %order)
  %4 = fmul double 4.000000e+00, %stepSizeOuter
  %stepSizeInner = fsub double 1.000000e+00, %4
  %5 = sub i64 %order, 2
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Callable* }*
  %8 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %7, i64 0, i32 0
  %9 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %7, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %8
  store %Callable* %op, %Callable** %9
  %10 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____body(i64 %5, { i64, %Callable* }* %7, double %10, %Array* %target)
  %11 = sub i64 %order, 2
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %13, i64 0, i32 0
  %15 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %13, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %14
  store %Callable* %op, %Callable** %15
  %16 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____body(i64 %11, { i64, %Callable* }* %13, double %16, %Array* %target)
  %17 = sub i64 %order, 2
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { i64, %Callable* }*
  %20 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %19, i64 0, i32 0
  %21 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %19, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %20
  store %Callable* %op, %Callable** %21
  %22 = fmul double %stepSizeInner, %stepSize
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____body(i64 %17, { i64, %Callable* }* %19, double %22, %Array* %target)
  %23 = sub i64 %order, 2
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i64, %Callable* }*
  %26 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %25, i64 0, i32 0
  %27 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %25, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %26
  store %Callable* %op, %Callable** %27
  %28 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____body(i64 %23, { i64, %Callable* }* %25, double %28, %Array* %target)
  %29 = sub i64 %order, 2
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { i64, %Callable* }*
  %32 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %31, i64 0, i32 0
  %33 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %31, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %32
  store %Callable* %op, %Callable** %33
  %34 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____body(i64 %29, { i64, %Callable* }* %31, double %34, %Array* %target)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %18)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %30)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %35 = icmp eq i64 %order, 2
  br i1 %35, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { i64, %Callable* }*
  %38 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %37, i64 0, i32 0
  %39 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %37, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %38
  store %Callable* %op, %Callable** %39
  call void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____body({ i64, %Callable* }* %37, double %stepSize, %Array* %target)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %36)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i64, %Callable* }*
  %42 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %41, i64 0, i32 0
  %43 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %41, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %42
  store %Callable* %op, %Callable** %43
  call void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____body({ i64, %Callable* }* %41, double %stepSize, %Array* %target)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %40)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____adj(i64 %order, { i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %target)
  %1 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 0
  %nSteps = load i64, i64* %1
  %2 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %0, i64 0, i32 1
  %op = load %Callable*, %Callable** %2
  %3 = icmp sgt i64 %order, 2
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %__qsVar0__stepSizeOuter__ = call double @Microsoft__Quantum__Canon____QsRef0__TrotterStepSize____body(i64 %order)
  %4 = fmul double 4.000000e+00, %__qsVar0__stepSizeOuter__
  %__qsVar1__stepSizeInner__ = fsub double 1.000000e+00, %4
  %5 = sub i64 %order, 2
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Callable* }*
  %8 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %7, i64 0, i32 0
  %9 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %7, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %8
  store %Callable* %op, %Callable** %9
  %10 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____adj(i64 %5, { i64, %Callable* }* %7, double %10, %Array* %target)
  %11 = sub i64 %order, 2
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %13, i64 0, i32 0
  %15 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %13, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %14
  store %Callable* %op, %Callable** %15
  %16 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____adj(i64 %11, { i64, %Callable* }* %13, double %16, %Array* %target)
  %17 = sub i64 %order, 2
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { i64, %Callable* }*
  %20 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %19, i64 0, i32 0
  %21 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %19, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %20
  store %Callable* %op, %Callable** %21
  %22 = fmul double %__qsVar1__stepSizeInner__, %stepSize
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____adj(i64 %17, { i64, %Callable* }* %19, double %22, %Array* %target)
  %23 = sub i64 %order, 2
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i64, %Callable* }*
  %26 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %25, i64 0, i32 0
  %27 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %25, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %26
  store %Callable* %op, %Callable** %27
  %28 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____adj(i64 %23, { i64, %Callable* }* %25, double %28, %Array* %target)
  %29 = sub i64 %order, 2
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { i64, %Callable* }*
  %32 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %31, i64 0, i32 0
  %33 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %31, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %32
  store %Callable* %op, %Callable** %33
  %34 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____adj(i64 %29, { i64, %Callable* }* %31, double %34, %Array* %target)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %18)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %30)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %35 = icmp eq i64 %order, 2
  br i1 %35, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { i64, %Callable* }*
  %38 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %37, i64 0, i32 0
  %39 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %37, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %38
  store %Callable* %op, %Callable** %39
  call void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____adj({ i64, %Callable* }* %37, double %stepSize, %Array* %target)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %36)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i64, %Callable* }*
  %42 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %41, i64 0, i32 0
  %43 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %41, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %42
  store %Callable* %op, %Callable** %43
  call void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____adj({ i64, %Callable* }* %41, double %stepSize, %Array* %target)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %40)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %order = load i64, i64* %1
  %2 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = load { i64, %Callable* }*, { i64, %Callable* }** %2
  %4 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %stepSize = load double, double* %4
  %5 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 3
  %target = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %target)
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %3, i64 0, i32 0
  %nSteps = load i64, i64* %6
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %3, i64 0, i32 1
  %op = load %Callable*, %Callable** %7
  %8 = icmp sgt i64 %order, 2
  br i1 %8, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %stepSizeOuter = call double @Microsoft__Quantum__Canon____QsRef0__TrotterStepSize____body(i64 %order)
  %9 = fmul double 4.000000e+00, %stepSizeOuter
  %stepSizeInner = fsub double 1.000000e+00, %9
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, { i64, %Callable* }*, double, %Array* }*
  %12 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 2
  %15 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 3
  %16 = sub i64 %order, 2
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { i64, %Callable* }*
  %19 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %18, i64 0, i32 0
  %20 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %18, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %19
  store %Callable* %op, %Callable** %20
  %21 = fmul double %stepSizeOuter, %stepSize
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %16, i64* %12
  store { i64, %Callable* }* %18, { i64, %Callable* }** %13
  store double %21, double* %14
  store %Array* %target, %Array** %15
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %11)
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { i64, { i64, %Callable* }*, double, %Array* }*
  %24 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 0
  %25 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 1
  %26 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 2
  %27 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 3
  %28 = sub i64 %order, 2
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64, %Callable* }*
  %31 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %30, i64 0, i32 0
  %32 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %30, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %31
  store %Callable* %op, %Callable** %32
  %33 = fmul double %stepSizeOuter, %stepSize
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %28, i64* %24
  store { i64, %Callable* }* %30, { i64, %Callable* }** %25
  store double %33, double* %26
  store %Array* %target, %Array** %27
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %23)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { i64, { i64, %Callable* }*, double, %Array* }*
  %36 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 0
  %37 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 1
  %38 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 2
  %39 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 3
  %40 = sub i64 %order, 2
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { i64, %Callable* }*
  %43 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %42, i64 0, i32 0
  %44 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %42, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %43
  store %Callable* %op, %Callable** %44
  %45 = fmul double %stepSizeInner, %stepSize
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %40, i64* %36
  store { i64, %Callable* }* %42, { i64, %Callable* }** %37
  store double %45, double* %38
  store %Array* %target, %Array** %39
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %35)
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { i64, { i64, %Callable* }*, double, %Array* }*
  %48 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 0
  %49 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 1
  %50 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 2
  %51 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 3
  %52 = sub i64 %order, 2
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { i64, %Callable* }*
  %55 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %54, i64 0, i32 0
  %56 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %54, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %55
  store %Callable* %op, %Callable** %56
  %57 = fmul double %stepSizeOuter, %stepSize
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %52, i64* %48
  store { i64, %Callable* }* %54, { i64, %Callable* }** %49
  store double %57, double* %50
  store %Array* %target, %Array** %51
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %47)
  %58 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %59 = bitcast %Tuple* %58 to { i64, { i64, %Callable* }*, double, %Array* }*
  %60 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 0
  %61 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 1
  %62 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 2
  %63 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 3
  %64 = sub i64 %order, 2
  %65 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %66 = bitcast %Tuple* %65 to { i64, %Callable* }*
  %67 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %66, i64 0, i32 0
  %68 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %66, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %67
  store %Callable* %op, %Callable** %68
  %69 = fmul double %stepSizeOuter, %stepSize
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %64, i64* %60
  store { i64, %Callable* }* %66, { i64, %Callable* }** %61
  store double %69, double* %62
  store %Array* %target, %Array** %63
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %59)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %17)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %10)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %29)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %22)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %41)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %53)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %46)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %65)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %58)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %70 = icmp eq i64 %order, 2
  br i1 %70, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { { i64, %Callable* }*, double, %Array* }*
  %73 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 0
  %74 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 1
  %75 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 2
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %77 = bitcast %Tuple* %76 to { i64, %Callable* }*
  %78 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %77, i64 0, i32 0
  %79 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %77, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %78
  store %Callable* %op, %Callable** %79
  call void @__quantum__rt__array_reference(%Array* %target)
  store { i64, %Callable* }* %77, { i64, %Callable* }** %73
  store double %stepSize, double* %74
  store %Array* %target, %Array** %75
  call void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %72)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %76)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %80 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %81 = bitcast %Tuple* %80 to { { i64, %Callable* }*, double, %Array* }*
  %82 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i64 0, i32 0
  %83 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i64 0, i32 1
  %84 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i64 0, i32 2
  %85 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %86 = bitcast %Tuple* %85 to { i64, %Callable* }*
  %87 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %86, i64 0, i32 0
  %88 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %86, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %87
  store %Callable* %op, %Callable** %88
  call void @__quantum__rt__array_reference(%Array* %target)
  store { i64, %Callable* }* %86, { i64, %Callable* }** %82
  store double %stepSize, double* %83
  store %Array* %target, %Array** %84
  call void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %81)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %85)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %80)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 0
  %order = load i64, i64* %1
  %2 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = load { i64, %Callable* }*, { i64, %Callable* }** %2
  %4 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 2
  %stepSize = load double, double* %4
  %5 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i64 0, i32 3
  %target = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %target)
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %3, i64 0, i32 0
  %nSteps = load i64, i64* %6
  %7 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %3, i64 0, i32 1
  %op = load %Callable*, %Callable** %7
  %8 = icmp sgt i64 %order, 2
  br i1 %8, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %__qsVar0__stepSizeOuter__ = call double @Microsoft__Quantum__Canon____QsRef0__TrotterStepSize____body(i64 %order)
  %9 = fmul double 4.000000e+00, %__qsVar0__stepSizeOuter__
  %__qsVar1__stepSizeInner__ = fsub double 1.000000e+00, %9
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, { i64, %Callable* }*, double, %Array* }*
  %12 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 0
  %13 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 1
  %14 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 2
  %15 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i64 0, i32 3
  %16 = sub i64 %order, 2
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { i64, %Callable* }*
  %19 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %18, i64 0, i32 0
  %20 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %18, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %19
  store %Callable* %op, %Callable** %20
  %21 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %16, i64* %12
  store { i64, %Callable* }* %18, { i64, %Callable* }** %13
  store double %21, double* %14
  store %Array* %target, %Array** %15
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %11)
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { i64, { i64, %Callable* }*, double, %Array* }*
  %24 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 0
  %25 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 1
  %26 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 2
  %27 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i64 0, i32 3
  %28 = sub i64 %order, 2
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64, %Callable* }*
  %31 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %30, i64 0, i32 0
  %32 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %30, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %31
  store %Callable* %op, %Callable** %32
  %33 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %28, i64* %24
  store { i64, %Callable* }* %30, { i64, %Callable* }** %25
  store double %33, double* %26
  store %Array* %target, %Array** %27
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %23)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { i64, { i64, %Callable* }*, double, %Array* }*
  %36 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 0
  %37 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 1
  %38 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 2
  %39 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i64 0, i32 3
  %40 = sub i64 %order, 2
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { i64, %Callable* }*
  %43 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %42, i64 0, i32 0
  %44 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %42, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %43
  store %Callable* %op, %Callable** %44
  %45 = fmul double %__qsVar1__stepSizeInner__, %stepSize
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %40, i64* %36
  store { i64, %Callable* }* %42, { i64, %Callable* }** %37
  store double %45, double* %38
  store %Array* %target, %Array** %39
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %35)
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { i64, { i64, %Callable* }*, double, %Array* }*
  %48 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 0
  %49 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 1
  %50 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 2
  %51 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i64 0, i32 3
  %52 = sub i64 %order, 2
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { i64, %Callable* }*
  %55 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %54, i64 0, i32 0
  %56 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %54, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %55
  store %Callable* %op, %Callable** %56
  %57 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %52, i64* %48
  store { i64, %Callable* }* %54, { i64, %Callable* }** %49
  store double %57, double* %50
  store %Array* %target, %Array** %51
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %47)
  %58 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %59 = bitcast %Tuple* %58 to { i64, { i64, %Callable* }*, double, %Array* }*
  %60 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 0
  %61 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 1
  %62 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 2
  %63 = getelementptr { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i64 0, i32 3
  %64 = sub i64 %order, 2
  %65 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %66 = bitcast %Tuple* %65 to { i64, %Callable* }*
  %67 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %66, i64 0, i32 0
  %68 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %66, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %67
  store %Callable* %op, %Callable** %68
  %69 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @__quantum__rt__array_reference(%Array* %target)
  store i64 %64, i64* %60
  store { i64, %Callable* }* %66, { i64, %Callable* }** %61
  store double %69, double* %62
  store %Array* %target, %Array** %63
  call void @Microsoft__Quantum__Canon___b6050a0a58ae488087a44b7e70df3e1b___QsRef0__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %59)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %17)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %10)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %29)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %22)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %41)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %53)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %46)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %65)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %58)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %70 = icmp eq i64 %order, 2
  br i1 %70, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { { i64, %Callable* }*, double, %Array* }*
  %73 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 0
  %74 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 1
  %75 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i64 0, i32 2
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %77 = bitcast %Tuple* %76 to { i64, %Callable* }*
  %78 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %77, i64 0, i32 0
  %79 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %77, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %78
  store %Callable* %op, %Callable** %79
  call void @__quantum__rt__array_reference(%Array* %target)
  store { i64, %Callable* }* %77, { i64, %Callable* }** %73
  store double %stepSize, double* %74
  store %Array* %target, %Array** %75
  call void @Microsoft__Quantum__Canon___4172bbc8ce904af1bdc7dacb76a39c04___QsRef0__Trotter2ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %72)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %76)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %71)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %80 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %81 = bitcast %Tuple* %80 to { { i64, %Callable* }*, double, %Array* }*
  %82 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i64 0, i32 0
  %83 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i64 0, i32 1
  %84 = getelementptr { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i64 0, i32 2
  %85 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %86 = bitcast %Tuple* %85 to { i64, %Callable* }*
  %87 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %86, i64 0, i32 0
  %88 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %86, i64 0, i32 1
  call void @__quantum__rt__callable_reference(%Callable* %op)
  store i64 %nSteps, i64* %87
  store %Callable* %op, %Callable** %88
  call void @__quantum__rt__array_reference(%Array* %target)
  store { i64, %Callable* }* %86, { i64, %Callable* }** %82
  store double %stepSize, double* %83
  store %Array* %target, %Array** %84
  call void @Microsoft__Quantum__Canon___d0443ef82bcc476c8f61e8bee9474b9a___QsRef0__Trotter1ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %81)
  call void @__quantum__rt__callable_unreference(%Callable* %op)
  call void @__quantum__rt__tuple_unreference(%Tuple* %85)
  call void @__quantum__rt__array_unreference(%Array* %target)
  call void @__quantum__rt__tuple_unreference(%Tuple* %80)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %5 = load %Array*, %Array** %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Qubit*, %Qubit** %4
  call void @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__body(%Array* %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %5 = load %Array*, %Array** %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Qubit*, %Qubit** %4
  call void @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__adj(%Array* %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Callable*, %Array*, %Qubit* }*, { %Array*, %Callable*, %Array*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__ctl(%Array* %3, { %Array*, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Callable*, %Array*, %Qubit* }*, { %Array*, %Callable*, %Array*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__ctladj(%Array* %3, { %Array*, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %5 = load %Array*, %Array** %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__body(%Array* %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %5 = load %Array*, %Array** %1
  %6 = load %Callable*, %Callable** %2
  %7 = load %Array*, %Array** %3
  %8 = load %Array*, %Array** %4
  call void @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__adj(%Array* %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define void @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Callable*, %Array*, %Array* }*, { %Array*, %Callable*, %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__ctl(%Array* %3, { %Array*, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Callable*, %Array*, %Array* }*, { %Array*, %Callable*, %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__ctladj(%Array* %3, { %Array*, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__body(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %bits)
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @6, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange
  %6 = insertvalue %Range %5, i64 0, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %8, i1 false)
  call void @__quantum__rt__array_add_access(%Array* %controlSubregister)
  %9 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %9, i1 false, %Array* %bits, %Array* %controlSubregister)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %12 = bitcast %Tuple* %11 to { %Array*, %Qubit* }*
  %13 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %12, i64 0, i32 0
  %14 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %12, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlSubregister)
  store %Array* %controlSubregister, %Array** %13
  store %Qubit* %targetRegister, %Qubit** %14
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %11, %Tuple* null)
  %15 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %15, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %controlSubregister)
  call void @__quantum__rt__string_unreference(%String* %3)
  call void @__quantum__rt__array_unreference(%Array* %controlSubregister)
  call void @__quantum__rt__callable_unreference(%Callable* %10)
  call void @__quantum__rt__array_unreference(%Array* %controlSubregister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %11)
  ret void
}

define void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %actual, %String* %message) {
entry:
  %0 = xor i1 %actual, true
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__string_reference(%String* %message)
  call void @__quantum__rt__fail(%String* %message)
  unreachable

continue__1:                                      ; preds = %entry
  ret void
}

define void @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__adj(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %bits)
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @7, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange
  %6 = insertvalue %Range %5, i64 0, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %8, i1 false)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__controlSubregister__)
  %9 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %9, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %12 = bitcast %Tuple* %11 to { %Array*, %Qubit* }*
  %13 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %12, i64 0, i32 0
  %14 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %12, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__qsVar0__controlSubregister__)
  store %Array* %__qsVar0__controlSubregister__, %Array** %13
  store %Qubit* %targetRegister, %Qubit** %14
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %11, %Tuple* null)
  %15 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %15, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__string_unreference(%String* %3)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__callable_unreference(%Callable* %10)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__tuple_unreference(%Tuple* %11)
  ret void
}

define void @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__ctl(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %bits = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @8, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = load %Range, %Range* @EmptyRange
  %11 = insertvalue %Range %10, i64 0, 0
  %12 = insertvalue %Range %11, i64 1, 1
  %13 = insertvalue %Range %12, i64 %9, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %13, i1 false)
  call void @__quantum__rt__array_add_access(%Array* %controlSubregister)
  %14 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %14, i1 false, %Array* %bits, %Array* %controlSubregister)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Qubit* }* }*
  %18 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i64 0, i32 0
  %19 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, %Qubit* }*
  %22 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlSubregister)
  store %Array* %controlSubregister, %Array** %22
  store %Qubit* %targetRegister, %Qubit** %23
  store %Array* %__controlQubits__, %Array** %18
  store { %Array*, %Qubit* }* %21, { %Array*, %Qubit* }** %19
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  %24 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %24, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %controlSubregister)
  call void @__quantum__rt__string_unreference(%String* %8)
  call void @__quantum__rt__array_unreference(%Array* %controlSubregister)
  call void @__quantum__rt__callable_unreference(%Callable* %15)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %controlSubregister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  call void @__quantum__rt__tuple_unreference(%Tuple* %16)
  ret void
}

define void @Microsoft__Quantum__Canon___5df01e0166474a568b34b4199abbf1d3_ApplyControlledOnBitString__ctladj(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 0
  %bits = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i64 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @9, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = load %Range, %Range* @EmptyRange
  %11 = insertvalue %Range %10, i64 0, 0
  %12 = insertvalue %Range %11, i64 1, 1
  %13 = insertvalue %Range %12, i64 %9, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %13, i1 false)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__controlSubregister__)
  %14 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %14, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Qubit* }* }*
  %18 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i64 0, i32 0
  %19 = getelementptr { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, %Qubit* }*
  %22 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__qsVar0__controlSubregister__)
  store %Array* %__qsVar0__controlSubregister__, %Array** %22
  store %Qubit* %targetRegister, %Qubit** %23
  store %Array* %__controlQubits__, %Array** %18
  store { %Array*, %Qubit* }* %21, { %Array*, %Qubit* }** %19
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  %24 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %24, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__string_unreference(%String* %8)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__callable_unreference(%Callable* %15)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  call void @__quantum__rt__tuple_unreference(%Tuple* %16)
  ret void
}

define void @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__body(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %bits)
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  call void @__quantum__rt__array_add_access(%Array* %targetRegister)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @10, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange
  %6 = insertvalue %Range %5, i64 0, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %8, i1 false)
  call void @__quantum__rt__array_add_access(%Array* %controlSubregister)
  %9 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %9, i1 false, %Array* %bits, %Array* %controlSubregister)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %12 = bitcast %Tuple* %11 to { %Array*, %Array* }*
  %13 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 0
  %14 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlSubregister)
  call void @__quantum__rt__array_reference(%Array* %targetRegister)
  store %Array* %controlSubregister, %Array** %13
  store %Array* %targetRegister, %Array** %14
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %11, %Tuple* null)
  %15 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %15, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %targetRegister)
  call void @__quantum__rt__array_remove_access(%Array* %controlSubregister)
  call void @__quantum__rt__string_unreference(%String* %3)
  call void @__quantum__rt__array_unreference(%Array* %controlSubregister)
  call void @__quantum__rt__callable_unreference(%Callable* %10)
  call void @__quantum__rt__array_unreference(%Array* %controlSubregister)
  call void @__quantum__rt__array_unreference(%Array* %targetRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %11)
  ret void
}

define void @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__adj(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %bits)
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  call void @__quantum__rt__array_add_access(%Array* %targetRegister)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @11, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange
  %6 = insertvalue %Range %5, i64 0, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %8, i1 false)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__controlSubregister__)
  %9 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %9, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %12 = bitcast %Tuple* %11 to { %Array*, %Array* }*
  %13 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 0
  %14 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %12, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_reference(%Array* %targetRegister)
  store %Array* %__qsVar0__controlSubregister__, %Array** %13
  store %Array* %targetRegister, %Array** %14
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %11, %Tuple* null)
  %15 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %15, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %targetRegister)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__string_unreference(%String* %3)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__callable_unreference(%Callable* %10)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_unreference(%Array* %targetRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %11)
  ret void
}

define void @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__ctl(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %bits = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %targetRegister = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %targetRegister)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @12, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = load %Range, %Range* @EmptyRange
  %11 = insertvalue %Range %10, i64 0, 0
  %12 = insertvalue %Range %11, i64 1, 1
  %13 = insertvalue %Range %12, i64 %9, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %13, i1 false)
  call void @__quantum__rt__array_add_access(%Array* %controlSubregister)
  %14 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %14, i1 false, %Array* %bits, %Array* %controlSubregister)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Array* }* }*
  %18 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i64 0, i32 0
  %19 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, %Array* }*
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %controlSubregister)
  call void @__quantum__rt__array_reference(%Array* %targetRegister)
  store %Array* %controlSubregister, %Array** %22
  store %Array* %targetRegister, %Array** %23
  store %Array* %__controlQubits__, %Array** %18
  store { %Array*, %Array* }* %21, { %Array*, %Array* }** %19
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  %24 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %24, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %targetRegister)
  call void @__quantum__rt__array_remove_access(%Array* %controlSubregister)
  call void @__quantum__rt__string_unreference(%String* %8)
  call void @__quantum__rt__array_unreference(%Array* %controlSubregister)
  call void @__quantum__rt__callable_unreference(%Callable* %15)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %controlSubregister)
  call void @__quantum__rt__array_unreference(%Array* %targetRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  call void @__quantum__rt__tuple_unreference(%Tuple* %16)
  ret void
}

define void @Microsoft__Quantum__Canon___05acf02a05474734b86d09f87040c54d_ApplyControlledOnBitString__ctladj(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 0
  %bits = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %2 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 1
  %oracle = load %Callable*, %Callable** %2
  %3 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 2
  %controlRegister = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %controlRegister)
  %4 = getelementptr { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i64 0, i32 3
  %targetRegister = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %targetRegister)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @13, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = load %Range, %Range* @EmptyRange
  %11 = insertvalue %Range %10, i64 0, 0
  %12 = insertvalue %Range %11, i64 1, 1
  %13 = insertvalue %Range %12, i64 %9, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %13, i1 false)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__controlSubregister__)
  %14 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %14, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Array* }* }*
  %18 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i64 0, i32 0
  %19 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, %Array* }*
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_reference(%Array* %targetRegister)
  store %Array* %__qsVar0__controlSubregister__, %Array** %22
  store %Array* %targetRegister, %Array** %23
  store %Array* %__controlQubits__, %Array** %18
  store { %Array*, %Array* }* %21, { %Array*, %Array* }** %19
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  %24 = load i2, i2* @PauliX
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %24, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %controlRegister)
  call void @__quantum__rt__array_remove_access(%Array* %targetRegister)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__string_unreference(%String* %8)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__callable_unreference(%Callable* %15)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_unreference(%Array* %targetRegister)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  call void @__quantum__rt__tuple_unreference(%Tuple* %16)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, { %Array* }*, %Qubit* }*
  %1 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %5 = load double, double* %1
  %6 = load %Array*, %Array** %2
  %7 = load { %Array* }*, { %Array* }** %3
  %8 = load %Qubit*, %Qubit** %4
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %5, %Array* %6, { %Array* }* %7, %Qubit* %8)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, { %Array* }*, %Qubit* }*
  %1 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %5 = load double, double* %1
  %6 = load %Array*, %Array** %2
  %7 = load { %Array* }*, { %Array* }** %3
  %8 = load %Qubit*, %Qubit** %4
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %5, %Array* %6, { %Array* }* %7, %Qubit* %8)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array*, { %Array* }*, %Qubit* }*, { double, %Array*, { %Array* }*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %3, { double, %Array*, { %Array* }*, %Qubit* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array*, { %Array* }*, %Qubit* }*, { double, %Array*, { %Array* }*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %3, { double, %Array*, { %Array* }*, %Qubit* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %1 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %5 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 4
  %6 = load double, double* %1
  %7 = load %Array*, %Array** %2
  %8 = load i2, i2* %3
  %9 = load { %Array* }*, { %Array* }** %4
  %10 = load %Qubit*, %Qubit** %5
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %6, %Array* %7, i2 %8, { %Array* }* %9, %Qubit* %10)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %1 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 1
  %3 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 2
  %4 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 3
  %5 = getelementptr { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i64 0, i32 4
  %6 = load double, double* %1
  %7 = load %Array*, %Array** %2
  %8 = load i2, i2* %3
  %9 = load { %Array* }*, { %Array* }** %4
  %10 = load %Qubit*, %Qubit** %5
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %6, %Array* %7, i2 %8, { %Array* }* %9, %Qubit* %10)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array*, i2, { %Array* }*, %Qubit* }*, { double, %Array*, i2, { %Array* }*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %3, { double, %Array*, i2, { %Array* }*, %Qubit* }* %4)
  ret void
}

define void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { double, %Array*, i2, { %Array* }*, %Qubit* }*, { double, %Array*, i2, { %Array* }*, %Qubit* }** %2
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %3, { double, %Array*, i2, { %Array* }*, %Qubit* }* %4)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr { %Qubit* }, { %Qubit* }* %0, i64 0, i32 0
  %2 = load %Qubit*, %Qubit** %1
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %2)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr { %Qubit* }, { %Qubit* }* %0, i64 0, i32 0
  %2 = load %Qubit*, %Qubit** %1
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %2)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  call void @Microsoft__Quantum__Intrinsic__H__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  call void @Microsoft__Quantum__Intrinsic__H__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__S__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr { %Qubit* }, { %Qubit* }* %0, i64 0, i32 0
  %2 = load %Qubit*, %Qubit** %1
  call void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %2)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__S__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr { %Qubit* }, { %Qubit* }* %0, i64 0, i32 0
  %2 = load %Qubit*, %Qubit** %1
  call void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %2)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__S__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  call void @Microsoft__Quantum__Intrinsic__S__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__S__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  call void @Microsoft__Quantum__Intrinsic__S__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

declare %String* @__quantum__rt__pauli_to_string(i2)

define void @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__body({ i64, %Callable* }* %unitaryGenerator, { %Array* }* %index, %Array* %target) {
entry:
  %0 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %0)
  %1 = getelementptr { %Array* }, { %Array* }* %index, i64 0, i32 0
  %2 = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %2)
  %3 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %3)
  call void @__quantum__rt__array_add_access(%Array* %target)
  %nIndex = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %4 = trunc i64 %nIndex to i32
  %nStates = call i64 @__quantum__rt__int_power(i64 2, i32 %4)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 0
  %nUnitaries = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 1
  %unitaryFunction = load %Callable*, %Callable** %6
  %7 = call i64 @__quantum__qis__mini__body(i64 %nStates, i64 %nUnitaries)
  %8 = sub i64 %7, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxOp = phi i64 [ 0, %entry ], [ %28, %exiting__1 ]
  %9 = icmp sge i64 %idxOp, %8
  %10 = icmp sle i64 %idxOp, %8
  %11 = select i1 true, i1 %10, i1 %9
  br i1 %11, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64 }*
  %14 = getelementptr { i64 }, { i64 }* %13, i64 0, i32 0
  store i64 %idxOp, i64* %14
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %unitaryFunction, %Tuple* %12, %Tuple* %15)
  %16 = bitcast %Tuple* %15 to { %Callable* }*
  %17 = getelementptr { %Callable* }, { %Callable* }* %16, i64 0, i32 0
  %18 = load %Callable*, %Callable** %17
  %19 = call %Callable* @Microsoft__Quantum__Canon___c921dc5656a74657aa6bca85dde938ab_ControlledOnInt__body(i64 %idxOp, %Callable* %18)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %21 = bitcast %Tuple* %20 to { %Array*, %Array* }*
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %21, i64 0, i32 1
  %24 = load %Array*, %Array** %1
  call void @__quantum__rt__array_reference(%Array* %24)
  call void @__quantum__rt__array_reference(%Array* %target)
  store %Array* %24, %Array** %22
  store %Array* %target, %Array** %23
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__tuple_unreference(%Tuple* %12)
  %25 = load %Callable*, %Callable** %17
  call void @__quantum__rt__callable_unreference(%Callable* %25)
  call void @__quantum__rt__tuple_unreference(%Tuple* %15)
  call void @__quantum__rt__callable_unreference(%Callable* %19)
  %26 = load %Array*, %Array** %22
  call void @__quantum__rt__array_unreference(%Array* %26)
  %27 = load %Array*, %Array** %23
  call void @__quantum__rt__array_unreference(%Array* %27)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %28 = add i64 %idxOp, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__tuple_remove_access(%Tuple* %0)
  %29 = load %Array*, %Array** %1
  call void @__quantum__rt__array_remove_access(%Array* %29)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %3)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

declare i64 @__quantum__qis__mini__body(i64, i64)

define void @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__adj({ i64, %Callable* }* %unitaryGenerator, { %Array* }* %index, %Array* %target) {
entry:
  %0 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %0)
  %1 = getelementptr { %Array* }, { %Array* }* %index, i64 0, i32 0
  %2 = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %2)
  %3 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %3)
  call void @__quantum__rt__array_add_access(%Array* %target)
  %__qsVar0__nIndex__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %4 = trunc i64 %__qsVar0__nIndex__ to i32
  %__qsVar1__nStates__ = call i64 @__quantum__rt__int_power(i64 2, i32 %4)
  %5 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 0
  %__qsVar2__nUnitaries__ = load i64, i64* %5
  %6 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 1
  %__qsVar3__unitaryFunction__ = load %Callable*, %Callable** %6
  %7 = call i64 @__quantum__qis__mini__body(i64 %__qsVar1__nStates__, i64 %__qsVar2__nUnitaries__)
  %8 = sub i64 %7, 1
  %9 = sub i64 %8, 0
  %10 = udiv i64 %9, 1
  %11 = mul i64 1, %10
  %12 = add i64 0, %11
  %13 = load %Range, %Range* @EmptyRange
  %14 = insertvalue %Range %13, i64 %12, 0
  %15 = insertvalue %Range %14, i64 -1, 1
  %16 = insertvalue %Range %15, i64 0, 2
  %17 = extractvalue %Range %16, 0
  %18 = extractvalue %Range %16, 1
  %19 = extractvalue %Range %16, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %20 = icmp sgt i64 %18, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar4__idxOp__ = phi i64 [ %17, %preheader__1 ], [ %41, %exiting__1 ]
  %21 = icmp sge i64 %__qsVar4__idxOp__, %19
  %22 = icmp sle i64 %__qsVar4__idxOp__, %19
  %23 = select i1 %20, i1 %22, i1 %21
  br i1 %23, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i64 }*
  %26 = getelementptr { i64 }, { i64 }* %25, i64 0, i32 0
  store i64 %__qsVar4__idxOp__, i64* %26
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__unitaryFunction__, %Tuple* %24, %Tuple* %27)
  %28 = bitcast %Tuple* %27 to { %Callable* }*
  %29 = getelementptr { %Callable* }, { %Callable* }* %28, i64 0, i32 0
  %30 = load %Callable*, %Callable** %29
  %31 = call %Callable* @Microsoft__Quantum__Canon___c921dc5656a74657aa6bca85dde938ab_ControlledOnInt__body(i64 %__qsVar4__idxOp__, %Callable* %30)
  %32 = call %Callable* @__quantum__rt__callable_copy(%Callable* %31, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %32)
  %33 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %34 = bitcast %Tuple* %33 to { %Array*, %Array* }*
  %35 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %34, i64 0, i32 0
  %36 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %34, i64 0, i32 1
  %37 = load %Array*, %Array** %1
  call void @__quantum__rt__array_reference(%Array* %37)
  call void @__quantum__rt__array_reference(%Array* %target)
  store %Array* %37, %Array** %35
  store %Array* %target, %Array** %36
  call void @__quantum__rt__callable_invoke(%Callable* %32, %Tuple* %33, %Tuple* null)
  call void @__quantum__rt__tuple_unreference(%Tuple* %24)
  %38 = load %Callable*, %Callable** %29
  call void @__quantum__rt__callable_unreference(%Callable* %38)
  call void @__quantum__rt__tuple_unreference(%Tuple* %27)
  call void @__quantum__rt__callable_unreference(%Callable* %31)
  call void @__quantum__rt__callable_unreference(%Callable* %32)
  %39 = load %Array*, %Array** %35
  call void @__quantum__rt__array_unreference(%Array* %39)
  %40 = load %Array*, %Array** %36
  call void @__quantum__rt__array_unreference(%Array* %40)
  call void @__quantum__rt__tuple_unreference(%Tuple* %33)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %41 = add i64 %__qsVar4__idxOp__, %18
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__tuple_remove_access(%Tuple* %0)
  %42 = load %Array*, %Array** %1
  call void @__quantum__rt__array_remove_access(%Array* %42)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %3)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 0
  %unitaryGenerator = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %2 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 1
  %index = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %index, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %5)
  %6 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 2
  %target = load %Array*, %Array** %7
  call void @__quantum__rt__array_add_access(%Array* %target)
  %nIndex = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %8 = trunc i64 %nIndex to i32
  %nStates = call i64 @__quantum__rt__int_power(i64 2, i32 %8)
  %9 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 0
  %nUnitaries = load i64, i64* %9
  %10 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 1
  %unitaryFunction = load %Callable*, %Callable** %10
  %11 = call i64 @__quantum__qis__mini__body(i64 %nStates, i64 %nUnitaries)
  %12 = sub i64 %11, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxOp = phi i64 [ 0, %entry ], [ %42, %exiting__1 ]
  %13 = icmp sge i64 %idxOp, %12
  %14 = icmp sle i64 %idxOp, %12
  %15 = select i1 true, i1 %14, i1 %13
  br i1 %15, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64 }*
  %18 = getelementptr { i64 }, { i64 }* %17, i64 0, i32 0
  store i64 %idxOp, i64* %18
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %unitaryFunction, %Tuple* %16, %Tuple* %19)
  %20 = bitcast %Tuple* %19 to { %Callable* }*
  %21 = getelementptr { %Callable* }, { %Callable* }* %20, i64 0, i32 0
  %22 = load %Callable*, %Callable** %21
  %23 = call %Callable* @Microsoft__Quantum__Canon___c921dc5656a74657aa6bca85dde938ab_ControlledOnInt__body(i64 %idxOp, %Callable* %22)
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 true)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %26 = bitcast %Tuple* %25 to { %Array*, { %Array*, %Array* }* }*
  %27 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %26, i64 0, i32 0
  %28 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %26, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %30 = bitcast %Tuple* %29 to { %Array*, %Array* }*
  %31 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %30, i64 0, i32 0
  %32 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %30, i64 0, i32 1
  %33 = load %Array*, %Array** %4
  call void @__quantum__rt__array_reference(%Array* %33)
  call void @__quantum__rt__array_reference(%Array* %target)
  store %Array* %33, %Array** %31
  store %Array* %target, %Array** %32
  store %Array* %__controlQubits__, %Array** %27
  store { %Array*, %Array* }* %30, { %Array*, %Array* }** %28
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %25, %Tuple* null)
  call void @__quantum__rt__tuple_unreference(%Tuple* %16)
  %34 = load %Callable*, %Callable** %21
  call void @__quantum__rt__callable_unreference(%Callable* %34)
  call void @__quantum__rt__tuple_unreference(%Tuple* %19)
  call void @__quantum__rt__callable_unreference(%Callable* %23)
  call void @__quantum__rt__callable_unreference(%Callable* %24)
  %35 = load %Array*, %Array** %27
  call void @__quantum__rt__array_unreference(%Array* %35)
  %36 = load { %Array*, %Array* }*, { %Array*, %Array* }** %28
  %37 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %36, i64 0, i32 0
  %38 = load %Array*, %Array** %37
  call void @__quantum__rt__array_unreference(%Array* %38)
  %39 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %36, i64 0, i32 1
  %40 = load %Array*, %Array** %39
  call void @__quantum__rt__array_unreference(%Array* %40)
  %41 = bitcast { %Array*, %Array* }* %36 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %41)
  call void @__quantum__rt__tuple_unreference(%Tuple* %25)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %42 = add i64 %idxOp, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  %43 = load %Array*, %Array** %4
  call void @__quantum__rt__array_remove_access(%Array* %43)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define void @Microsoft__Quantum__Canon___6964bed2dd814b148036b3277c294b8c_MultiplexOperationsBruteForceFromGenerator__ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 0
  %unitaryGenerator = load { i64, %Callable* }*, { i64, %Callable* }** %1
  %2 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 1
  %index = load { %Array* }*, { %Array* }** %3
  %4 = getelementptr { %Array* }, { %Array* }* %index, i64 0, i32 0
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %5)
  %6 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i64 0, i32 2
  %target = load %Array*, %Array** %7
  call void @__quantum__rt__array_add_access(%Array* %target)
  %__qsVar0__nIndex__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %8 = trunc i64 %__qsVar0__nIndex__ to i32
  %__qsVar1__nStates__ = call i64 @__quantum__rt__int_power(i64 2, i32 %8)
  %9 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 0
  %__qsVar2__nUnitaries__ = load i64, i64* %9
  %10 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i64 0, i32 1
  %__qsVar3__unitaryFunction__ = load %Callable*, %Callable** %10
  %11 = call i64 @__quantum__qis__mini__body(i64 %__qsVar1__nStates__, i64 %__qsVar2__nUnitaries__)
  %12 = sub i64 %11, 1
  %13 = sub i64 %12, 0
  %14 = udiv i64 %13, 1
  %15 = mul i64 1, %14
  %16 = add i64 0, %15
  %17 = load %Range, %Range* @EmptyRange
  %18 = insertvalue %Range %17, i64 %16, 0
  %19 = insertvalue %Range %18, i64 -1, 1
  %20 = insertvalue %Range %19, i64 0, 2
  %21 = extractvalue %Range %20, 0
  %22 = extractvalue %Range %20, 1
  %23 = extractvalue %Range %20, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %24 = icmp sgt i64 %22, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar4__idxOp__ = phi i64 [ %21, %preheader__1 ], [ %54, %exiting__1 ]
  %25 = icmp sge i64 %__qsVar4__idxOp__, %23
  %26 = icmp sle i64 %__qsVar4__idxOp__, %23
  %27 = select i1 %24, i1 %26, i1 %25
  br i1 %27, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i64* getelementptr (i64, i64* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { i64 }*
  %30 = getelementptr { i64 }, { i64 }* %29, i64 0, i32 0
  store i64 %__qsVar4__idxOp__, i64* %30
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__unitaryFunction__, %Tuple* %28, %Tuple* %31)
  %32 = bitcast %Tuple* %31 to { %Callable* }*
  %33 = getelementptr { %Callable* }, { %Callable* }* %32, i64 0, i32 0
  %34 = load %Callable*, %Callable** %33
  %35 = call %Callable* @Microsoft__Quantum__Canon___c921dc5656a74657aa6bca85dde938ab_ControlledOnInt__body(i64 %__qsVar4__idxOp__, %Callable* %34)
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %36)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %38 = bitcast %Tuple* %37 to { %Array*, { %Array*, %Array* }* }*
  %39 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %38, i64 0, i32 0
  %40 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %38, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %__controlQubits__)
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %42 = bitcast %Tuple* %41 to { %Array*, %Array* }*
  %43 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %42, i64 0, i32 0
  %44 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %42, i64 0, i32 1
  %45 = load %Array*, %Array** %4
  call void @__quantum__rt__array_reference(%Array* %45)
  call void @__quantum__rt__array_reference(%Array* %target)
  store %Array* %45, %Array** %43
  store %Array* %target, %Array** %44
  store %Array* %__controlQubits__, %Array** %39
  store { %Array*, %Array* }* %42, { %Array*, %Array* }** %40
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %37, %Tuple* null)
  call void @__quantum__rt__tuple_unreference(%Tuple* %28)
  %46 = load %Callable*, %Callable** %33
  call void @__quantum__rt__callable_unreference(%Callable* %46)
  call void @__quantum__rt__tuple_unreference(%Tuple* %31)
  call void @__quantum__rt__callable_unreference(%Callable* %35)
  call void @__quantum__rt__callable_unreference(%Callable* %36)
  %47 = load %Array*, %Array** %39
  call void @__quantum__rt__array_unreference(%Array* %47)
  %48 = load { %Array*, %Array* }*, { %Array*, %Array* }** %40
  %49 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %48, i64 0, i32 0
  %50 = load %Array*, %Array** %49
  call void @__quantum__rt__array_unreference(%Array* %50)
  %51 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %48, i64 0, i32 1
  %52 = load %Array*, %Array** %51
  call void @__quantum__rt__array_unreference(%Array* %52)
  %53 = bitcast { %Array*, %Array* }* %48 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %53)
  call void @__quantum__rt__tuple_unreference(%Tuple* %37)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %54 = add i64 %__qsVar4__idxOp__, %22
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  %55 = load %Array*, %Array** %4
  call void @__quantum__rt__array_remove_access(%Array* %55)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %target)
  ret void
}

define %Callable* @Microsoft__Quantum__Arrays___a04d6d13a1744c96b69fefd7d9333491_ElementAt__body(i64 %index, %Array* %array) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %array)
  %0 = icmp sge i64 %index, 0
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %2 = icmp slt i64 %index, %1
  %3 = and i1 %0, %2
  %4 = call %String* @__quantum__rt__string_create(i32 21, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @22, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %3, %String* %4)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %index)
  %6 = bitcast i8* %5 to %Callable**
  %7 = load %Callable*, %Callable** %6
  call void @__quantum__rt__callable_reference(%Callable* %7)
  call void @__quantum__rt__array_remove_access(%Array* %array)
  call void @__quantum__rt__string_unreference(%String* %4)
  ret %Callable* %7
}

define %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %6)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %left)
  call void @__quantum__rt__array_add_access(%Array* %right)
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %9 = icmp slt i64 %0, %8
  br i1 %9, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__1
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %8, %condFalse__1 ]
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %output = alloca %Array*
  store %Array* %10, %Array** %output
  %11 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %condContinue__1
  %12 = phi i64 [ 0, %condContinue__1 ], [ %20, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %12)
  %15 = bitcast i8* %14 to { %Array*, double }**
  %16 = load { %Array*, double }*, { %Array*, double }** %15
  %17 = getelementptr { %Array*, double }, { %Array*, double }* %16, i64 0, i32 0
  %18 = load %Array*, %Array** %17
  call void @__quantum__rt__array_add_access(%Array* %18)
  %19 = bitcast { %Array*, double }* %16 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %19)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %10)
  %21 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxElement = phi i64 [ 0, %exit__2 ], [ %29, %exiting__3 ]
  %22 = icmp sge i64 %idxElement, %21
  %23 = icmp sle i64 %idxElement, %21
  %24 = select i1 true, i1 %23, i1 %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = load %Array*, %Array** %output
  %26 = call %Array* @__quantum__rt__array_copy(%Array* %25, i1 false)
  %27 = call i64 @__quantum__rt__array_get_size_1d(%Array* %26)
  %28 = sub i64 %27, 1
  br label %header__4

exiting__3:                                       ; preds = %exit__7
  %29 = add i64 %idxElement, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %30 = load %Array*, %Array** %output
  %31 = call i64 @__quantum__rt__array_get_size_1d(%Array* %30)
  %32 = sub i64 %31, 1
  br label %header__8

header__4:                                        ; preds = %exiting__4, %body__3
  %33 = phi i64 [ 0, %body__3 ], [ %41, %exiting__4 ]
  %34 = icmp sle i64 %33, %28
  br i1 %34, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %33)
  %36 = bitcast i8* %35 to { %Array*, double }**
  %37 = load { %Array*, double }*, { %Array*, double }** %36
  %38 = getelementptr { %Array*, double }, { %Array*, double }* %37, i64 0, i32 0
  %39 = load %Array*, %Array** %38
  call void @__quantum__rt__array_reference(%Array* %39)
  %40 = bitcast { %Array*, double }* %37 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %40)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %41 = add i64 %33, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double }* getelementptr ({ %Array*, double }, { %Array*, double }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { %Array*, double }*
  %44 = getelementptr { %Array*, double }, { %Array*, double }* %43, i64 0, i32 0
  %45 = getelementptr { %Array*, double }, { %Array*, double }* %43, i64 0, i32 1
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %47 = bitcast i8* %46 to %Array**
  %48 = load %Array*, %Array** %47
  call void @__quantum__rt__array_reference(%Array* %48)
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %50 = bitcast i8* %49 to double*
  %51 = load double, double* %50
  store %Array* %48, %Array** %44
  store double %51, double* %45
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %idxElement)
  %53 = bitcast i8* %52 to { %Array*, double }**
  %54 = load { %Array*, double }*, { %Array*, double }** %53
  %55 = getelementptr { %Array*, double }, { %Array*, double }* %54, i64 0, i32 0
  %56 = load %Array*, %Array** %55
  call void @__quantum__rt__array_unreference(%Array* %56)
  %57 = bitcast { %Array*, double }* %54 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %57)
  store { %Array*, double }* %43, { %Array*, double }** %53
  %58 = load %Array*, %Array** %output
  %59 = call i64 @__quantum__rt__array_get_size_1d(%Array* %58)
  %60 = sub i64 %59, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %61 = phi i64 [ 0, %exit__4 ], [ %69, %exiting__5 ]
  %62 = icmp sle i64 %61, %60
  br i1 %62, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %58, i64 %61)
  %64 = bitcast i8* %63 to { %Array*, double }**
  %65 = load { %Array*, double }*, { %Array*, double }** %64
  %66 = getelementptr { %Array*, double }, { %Array*, double }* %65, i64 0, i32 0
  %67 = load %Array*, %Array** %66
  call void @__quantum__rt__array_remove_access(%Array* %67)
  %68 = bitcast { %Array*, double }* %65 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %68)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %69 = add i64 %61, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_remove_access(%Array* %58)
  store %Array* %26, %Array** %output
  %70 = sub i64 %27, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %71 = phi i64 [ 0, %exit__5 ], [ %79, %exiting__6 ]
  %72 = icmp sle i64 %71, %70
  br i1 %72, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %71)
  %74 = bitcast i8* %73 to { %Array*, double }**
  %75 = load { %Array*, double }*, { %Array*, double }** %74
  %76 = getelementptr { %Array*, double }, { %Array*, double }* %75, i64 0, i32 0
  %77 = load %Array*, %Array** %76
  call void @__quantum__rt__array_add_access(%Array* %77)
  %78 = bitcast { %Array*, double }* %75 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %78)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %79 = add i64 %71, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_add_access(%Array* %26)
  %80 = sub i64 %27, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %81 = phi i64 [ 0, %exit__6 ], [ %89, %exiting__7 ]
  %82 = icmp sle i64 %81, %80
  br i1 %82, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %81)
  %84 = bitcast i8* %83 to { %Array*, double }**
  %85 = load { %Array*, double }*, { %Array*, double }** %84
  %86 = getelementptr { %Array*, double }, { %Array*, double }* %85, i64 0, i32 0
  %87 = load %Array*, %Array** %86
  call void @__quantum__rt__array_unreference(%Array* %87)
  %88 = bitcast { %Array*, double }* %85 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %88)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %89 = add i64 %81, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_unreference(%Array* %26)
  br label %exiting__3

header__8:                                        ; preds = %exiting__8, %exit__3
  %90 = phi i64 [ 0, %exit__3 ], [ %98, %exiting__8 ]
  %91 = icmp sle i64 %90, %32
  br i1 %91, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 %90)
  %93 = bitcast i8* %92 to { %Array*, double }**
  %94 = load { %Array*, double }*, { %Array*, double }** %93
  %95 = getelementptr { %Array*, double }, { %Array*, double }* %94, i64 0, i32 0
  %96 = load %Array*, %Array** %95
  call void @__quantum__rt__array_reference(%Array* %96)
  %97 = bitcast { %Array*, double }* %94 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %97)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %98 = add i64 %90, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_reference(%Array* %30)
  %99 = sub i64 %0, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %100 = phi i64 [ 0, %exit__8 ], [ %105, %exiting__9 ]
  %101 = icmp sle i64 %100, %99
  br i1 %101, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %100)
  %103 = bitcast i8* %102 to %Array**
  %104 = load %Array*, %Array** %103
  call void @__quantum__rt__array_remove_access(%Array* %104)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %105 = add i64 %100, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_remove_access(%Array* %left)
  call void @__quantum__rt__array_remove_access(%Array* %right)
  %106 = sub i64 %31, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %107 = phi i64 [ 0, %exit__9 ], [ %115, %exiting__10 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 %107)
  %110 = bitcast i8* %109 to { %Array*, double }**
  %111 = load { %Array*, double }*, { %Array*, double }** %110
  %112 = getelementptr { %Array*, double }, { %Array*, double }* %111, i64 0, i32 0
  %113 = load %Array*, %Array** %112
  call void @__quantum__rt__array_remove_access(%Array* %113)
  %114 = bitcast { %Array*, double }* %111 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %114)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %115 = add i64 %107, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_remove_access(%Array* %30)
  %116 = sub i64 %nElements, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %117 = phi i64 [ 0, %exit__10 ], [ %125, %exiting__11 ]
  %118 = icmp sle i64 %117, %116
  br i1 %118, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %117)
  %120 = bitcast i8* %119 to { %Array*, double }**
  %121 = load { %Array*, double }*, { %Array*, double }** %120
  %122 = getelementptr { %Array*, double }, { %Array*, double }* %121, i64 0, i32 0
  %123 = load %Array*, %Array** %122
  call void @__quantum__rt__array_unreference(%Array* %123)
  %124 = bitcast { %Array*, double }* %121 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %124)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %125 = add i64 %117, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_unreference(%Array* %10)
  ret %Array* %30
}

declare i64 @__quantum__qis__absi__body(i64)

define void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %actual, i1 %expected, %String* %message) {
entry:
  %0 = icmp ne i1 %actual, %expected
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Diagnostics___3769fd4390a24d3aa0b0583092b80b94___QsRef0__FormattedFailure____body(i1 %actual, i1 %expected, %String* %message)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  ret void
}

define %Array* @Microsoft__Quantum__Arrays___69b581947aa54b2b945a6fdee1aa50a1_ConstantArray__body(i64 %length, { double, double }* %value) {
entry:
  %0 = bitcast { double, double }* %value to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %0)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %arr = alloca %Array*
  store %Array* %1, %Array** %arr
  %2 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to { double, double }**
  %7 = load { double, double }*, { double, double }** %6
  %8 = bitcast { double, double }* %7 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %8)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %1)
  %10 = sub i64 %length, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %i = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %11 = icmp sge i64 %i, %10
  %12 = icmp sle i64 %i, %10
  %13 = select i1 true, i1 %12, i1 %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = load %Array*, %Array** %arr
  %15 = call %Array* @__quantum__rt__array_copy(%Array* %14, i1 false)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %15)
  %17 = sub i64 %16, 1
  br label %header__3

exiting__2:                                       ; preds = %exit__6
  %18 = add i64 %i, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %19 = load %Array*, %Array** %arr
  %20 = call i64 @__quantum__rt__array_get_size_1d(%Array* %19)
  %21 = sub i64 %20, 1
  br label %header__7

header__3:                                        ; preds = %exiting__3, %body__2
  %22 = phi i64 [ 0, %body__2 ], [ %28, %exiting__3 ]
  %23 = icmp sle i64 %22, %17
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %22)
  %25 = bitcast i8* %24 to { double, double }**
  %26 = load { double, double }*, { double, double }** %25
  %27 = bitcast { double, double }* %26 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %27)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %28 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__tuple_reference(%Tuple* %0)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %i)
  %30 = bitcast i8* %29 to { double, double }**
  %31 = load { double, double }*, { double, double }** %30
  %32 = bitcast { double, double }* %31 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %32)
  store { double, double }* %value, { double, double }** %30
  %33 = load %Array*, %Array** %arr
  %34 = call i64 @__quantum__rt__array_get_size_1d(%Array* %33)
  %35 = sub i64 %34, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %36 = phi i64 [ 0, %exit__3 ], [ %42, %exiting__4 ]
  %37 = icmp sle i64 %36, %35
  br i1 %37, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %36)
  %39 = bitcast i8* %38 to { double, double }**
  %40 = load { double, double }*, { double, double }** %39
  %41 = bitcast { double, double }* %40 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %41)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %42 = add i64 %36, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_remove_access(%Array* %33)
  store %Array* %15, %Array** %arr
  %43 = sub i64 %16, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %44 = phi i64 [ 0, %exit__4 ], [ %50, %exiting__5 ]
  %45 = icmp sle i64 %44, %43
  br i1 %45, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %44)
  %47 = bitcast i8* %46 to { double, double }**
  %48 = load { double, double }*, { double, double }** %47
  %49 = bitcast { double, double }* %48 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %49)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %50 = add i64 %44, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_add_access(%Array* %15)
  %51 = sub i64 %16, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %52 = phi i64 [ 0, %exit__5 ], [ %58, %exiting__6 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %52)
  %55 = bitcast i8* %54 to { double, double }**
  %56 = load { double, double }*, { double, double }** %55
  %57 = bitcast { double, double }* %56 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %57)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %58 = add i64 %52, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_unreference(%Array* %15)
  br label %exiting__2

header__7:                                        ; preds = %exiting__7, %exit__2
  %59 = phi i64 [ 0, %exit__2 ], [ %65, %exiting__7 ]
  %60 = icmp sle i64 %59, %21
  br i1 %60, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %59)
  %62 = bitcast i8* %61 to { double, double }**
  %63 = load { double, double }*, { double, double }** %62
  %64 = bitcast { double, double }* %63 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %64)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %65 = add i64 %59, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_reference(%Array* %19)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %0)
  %66 = sub i64 %20, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %67 = phi i64 [ 0, %exit__7 ], [ %73, %exiting__8 ]
  %68 = icmp sle i64 %67, %66
  br i1 %68, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %67)
  %70 = bitcast i8* %69 to { double, double }**
  %71 = load { double, double }*, { double, double }** %70
  %72 = bitcast { double, double }* %71 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %72)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %73 = add i64 %67, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_remove_access(%Array* %19)
  %74 = sub i64 %length, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %75 = phi i64 [ 0, %exit__8 ], [ %81, %exiting__9 ]
  %76 = icmp sle i64 %75, %74
  br i1 %76, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %75)
  %78 = bitcast i8* %77 to { double, double }**
  %79 = load { double, double }*, { double, double }** %78
  %80 = bitcast { double, double }* %79 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %80)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %81 = add i64 %75, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_unreference(%Array* %1)
  ret %Array* %19
}

define %Array* @Microsoft__Quantum__Arrays___8aaa902f0f2742a29575057afd257126_ConstantArray__body(i64 %length, double %value) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %arr = alloca %Array*
  store %Array* %0, %Array** %arr
  call void @__quantum__rt__array_add_access(%Array* %0)
  %1 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %i = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %2 = icmp sge i64 %i, %1
  %3 = icmp sle i64 %i, %1
  %4 = select i1 true, i1 %3, i1 %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = load %Array*, %Array** %arr
  %6 = call %Array* @__quantum__rt__array_copy(%Array* %5, i1 false)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %i)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8
  store double %value, double* %8
  %10 = load %Array*, %Array** %arr
  call void @__quantum__rt__array_remove_access(%Array* %10)
  store %Array* %6, %Array** %arr
  call void @__quantum__rt__array_add_access(%Array* %6)
  call void @__quantum__rt__array_unreference(%Array* %6)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %i, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %12 = load %Array*, %Array** %arr
  call void @__quantum__rt__array_reference(%Array* %12)
  call void @__quantum__rt__array_remove_access(%Array* %12)
  call void @__quantum__rt__array_unreference(%Array* %0)
  ret %Array* %12
}

define %Array* @Microsoft__Quantum__Arrays___4063d2935eab4622841632c408d7f9cf_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %6)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %array)
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %0)
  %resultArray = alloca %Array*
  store %Array* %8, %Array** %resultArray
  call void @__quantum__rt__array_add_access(%Array* %8)
  %9 = call %Range @Microsoft__Quantum__Arrays___2ac7df3dc5c94afebfe5f3698ced2d73_IndexRange__body(%Array* %array)
  %10 = extractvalue %Range %9, 0
  %11 = extractvalue %Range %9, 1
  %12 = extractvalue %Range %9, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %13 = icmp sgt i64 %11, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxElement = phi i64 [ %10, %preheader__1 ], [ %21, %exiting__2 ]
  %14 = icmp sge i64 %idxElement, %12
  %15 = icmp sle i64 %idxElement, %12
  %16 = select i1 %13, i1 %15, i1 %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = load %Array*, %Array** %resultArray
  %18 = call %Array* @__quantum__rt__array_copy(%Array* %17, i1 false)
  %19 = call i64 @__quantum__rt__array_get_size_1d(%Array* %18)
  %20 = sub i64 %19, 1
  br label %header__3

exiting__2:                                       ; preds = %exit__4
  %21 = add i64 %idxElement, %11
  br label %header__2

exit__2:                                          ; preds = %header__2
  %22 = load %Array*, %Array** %resultArray
  %23 = call i64 @__quantum__rt__array_get_size_1d(%Array* %22)
  %24 = sub i64 %23, 1
  br label %header__5

header__3:                                        ; preds = %exiting__3, %body__2
  %25 = phi i64 [ 0, %body__2 ], [ %30, %exiting__3 ]
  %26 = icmp sle i64 %25, %20
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %25)
  %28 = bitcast i8* %27 to %Callable**
  %29 = load %Callable*, %Callable** %28
  call void @__quantum__rt__callable_reference(%Callable* %29)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %30 = add i64 %25, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %32 = bitcast i8* %31 to %Array**
  %33 = load %Array*, %Array** %32
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { %Array* }*
  %36 = getelementptr { %Array* }, { %Array* }* %35, i64 0, i32 0
  store %Array* %33, %Array** %36
  call void @__quantum__rt__array_reference(%Array* %33)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %34, %Tuple* %37)
  %38 = bitcast %Tuple* %37 to { %Callable* }*
  %39 = getelementptr { %Callable* }, { %Callable* }* %38, i64 0, i32 0
  %40 = load %Callable*, %Callable** %39
  call void @__quantum__rt__callable_reference(%Callable* %40)
  %41 = load %Array*, %Array** %36
  call void @__quantum__rt__array_unreference(%Array* %41)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  %42 = load %Callable*, %Callable** %39
  call void @__quantum__rt__callable_unreference(%Callable* %42)
  call void @__quantum__rt__tuple_unreference(%Tuple* %37)
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %idxElement)
  %44 = bitcast i8* %43 to %Callable**
  %45 = load %Callable*, %Callable** %44
  call void @__quantum__rt__callable_unreference(%Callable* %45)
  store %Callable* %40, %Callable** %44
  %46 = load %Array*, %Array** %resultArray
  call void @__quantum__rt__array_remove_access(%Array* %46)
  store %Array* %18, %Array** %resultArray
  call void @__quantum__rt__array_add_access(%Array* %18)
  %47 = sub i64 %19, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %48 = phi i64 [ 0, %exit__3 ], [ %53, %exiting__4 ]
  %49 = icmp sle i64 %48, %47
  br i1 %49, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %48)
  %51 = bitcast i8* %50 to %Callable**
  %52 = load %Callable*, %Callable** %51
  call void @__quantum__rt__callable_unreference(%Callable* %52)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %53 = add i64 %48, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %18)
  br label %exiting__2

header__5:                                        ; preds = %exiting__5, %exit__2
  %54 = phi i64 [ 0, %exit__2 ], [ %59, %exiting__5 ]
  %55 = icmp sle i64 %54, %24
  br i1 %55, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %22, i64 %54)
  %57 = bitcast i8* %56 to %Callable**
  %58 = load %Callable*, %Callable** %57
  call void @__quantum__rt__callable_reference(%Callable* %58)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %59 = add i64 %54, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_reference(%Array* %22)
  %60 = sub i64 %0, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %61 = phi i64 [ 0, %exit__5 ], [ %66, %exiting__6 ]
  %62 = icmp sle i64 %61, %60
  br i1 %62, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %61)
  %64 = bitcast i8* %63 to %Array**
  %65 = load %Array*, %Array** %64
  call void @__quantum__rt__array_remove_access(%Array* %65)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %66 = add i64 %61, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_remove_access(%Array* %array)
  call void @__quantum__rt__array_remove_access(%Array* %22)
  %67 = sub i64 %0, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %68 = phi i64 [ 0, %exit__6 ], [ %73, %exiting__7 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %68)
  %71 = bitcast i8* %70 to %Callable**
  %72 = load %Callable*, %Callable** %71
  call void @__quantum__rt__callable_unreference(%Callable* %72)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %73 = add i64 %68, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_unreference(%Array* %8)
  ret %Array* %22
}

define %Range @Microsoft__Quantum__Arrays___2ac7df3dc5c94afebfe5f3698ced2d73_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %6)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %array)
  %8 = sub i64 %0, 1
  %9 = load %Range, %Range* @EmptyRange
  %10 = insertvalue %Range %9, i64 0, 0
  %11 = insertvalue %Range %10, i64 1, 1
  %12 = insertvalue %Range %11, i64 %8, 2
  %13 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %17 = bitcast i8* %16 to %Array**
  %18 = load %Array*, %Array** %17
  call void @__quantum__rt__array_remove_access(%Array* %18)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %array)
  ret %Range %12
}

define %Range @Microsoft__Quantum__Arrays___1a54d2e247c94d6a896ababd9633bb53_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %array)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = load %Range, %Range* @EmptyRange
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  call void @__quantum__rt__array_remove_access(%Array* %array)
  ret %Range %5
}

define %Array* @Microsoft__Quantum__Arrays___4c64b1e5ac95475e8869a381e41d7056_Subarray__body(%Array* %indices, %Array* %array) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %indices)
  call void @__quantum__rt__array_add_access(%Array* %array)
  %nSliced = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nSliced)
  %sliced = alloca %Array*
  store %Array* %0, %Array** %sliced
  call void @__quantum__rt__array_add_access(%Array* %0)
  %1 = sub i64 %nSliced, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %2 = icmp sge i64 %idx, %1
  %3 = icmp sle i64 %idx, %1
  %4 = select i1 true, i1 %3, i1 %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = load %Array*, %Array** %sliced
  %6 = call %Array* @__quantum__rt__array_copy(%Array* %5, i1 false)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %idx)
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %9)
  %11 = bitcast i8* %10 to %Qubit**
  %12 = load %Qubit*, %Qubit** %11
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %idx)
  %14 = bitcast i8* %13 to %Qubit**
  %15 = load %Qubit*, %Qubit** %14
  store %Qubit* %12, %Qubit** %14
  %16 = load %Array*, %Array** %sliced
  call void @__quantum__rt__array_remove_access(%Array* %16)
  store %Array* %6, %Array** %sliced
  call void @__quantum__rt__array_add_access(%Array* %6)
  call void @__quantum__rt__array_unreference(%Array* %6)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %18 = load %Array*, %Array** %sliced
  call void @__quantum__rt__array_reference(%Array* %18)
  call void @__quantum__rt__array_remove_access(%Array* %indices)
  call void @__quantum__rt__array_remove_access(%Array* %array)
  call void @__quantum__rt__array_remove_access(%Array* %18)
  call void @__quantum__rt__array_unreference(%Array* %0)
  ret %Array* %18
}

define %Callable* @Microsoft__Quantum__Arrays___7a34755bdf704d7bbf3847f0b3d9aba1_LookupFunction__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %array)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array* }*
  %2 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i64 0, i32 1
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___a04d6d13a1744c96b69fefd7d9333491_ElementAt, %Tuple* null)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10
  call void @__quantum__rt__callable_reference(%Callable* %11)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_reference(%Array* %array)
  store %Callable* %4, %Callable** %2
  store %Array* %array, %Array** %3
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.33, %Tuple* %0)
  call void @__quantum__rt__array_remove_access(%Array* %array)
  ret %Callable* %13
}

define void @Microsoft__Quantum__Arrays___a04d6d13a1744c96b69fefd7d9333491_ElementAt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %1 = getelementptr { i64, %Array* }, { i64, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { i64, %Array* }, { i64, %Array* }* %0, i64 0, i32 1
  %3 = load i64, i64* %1
  %4 = load %Array*, %Array** %2
  %5 = call %Callable* @Microsoft__Quantum__Arrays___a04d6d13a1744c96b69fefd7d9333491_ElementAt__body(i64 %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Callable* }*
  %7 = getelementptr { %Callable* }, { %Callable* }* %6, i64 0, i32 0
  store %Callable* %5, %Callable** %7
  ret void
}

define %Range @Microsoft__Quantum__Arrays___65878c5d771a4099bb698d79b7a68265_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %array)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = load %Range, %Range* @EmptyRange
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  call void @__quantum__rt__array_remove_access(%Array* %array)
  ret %Range %5
}

define double @Microsoft__Quantum__Convert__IntAsDouble__body(i64 %a) {
entry:
  %0 = call double @__quantum__qis__intasdouble__body(i64 %a)
  ret double %0
}

define %Array* @Microsoft__Quantum__Convert__BoolArrayAsPauli__body(i2 %pauli, i1 %bitApply, %Array* %bits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %bits)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nBits)
  %paulis = alloca %Array*
  store %Array* %0, %Array** %paulis
  call void @__quantum__rt__array_add_access(%Array* %0)
  %1 = sub i64 %nBits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxBit = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %2 = icmp sge i64 %idxBit, %1
  %3 = icmp sle i64 %idxBit, %1
  %4 = select i1 true, i1 %3, i1 %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = load %Array*, %Array** %paulis
  %6 = call %Array* @__quantum__rt__array_copy(%Array* %5, i1 false)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %idxBit)
  %8 = bitcast i8* %7 to i1*
  %9 = load i1, i1* %8
  %10 = icmp eq i1 %9, %bitApply
  %11 = load i2, i2* @PauliI
  %12 = select i1 %10, i2 %pauli, i2 %11
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %idxBit)
  %14 = bitcast i8* %13 to i2*
  %15 = load i2, i2* %14
  store i2 %12, i2* %14
  %16 = load %Array*, %Array** %paulis
  call void @__quantum__rt__array_remove_access(%Array* %16)
  store %Array* %6, %Array** %paulis
  call void @__quantum__rt__array_add_access(%Array* %6)
  call void @__quantum__rt__array_unreference(%Array* %6)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %idxBit, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %18 = load %Array*, %Array** %paulis
  call void @__quantum__rt__array_reference(%Array* %18)
  call void @__quantum__rt__array_remove_access(%Array* %bits)
  call void @__quantum__rt__array_remove_access(%Array* %18)
  call void @__quantum__rt__array_unreference(%Array* %0)
  ret %Array* %18
}

define i64 @Microsoft__Quantum__Math__MinI__body(i64 %a, i64 %b) {
entry:
  %0 = call i64 @__quantum__qis__mini__body(i64 %a, i64 %b)
  ret i64 %0
}

define double @Microsoft__Quantum__Math__AbsSquaredComplex__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %0)
  %1 = getelementptr { double, double }, { double, double }* %input, i64 0, i32 0
  %real = load double, double* %1
  %2 = getelementptr { double, double }, { double, double }* %input, i64 0, i32 1
  %imaginary = load double, double* %2
  %3 = fmul double %real, %real
  %4 = fmul double %imaginary, %imaginary
  %5 = fadd double %3, %4
  call void @__quantum__rt__tuple_remove_access(%Tuple* %0)
  ret double %5
}

define double @Microsoft__Quantum__Math__ArcTan2__body(double %y, double %x) {
entry:
  %0 = call double @__quantum__qis__arctan2__body(double %y, double %x)
  ret double %0
}

define i64 @Microsoft__Quantum__Math__AbsI__body(i64 %a) {
entry:
  %0 = call i64 @__quantum__qis__absi__body(i64 %a)
  ret i64 %0
}

define double @Microsoft__Quantum__Math__Sqrt__body(double %d) {
entry:
  %0 = call double @__quantum__qis__sqrt__body(double %d)
  ret double %0
}

define i64 @Microsoft__Quantum__Math__Min__body(%Array* %values) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %values)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 0)
  %1 = bitcast i8* %0 to i64*
  %2 = load i64, i64* %1
  %min = alloca i64
  store i64 %2, i64* %min
  %nTerms = call i64 @__quantum__rt__array_get_size_1d(%Array* %values)
  %3 = sub i64 %nTerms, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %4 = icmp sge i64 %idx, %3
  %5 = icmp sle i64 %idx, %3
  %6 = select i1 true, i1 %5, i1 %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* %min
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13
  store i64 %14, i64* %min
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %15 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %16 = load i64, i64* %min
  call void @__quantum__rt__array_remove_access(%Array* %values)
  ret i64 %16
}

define i64 @Microsoft__Quantum__Math__Max__body(%Array* %values) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %values)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 0)
  %1 = bitcast i8* %0 to i64*
  %2 = load i64, i64* %1
  %max = alloca i64
  store i64 %2, i64* %max
  %nTerms = call i64 @__quantum__rt__array_get_size_1d(%Array* %values)
  %3 = sub i64 %nTerms, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %4 = icmp sge i64 %idx, %3
  %5 = icmp sle i64 %idx, %3
  %6 = select i1 true, i1 %5, i1 %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8
  %10 = load i64, i64* %max
  %11 = icmp sgt i64 %9, %10
  br i1 %11, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13
  store i64 %14, i64* %max
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %15 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %16 = load i64, i64* %max
  call void @__quantum__rt__array_remove_access(%Array* %values)
  ret i64 %16
}

define double @Microsoft__Quantum__Math__AbsD__body(double %a) {
entry:
  %0 = call double @__quantum__qis__absd__body(double %a)
  ret double %0
}

define double @Microsoft__Quantum__Math__Log__body(double %input) {
entry:
  %0 = call double @__quantum__qis__log__body(double %input)
  ret double %0
}

declare double @__quantum__qis__log__body(double)

define double @Microsoft__Quantum__Math__LogOf2__body() {
entry:
  ret double 0x3FE62E42FEFA39EF
}

define double @Microsoft__Quantum__Math__Lg__body(double %input) {
entry:
  %0 = call double @__quantum__qis__log__body(double %input)
  %1 = call double @Microsoft__Quantum__Math__LogOf2__body()
  %2 = fdiv double %0, %1
  ret double %2
}

define i64 @Microsoft__Quantum__Math__Ceiling__body(double %value) {
entry:
  %0 = call i64 @__quantum__qis__ceiling__body(double %value)
  ret i64 %0
}

define double @Microsoft__Quantum__Math__PowD__body(double %x, double %y) {
entry:
  %0 = call double @__quantum__qis__powd__body(double %x, double %y)
  ret double %0
}

define double @Microsoft__Quantum__Math__AbsComplex__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %0)
  %d__inline__1 = call double @Microsoft__Quantum__Math__AbsSquaredComplex__body({ double, double }* %input)
  %1 = call double @__quantum__qis__sqrt__body(double %d__inline__1)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %0)
  ret double %1
}

define double @Microsoft__Quantum__Math__ArgComplex__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %0)
  %1 = getelementptr { double, double }, { double, double }* %input, i64 0, i32 0
  %real = load double, double* %1
  %2 = getelementptr { double, double }, { double, double }* %input, i64 0, i32 1
  %imaginary = load double, double* %2
  %3 = call double @__quantum__qis__arctan2__body(double %imaginary, double %real)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %0)
  ret double %3
}

define { double, double }* @Microsoft__Quantum__Math__Complex__body(double %Real, double %Imag) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (double* getelementptr (double, double* null, i32 1) to i64), i64 2))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr { double, double }, { double, double }* %1, i64 0, i32 0
  %3 = getelementptr { double, double }, { double, double }* %1, i64 0, i32 1
  store double %Real, double* %2
  store double %Imag, double* %3
  ret { double, double }* %1
}

define { double, double }* @Microsoft__Quantum__Math__ComplexAsComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %0)
  %1 = call double @Microsoft__Quantum__Math__AbsComplex__body({ double, double }* %input)
  %2 = call double @Microsoft__Quantum__Math__ArgComplex__body({ double, double }* %input)
  %3 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %1, double %2)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %0)
  ret { double, double }* %3
}

declare void @__quantum__rt__string_reference(%String*)

define void @Microsoft__Quantum__Diagnostics___3769fd4390a24d3aa0b0583092b80b94___QsRef0__FormattedFailure____body(i1 %actual, i1 %expected, %String* %message) {
entry:
  call void @__quantum__rt__string_reference(%String* %message)
  %0 = call %String* @__quantum__rt__string_create(i32 12, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @27, i32 0, i32 0))
  %1 = call %String* @__quantum__rt__string_concatenate(%String* %message, %String* %0)
  call void @__quantum__rt__string_unreference(%String* %message)
  call void @__quantum__rt__string_unreference(%String* %0)
  %2 = call %String* @__quantum__rt__bool_to_string(i1 %expected)
  %3 = call %String* @__quantum__rt__string_concatenate(%String* %1, %String* %2)
  call void @__quantum__rt__string_unreference(%String* %1)
  call void @__quantum__rt__string_unreference(%String* %2)
  %4 = call %String* @__quantum__rt__string_create(i32 10, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @28, i32 0, i32 0))
  %5 = call %String* @__quantum__rt__string_concatenate(%String* %3, %String* %4)
  call void @__quantum__rt__string_unreference(%String* %3)
  call void @__quantum__rt__string_unreference(%String* %4)
  %6 = call %String* @__quantum__rt__bool_to_string(i1 %actual)
  %7 = call %String* @__quantum__rt__string_concatenate(%String* %5, %String* %6)
  call void @__quantum__rt__string_unreference(%String* %5)
  call void @__quantum__rt__string_unreference(%String* %6)
  call void @__quantum__rt__fail(%String* %7)
  unreachable
}

declare %String* @__quantum__rt__bool_to_string(i1)

define %Callable* @Microsoft__Quantum__Chemistry__JordanWigner___PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %qubitIndices) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %qubitIndices)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array* }*
  %2 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i64 0, i32 0
  %3 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i64 0, i32 1
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %qubitIndices)
  store %Callable* %4, %Callable** %2
  store %Array* %qubitIndices, %Array** %3
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.34, %Tuple* %0)
  call void @__quantum__rt__array_remove_access(%Array* %qubitIndices)
  ret %Callable* %5
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %3, %Array* %4)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj(%Array* %3, %Array* %4)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorFunction__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %3 = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %3)
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %5 = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %5)
  %6 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_add_access(%Array* %8)
  %9 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %9)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %11 = bitcast %Tuple* %10 to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %12 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %11, i64 0, i32 0
  %13 = getelementptr { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %11, i64 0, i32 1
  %14 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl, %Tuple* null)
  call void @__quantum__rt__array_reference(%Array* %3)
  call void @__quantum__rt__array_reference(%Array* %5)
  call void @__quantum__rt__tuple_reference(%Tuple* %6)
  call void @__quantum__rt__array_reference(%Array* %8)
  call void @__quantum__rt__tuple_reference(%Tuple* %9)
  store %Callable* %14, %Callable** %12
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %13
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.35, %Tuple* %10)
  %16 = call { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionUnitary__body(%Callable* %15)
  call void @__quantum__rt__array_remove_access(%Array* %3)
  call void @__quantum__rt__array_remove_access(%Array* %5)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %8)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %9)
  call void @__quantum__rt__callable_unreference(%Callable* %15)
  ret { %Callable* }* %16
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %5 = load double, double* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__body({ { %Array*, %Array* }*, %Array* }* %4, double %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %3 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %5 = load double, double* %2
  %6 = load %Array*, %Array** %3
  call void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__adj({ { %Array*, %Array* }*, %Array* }* %4, double %5, %Array* %6)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctl(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %1 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctladj(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %4)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %idxTermType = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %idxTermType)
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %coeff = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %coeff)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %4)
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__array_add_access(%Array* %idxTermType)
  call void @__quantum__rt__array_add_access(%Array* %coeff)
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %8 = bitcast i8* %7 to i64*
  %p = load i64, i64* %8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %10 = bitcast i8* %9 to i64*
  %q = load i64, i64* %10
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %12 = bitcast i8* %11 to i64*
  %r = load i64, i64* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %14 = bitcast i8* %13 to i64*
  %s = load i64, i64* %14
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %16 = bitcast i8* %15 to double*
  %17 = load double, double* %16
  %18 = fmul double 1.250000e-01, %17
  %angle = fmul double %18, %stepSize
  %19 = icmp eq i64 %p, %q
  %20 = icmp eq i64 %p, %r
  %21 = or i1 %19, %20
  %22 = icmp eq i64 %p, %s
  %23 = or i1 %21, %22
  %24 = icmp eq i64 %q, %r
  %25 = or i1 %23, %24
  %26 = icmp eq i64 %q, %s
  %27 = or i1 %25, %26
  %28 = icmp eq i64 %r, %s
  %29 = or i1 %27, %28
  br i1 %29, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %30 = call %String* @__quantum__rt__string_create(i32 45, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @29, i32 0, i32 0))
  %31 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %32 = call %String* @__quantum__rt__string_concatenate(%String* %30, %String* %31)
  call void @__quantum__rt__string_unreference(%String* %30)
  call void @__quantum__rt__string_unreference(%String* %31)
  %33 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @30, i32 0, i32 0))
  %34 = call %String* @__quantum__rt__string_concatenate(%String* %32, %String* %33)
  call void @__quantum__rt__string_unreference(%String* %32)
  call void @__quantum__rt__string_unreference(%String* %33)
  %35 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_unreference(%String* %34)
  call void @__quantum__rt__string_unreference(%String* %35)
  %37 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @31, i32 0, i32 0))
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_unreference(%String* %36)
  call void @__quantum__rt__string_unreference(%String* %37)
  %39 = call %String* @__quantum__rt__int_to_string(i64 %r)
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_unreference(%String* %38)
  call void @__quantum__rt__string_unreference(%String* %39)
  %41 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @32, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__string_concatenate(%String* %40, %String* %41)
  call void @__quantum__rt__string_unreference(%String* %40)
  call void @__quantum__rt__string_unreference(%String* %41)
  %43 = call %String* @__quantum__rt__int_to_string(i64 %s)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_unreference(%String* %42)
  call void @__quantum__rt__string_unreference(%String* %43)
  %45 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @33, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_unreference(%String* %44)
  call void @__quantum__rt__string_unreference(%String* %45)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__fail(%String* %46)
  unreachable

continue__1:                                      ; preds = %entry
  %x = load i2, i2* @PauliX
  %y = load i2, i2* @PauliY
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %48 = bitcast i8* %47 to %Array**
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %50 = bitcast i8* %49 to %Array**
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %52 = bitcast i8* %51 to %Array**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %54 = bitcast i8* %53 to %Array**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %56 = bitcast i8* %55 to %Array**
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %58 = bitcast i8* %57 to %Array**
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %60 = bitcast i8* %59 to %Array**
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %62 = bitcast i8* %61 to %Array**
  %63 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 0)
  %65 = bitcast i8* %64 to i2*
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 1)
  %67 = bitcast i8* %66 to i2*
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 2)
  %69 = bitcast i8* %68 to i2*
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 3)
  %71 = bitcast i8* %70 to i2*
  store i2 %y, i2* %65
  store i2 %y, i2* %67
  store i2 %x, i2* %69
  store i2 %y, i2* %71
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to i2*
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 1)
  %76 = bitcast i8* %75 to i2*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 2)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 3)
  %80 = bitcast i8* %79 to i2*
  store i2 %x, i2* %74
  store i2 %x, i2* %76
  store i2 %x, i2* %78
  store i2 %y, i2* %80
  %81 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 0)
  %83 = bitcast i8* %82 to i2*
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 1)
  %85 = bitcast i8* %84 to i2*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 2)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 3)
  %89 = bitcast i8* %88 to i2*
  store i2 %x, i2* %83
  store i2 %y, i2* %85
  store i2 %y, i2* %87
  store i2 %y, i2* %89
  %90 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 0)
  %92 = bitcast i8* %91 to i2*
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 1)
  %94 = bitcast i8* %93 to i2*
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 2)
  %96 = bitcast i8* %95 to i2*
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 3)
  %98 = bitcast i8* %97 to i2*
  store i2 %y, i2* %92
  store i2 %x, i2* %94
  store i2 %y, i2* %96
  store i2 %y, i2* %98
  %99 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 0)
  %101 = bitcast i8* %100 to i2*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 1)
  %103 = bitcast i8* %102 to i2*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 2)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 3)
  %107 = bitcast i8* %106 to i2*
  store i2 %x, i2* %101
  store i2 %y, i2* %103
  store i2 %x, i2* %105
  store i2 %x, i2* %107
  %108 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 0)
  %110 = bitcast i8* %109 to i2*
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 1)
  %112 = bitcast i8* %111 to i2*
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 2)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 3)
  %116 = bitcast i8* %115 to i2*
  store i2 %y, i2* %110
  store i2 %x, i2* %112
  store i2 %x, i2* %114
  store i2 %x, i2* %116
  %117 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 0)
  %119 = bitcast i8* %118 to i2*
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 1)
  %121 = bitcast i8* %120 to i2*
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 2)
  %123 = bitcast i8* %122 to i2*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 3)
  %125 = bitcast i8* %124 to i2*
  store i2 %y, i2* %119
  store i2 %y, i2* %121
  store i2 %y, i2* %123
  store i2 %x, i2* %125
  %126 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 0)
  %128 = bitcast i8* %127 to i2*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 1)
  %130 = bitcast i8* %129 to i2*
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 2)
  %132 = bitcast i8* %131 to i2*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 3)
  %134 = bitcast i8* %133 to i2*
  store i2 %x, i2* %128
  store i2 %x, i2* %130
  store i2 %y, i2* %132
  store i2 %x, i2* %134
  store %Array* %63, %Array** %48
  store %Array* %72, %Array** %50
  store %Array* %81, %Array** %52
  store %Array* %90, %Array** %54
  store %Array* %99, %Array** %56
  store %Array* %108, %Array** %58
  store %Array* %117, %Array** %60
  store %Array* %126, %Array** %62
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %135 = phi i64 [ 0, %continue__1 ], [ %140, %exiting__1 ]
  %136 = icmp sle i64 %135, 7
  br i1 %136, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %135)
  %138 = bitcast i8* %137 to %Array**
  %139 = load %Array*, %Array** %138
  call void @__quantum__rt__array_add_access(%Array* %139)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %140 = add i64 %135, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %ops)
  %141 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 0)
  %143 = bitcast i8* %142 to i64*
  %144 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 1)
  %145 = bitcast i8* %144 to i64*
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 2)
  %147 = bitcast i8* %146 to i64*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 3)
  %149 = bitcast i8* %148 to i64*
  store i64 %p, i64* %143
  store i64 %q, i64* %145
  store i64 %r, i64* %147
  store i64 %s, i64* %149
  %150 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %141)
  %151 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i64 0, i32 0
  %sortedIndices = load %Array*, %Array** %151
  call void @__quantum__rt__array_add_access(%Array* %sortedIndices)
  %152 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i64 0, i32 1
  %signs = load %Array*, %Array** %152
  call void @__quantum__rt__array_add_access(%Array* %signs)
  %153 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i64 0, i32 2
  %globalSign = load double, double* %153
  %154 = call %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %ops, %Array* %signs)
  %155 = call i64 @__quantum__rt__array_get_size_1d(%Array* %154)
  %156 = sub i64 %155, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %157 = phi i64 [ 0, %exit__1 ], [ %166, %exiting__2 ]
  %158 = icmp sle i64 %157, %156
  br i1 %158, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %159 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %154, i64 %157)
  %160 = bitcast i8* %159 to { %Array*, double }**
  %161 = load { %Array*, double }*, { %Array*, double }** %160
  %162 = getelementptr { %Array*, double }, { %Array*, double }* %161, i64 0, i32 0
  %op = load %Array*, %Array** %162
  call void @__quantum__rt__array_add_access(%Array* %op)
  %163 = getelementptr { %Array*, double }, { %Array*, double }* %161, i64 0, i32 1
  %sign = load double, double* %163
  %164 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %164, %Array* %sortedIndices, %Array* %op)
  call void @__quantum__rt__array_add_access(%Array* %pauliString)
  call void @__quantum__rt__array_add_access(%Array* %pauliString)
  %165 = fmul double %globalSign, %sign
  %theta__inline__1 = fmul double %165, %angle
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__qis__exp__body(%Array* %pauliString, double %theta__inline__1, %Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %pauliString)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %op)
  call void @__quantum__rt__array_remove_access(%Array* %pauliString)
  call void @__quantum__rt__array_unreference(%Array* %pauliString)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %166 = add i64 %157, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %167 = phi i64 [ 0, %exit__2 ], [ %172, %exiting__3 ]
  %168 = icmp sle i64 %167, 7
  br i1 %168, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %169 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %167)
  %170 = bitcast i8* %169 to %Array**
  %171 = load %Array*, %Array** %170
  call void @__quantum__rt__array_remove_access(%Array* %171)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %172 = add i64 %167, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %ops)
  call void @__quantum__rt__array_remove_access(%Array* %sortedIndices)
  call void @__quantum__rt__array_remove_access(%Array* %signs)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %173 = phi i64 [ 0, %exit__3 ], [ %178, %exiting__4 ]
  %174 = icmp sle i64 %173, 7
  br i1 %174, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %175 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %173)
  %176 = bitcast i8* %175 to %Array**
  %177 = load %Array*, %Array** %176
  call void @__quantum__rt__array_unreference(%Array* %177)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %178 = add i64 %173, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %ops)
  call void @__quantum__rt__array_unreference(%Array* %141)
  call void @__quantum__rt__array_unreference(%Array* %sortedIndices)
  call void @__quantum__rt__array_unreference(%Array* %signs)
  %179 = bitcast { %Array*, %Array*, double }* %150 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %179)
  %180 = sub i64 %155, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %181 = phi i64 [ 0, %exit__4 ], [ %189, %exiting__5 ]
  %182 = icmp sle i64 %181, %180
  br i1 %182, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %183 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %154, i64 %181)
  %184 = bitcast i8* %183 to { %Array*, double }**
  %185 = load { %Array*, double }*, { %Array*, double }** %184
  %186 = getelementptr { %Array*, double }, { %Array*, double }* %185, i64 0, i32 0
  %187 = load %Array*, %Array** %186
  call void @__quantum__rt__array_unreference(%Array* %187)
  %188 = bitcast { %Array*, double }* %185 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %188)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %189 = add i64 %181, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %154)
  ret void
}

define { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %indices) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %indices)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %1 = bitcast i8* %0 to i64*
  %p = load i64, i64* %1
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 1)
  %3 = bitcast i8* %2 to i64*
  %q = load i64, i64* %3
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 2)
  %5 = bitcast i8* %4 to i64*
  %r = load i64, i64* %5
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 3)
  %7 = bitcast i8* %6 to i64*
  %s = load i64, i64* %7
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %sorted = alloca %Array*
  store %Array* %8, %Array** %sorted
  call void @__quantum__rt__array_add_access(%Array* %8)
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %signs = alloca %Array*
  store %Array* %9, %Array** %signs
  call void @__quantum__rt__array_add_access(%Array* %9)
  %sign = alloca double
  store double 1.000000e+00, double* %sign
  %10 = icmp sgt i64 %p, %q
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  store double -1.000000e+00, double* %sign
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  %11 = icmp sgt i64 %r, %s
  br i1 %11, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %12 = load double, double* %sign
  %13 = fmul double %12, -1.000000e+00
  store double %13, double* %sign
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %continue__1
  %14 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 0)
  %16 = bitcast i8* %15 to i64*
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 1)
  %18 = bitcast i8* %17 to i64*
  store i64 %p, i64* %16
  store i64 %q, i64* %18
  %19 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %14)
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 0)
  %22 = bitcast i8* %21 to i64*
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 1)
  %24 = bitcast i8* %23 to i64*
  store i64 %r, i64* %22
  store i64 %s, i64* %24
  %25 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %20)
  %26 = icmp sgt i64 %19, %25
  br i1 %26, label %then0__3, label %else__1

then0__3:                                         ; preds = %continue__2
  %27 = load double, double* %sign
  %28 = fmul double %27, -1.000000e+00
  store double %28, double* %sign
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to i64*
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 1)
  %33 = bitcast i8* %32 to i64*
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 2)
  %35 = bitcast i8* %34 to i64*
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 3)
  %37 = bitcast i8* %36 to i64*
  %38 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 0)
  %40 = bitcast i8* %39 to i64*
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 1)
  %42 = bitcast i8* %41 to i64*
  store i64 %r, i64* %40
  store i64 %s, i64* %42
  %43 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %38)
  call void @__quantum__rt__array_unreference(%Array* %38)
  %44 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 0)
  %46 = bitcast i8* %45 to i64*
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 1)
  %48 = bitcast i8* %47 to i64*
  store i64 %r, i64* %46
  store i64 %s, i64* %48
  %49 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %44)
  call void @__quantum__rt__array_unreference(%Array* %44)
  %50 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 0)
  %52 = bitcast i8* %51 to i64*
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 1)
  %54 = bitcast i8* %53 to i64*
  store i64 %p, i64* %52
  store i64 %q, i64* %54
  %55 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %50)
  call void @__quantum__rt__array_unreference(%Array* %50)
  %56 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 0)
  %58 = bitcast i8* %57 to i64*
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 1)
  %60 = bitcast i8* %59 to i64*
  store i64 %p, i64* %58
  store i64 %q, i64* %60
  %61 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %56)
  call void @__quantum__rt__array_unreference(%Array* %56)
  store i64 %43, i64* %31
  store i64 %49, i64* %33
  store i64 %55, i64* %35
  store i64 %61, i64* %37
  call void @__quantum__rt__array_remove_access(%Array* %8)
  store %Array* %29, %Array** %sorted
  call void @__quantum__rt__array_add_access(%Array* %29)
  call void @__quantum__rt__array_unreference(%Array* %29)
  br label %continue__3

else__1:                                          ; preds = %continue__2
  %62 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %62, i64 0)
  %64 = bitcast i8* %63 to i64*
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %62, i64 1)
  %66 = bitcast i8* %65 to i64*
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %62, i64 2)
  %68 = bitcast i8* %67 to i64*
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %62, i64 3)
  %70 = bitcast i8* %69 to i64*
  %71 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 0)
  %73 = bitcast i8* %72 to i64*
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 1)
  %75 = bitcast i8* %74 to i64*
  store i64 %p, i64* %73
  store i64 %q, i64* %75
  %76 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %71)
  call void @__quantum__rt__array_unreference(%Array* %71)
  %77 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 0)
  %79 = bitcast i8* %78 to i64*
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 1)
  %81 = bitcast i8* %80 to i64*
  store i64 %p, i64* %79
  store i64 %q, i64* %81
  %82 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %77)
  call void @__quantum__rt__array_unreference(%Array* %77)
  %83 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 0)
  %85 = bitcast i8* %84 to i64*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 1)
  %87 = bitcast i8* %86 to i64*
  store i64 %r, i64* %85
  store i64 %s, i64* %87
  %88 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %83)
  call void @__quantum__rt__array_unreference(%Array* %83)
  %89 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %89, i64 0)
  %91 = bitcast i8* %90 to i64*
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %89, i64 1)
  %93 = bitcast i8* %92 to i64*
  store i64 %r, i64* %91
  store i64 %s, i64* %93
  %94 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %89)
  call void @__quantum__rt__array_unreference(%Array* %89)
  store i64 %76, i64* %64
  store i64 %82, i64* %66
  store i64 %88, i64* %68
  store i64 %94, i64* %70
  %95 = load %Array*, %Array** %sorted
  call void @__quantum__rt__array_remove_access(%Array* %95)
  store %Array* %62, %Array** %sorted
  call void @__quantum__rt__array_add_access(%Array* %62)
  call void @__quantum__rt__array_unreference(%Array* %62)
  br label %continue__3

continue__3:                                      ; preds = %else__1, %then0__3
  %96 = load %Array*, %Array** %sorted
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 0)
  %98 = bitcast i8* %97 to i64*
  %p1 = load i64, i64* %98
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 1)
  %100 = bitcast i8* %99 to i64*
  %q1 = load i64, i64* %100
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 2)
  %102 = bitcast i8* %101 to i64*
  %r1 = load i64, i64* %102
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 3)
  %104 = bitcast i8* %103 to i64*
  %s1 = load i64, i64* %104
  %105 = icmp slt i64 %q1, %r1
  br i1 %105, label %then0__4, label %test1__1

then0__4:                                         ; preds = %continue__3
  %106 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %107 = bitcast %Tuple* %106 to { %Array*, %Array*, double }*
  %108 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %107, i64 0, i32 0
  %109 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %107, i64 0, i32 1
  %110 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %107, i64 0, i32 2
  %111 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %111, i64 0)
  %113 = bitcast i8* %112 to i64*
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %111, i64 1)
  %115 = bitcast i8* %114 to i64*
  %116 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %111, i64 2)
  %117 = bitcast i8* %116 to i64*
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %111, i64 3)
  %119 = bitcast i8* %118 to i64*
  store i64 %p1, i64* %113
  store i64 %q1, i64* %115
  store i64 %r1, i64* %117
  store i64 %s1, i64* %119
  %120 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 0)
  %122 = bitcast i8* %121 to double*
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 1)
  %124 = bitcast i8* %123 to double*
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 2)
  %126 = bitcast i8* %125 to double*
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 3)
  %128 = bitcast i8* %127 to double*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 4)
  %130 = bitcast i8* %129 to double*
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 5)
  %132 = bitcast i8* %131 to double*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 6)
  %134 = bitcast i8* %133 to double*
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %120, i64 7)
  %136 = bitcast i8* %135 to double*
  store double 1.000000e+00, double* %122
  store double -1.000000e+00, double* %124
  store double -1.000000e+00, double* %126
  store double -1.000000e+00, double* %128
  store double 1.000000e+00, double* %130
  store double 1.000000e+00, double* %132
  store double 1.000000e+00, double* %134
  store double -1.000000e+00, double* %136
  %137 = load double, double* %sign
  store %Array* %111, %Array** %108
  store %Array* %120, %Array** %109
  store double %137, double* %110
  call void @__quantum__rt__array_remove_access(%Array* %indices)
  call void @__quantum__rt__array_remove_access(%Array* %96)
  call void @__quantum__rt__array_remove_access(%Array* %9)
  call void @__quantum__rt__array_unreference(%Array* %8)
  call void @__quantum__rt__array_unreference(%Array* %9)
  call void @__quantum__rt__array_unreference(%Array* %14)
  call void @__quantum__rt__array_unreference(%Array* %20)
  ret { %Array*, %Array*, double }* %107

test1__1:                                         ; preds = %continue__3
  %138 = icmp sgt i64 %q1, %r1
  %139 = icmp slt i64 %q1, %s1
  %140 = and i1 %138, %139
  br i1 %140, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %141 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %142 = bitcast %Tuple* %141 to { %Array*, %Array*, double }*
  %143 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %142, i64 0, i32 0
  %144 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %142, i64 0, i32 1
  %145 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %142, i64 0, i32 2
  %146 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %147 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 0)
  %148 = bitcast i8* %147 to i64*
  %149 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 1)
  %150 = bitcast i8* %149 to i64*
  %151 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 2)
  %152 = bitcast i8* %151 to i64*
  %153 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 3)
  %154 = bitcast i8* %153 to i64*
  store i64 %p1, i64* %148
  store i64 %r1, i64* %150
  store i64 %q1, i64* %152
  store i64 %s1, i64* %154
  %155 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %156 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %155, i64 0)
  %157 = bitcast i8* %156 to double*
  %158 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %155, i64 1)
  %159 = bitcast i8* %158 to double*
  %160 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %155, i64 2)
  %161 = bitcast i8* %160 to double*
  %162 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %155, i64 3)
  %163 = bitcast i8* %162 to double*
  %164 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %155, i64 4)
  %165 = bitcast i8* %164 to double*
  %166 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %155, i64 5)
  %167 = bitcast i8* %166 to double*
  %168 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %155, i64 6)
  %169 = bitcast i8* %168 to double*
  %170 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %155, i64 7)
  %171 = bitcast i8* %170 to double*
  store double -1.000000e+00, double* %157
  store double -1.000000e+00, double* %159
  store double -1.000000e+00, double* %161
  store double 1.000000e+00, double* %163
  store double -1.000000e+00, double* %165
  store double 1.000000e+00, double* %167
  store double 1.000000e+00, double* %169
  store double 1.000000e+00, double* %171
  %172 = load double, double* %sign
  store %Array* %146, %Array** %143
  store %Array* %155, %Array** %144
  store double %172, double* %145
  call void @__quantum__rt__array_remove_access(%Array* %indices)
  call void @__quantum__rt__array_remove_access(%Array* %96)
  call void @__quantum__rt__array_remove_access(%Array* %9)
  call void @__quantum__rt__array_unreference(%Array* %8)
  call void @__quantum__rt__array_unreference(%Array* %9)
  call void @__quantum__rt__array_unreference(%Array* %14)
  call void @__quantum__rt__array_unreference(%Array* %20)
  ret { %Array*, %Array*, double }* %142

test2__1:                                         ; preds = %test1__1
  %173 = icmp sgt i64 %q1, %r1
  %174 = icmp sgt i64 %q1, %s1
  %175 = and i1 %173, %174
  br i1 %175, label %then2__1, label %else__2

then2__1:                                         ; preds = %test2__1
  %176 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %177 = bitcast %Tuple* %176 to { %Array*, %Array*, double }*
  %178 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %177, i64 0, i32 0
  %179 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %177, i64 0, i32 1
  %180 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %177, i64 0, i32 2
  %181 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %182 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %181, i64 0)
  %183 = bitcast i8* %182 to i64*
  %184 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %181, i64 1)
  %185 = bitcast i8* %184 to i64*
  %186 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %181, i64 2)
  %187 = bitcast i8* %186 to i64*
  %188 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %181, i64 3)
  %189 = bitcast i8* %188 to i64*
  store i64 %p1, i64* %183
  store i64 %r1, i64* %185
  store i64 %s1, i64* %187
  store i64 %q1, i64* %189
  %190 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %191 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %190, i64 0)
  %192 = bitcast i8* %191 to double*
  %193 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %190, i64 1)
  %194 = bitcast i8* %193 to double*
  %195 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %190, i64 2)
  %196 = bitcast i8* %195 to double*
  %197 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %190, i64 3)
  %198 = bitcast i8* %197 to double*
  %199 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %190, i64 4)
  %200 = bitcast i8* %199 to double*
  %201 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %190, i64 5)
  %202 = bitcast i8* %201 to double*
  %203 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %190, i64 6)
  %204 = bitcast i8* %203 to double*
  %205 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %190, i64 7)
  %206 = bitcast i8* %205 to double*
  store double 1.000000e+00, double* %192
  store double 1.000000e+00, double* %194
  store double -1.000000e+00, double* %196
  store double 1.000000e+00, double* %198
  store double -1.000000e+00, double* %200
  store double 1.000000e+00, double* %202
  store double -1.000000e+00, double* %204
  store double -1.000000e+00, double* %206
  %207 = load double, double* %sign
  store %Array* %181, %Array** %178
  store %Array* %190, %Array** %179
  store double %207, double* %180
  call void @__quantum__rt__array_remove_access(%Array* %indices)
  call void @__quantum__rt__array_remove_access(%Array* %96)
  call void @__quantum__rt__array_remove_access(%Array* %9)
  call void @__quantum__rt__array_unreference(%Array* %8)
  call void @__quantum__rt__array_unreference(%Array* %9)
  call void @__quantum__rt__array_unreference(%Array* %14)
  call void @__quantum__rt__array_unreference(%Array* %20)
  ret { %Array*, %Array*, double }* %177

else__2:                                          ; preds = %test2__1
  %208 = call %String* @__quantum__rt__string_create(i32 46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @61, i32 0, i32 0))
  call void @__quantum__rt__array_remove_access(%Array* %indices)
  call void @__quantum__rt__array_remove_access(%Array* %96)
  call void @__quantum__rt__array_remove_access(%Array* %9)
  call void @__quantum__rt__array_unreference(%Array* %8)
  call void @__quantum__rt__array_unreference(%Array* %9)
  call void @__quantum__rt__array_unreference(%Array* %14)
  call void @__quantum__rt__array_unreference(%Array* %20)
  call void @__quantum__rt__fail(%String* %208)
  unreachable
}

define %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %nFermions, %Array* %idxFermions, %Array* %pauliReplacements) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  call void @__quantum__rt__array_add_access(%Array* %pauliReplacements)
  %0 = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliZString__body(i64 %nFermions, %Array* %idxFermions)
  %pauliString = alloca %Array*
  store %Array* %0, %Array** %pauliString
  call void @__quantum__rt__array_add_access(%Array* %0)
  %1 = call %Range @Microsoft__Quantum__Arrays___65878c5d771a4099bb698d79b7a68265_IndexRange__body(%Array* %idxFermions)
  %2 = extractvalue %Range %1, 0
  %3 = extractvalue %Range %1, 1
  %4 = extractvalue %Range %1, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %5 = icmp sgt i64 %3, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idx = phi i64 [ %2, %preheader__1 ], [ %19, %exiting__1 ]
  %6 = icmp sge i64 %idx, %4
  %7 = icmp sle i64 %idx, %4
  %8 = select i1 %5, i1 %7, i1 %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 %idx)
  %10 = bitcast i8* %9 to i64*
  %idxFermion = load i64, i64* %10
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pauliReplacements, i64 %idx)
  %12 = bitcast i8* %11 to i2*
  %op = load i2, i2* %12
  %13 = load %Array*, %Array** %pauliString
  %14 = call %Array* @__quantum__rt__array_copy(%Array* %13, i1 false)
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %idxFermion)
  %16 = bitcast i8* %15 to i2*
  %17 = load i2, i2* %16
  store i2 %op, i2* %16
  %18 = load %Array*, %Array** %pauliString
  call void @__quantum__rt__array_remove_access(%Array* %18)
  store %Array* %14, %Array** %pauliString
  call void @__quantum__rt__array_add_access(%Array* %14)
  call void @__quantum__rt__array_unreference(%Array* %14)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %idx, %3
  br label %header__1

exit__1:                                          ; preds = %header__1
  %20 = load %Array*, %Array** %pauliString
  call void @__quantum__rt__array_reference(%Array* %20)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__array_remove_access(%Array* %pauliReplacements)
  call void @__quantum__rt__array_remove_access(%Array* %20)
  call void @__quantum__rt__array_unreference(%Array* %0)
  ret %Array* %20
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__idxTermType__)
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__coeff__)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %4)
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__idxFermions__)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__idxFermions__)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__p__ = load i64, i64* %8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %10 = bitcast i8* %9 to i64*
  %__qsVar4__q__ = load i64, i64* %10
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %12 = bitcast i8* %11 to i64*
  %__qsVar5__r__ = load i64, i64* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %14 = bitcast i8* %13 to i64*
  %__qsVar6__s__ = load i64, i64* %14
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %16 = bitcast i8* %15 to double*
  %17 = load double, double* %16
  %18 = fmul double 1.250000e-01, %17
  %__qsVar7__angle__ = fmul double %18, %stepSize
  %19 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  %20 = icmp eq i64 %__qsVar3__p__, %__qsVar5__r__
  %21 = or i1 %19, %20
  %22 = icmp eq i64 %__qsVar3__p__, %__qsVar6__s__
  %23 = or i1 %21, %22
  %24 = icmp eq i64 %__qsVar4__q__, %__qsVar5__r__
  %25 = or i1 %23, %24
  %26 = icmp eq i64 %__qsVar4__q__, %__qsVar6__s__
  %27 = or i1 %25, %26
  %28 = icmp eq i64 %__qsVar5__r__, %__qsVar6__s__
  %29 = or i1 %27, %28
  br i1 %29, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %30 = call %String* @__quantum__rt__string_create(i32 45, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @34, i32 0, i32 0))
  %31 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %32 = call %String* @__quantum__rt__string_concatenate(%String* %30, %String* %31)
  call void @__quantum__rt__string_unreference(%String* %30)
  call void @__quantum__rt__string_unreference(%String* %31)
  %33 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @35, i32 0, i32 0))
  %34 = call %String* @__quantum__rt__string_concatenate(%String* %32, %String* %33)
  call void @__quantum__rt__string_unreference(%String* %32)
  call void @__quantum__rt__string_unreference(%String* %33)
  %35 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_unreference(%String* %34)
  call void @__quantum__rt__string_unreference(%String* %35)
  %37 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @36, i32 0, i32 0))
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_unreference(%String* %36)
  call void @__quantum__rt__string_unreference(%String* %37)
  %39 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar5__r__)
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_unreference(%String* %38)
  call void @__quantum__rt__string_unreference(%String* %39)
  %41 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @37, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__string_concatenate(%String* %40, %String* %41)
  call void @__quantum__rt__string_unreference(%String* %40)
  call void @__quantum__rt__string_unreference(%String* %41)
  %43 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar6__s__)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_unreference(%String* %42)
  call void @__quantum__rt__string_unreference(%String* %43)
  %45 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @38, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_unreference(%String* %44)
  call void @__quantum__rt__string_unreference(%String* %45)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__fail(%String* %46)
  unreachable

continue__1:                                      ; preds = %entry
  %__qsVar8__x__ = load i2, i2* @PauliX
  %__qsVar9__y__ = load i2, i2* @PauliY
  %__qsVar10__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 0)
  %48 = bitcast i8* %47 to %Array**
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 1)
  %50 = bitcast i8* %49 to %Array**
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 2)
  %52 = bitcast i8* %51 to %Array**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 3)
  %54 = bitcast i8* %53 to %Array**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 4)
  %56 = bitcast i8* %55 to %Array**
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 5)
  %58 = bitcast i8* %57 to %Array**
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 6)
  %60 = bitcast i8* %59 to %Array**
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 7)
  %62 = bitcast i8* %61 to %Array**
  %63 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 0)
  %65 = bitcast i8* %64 to i2*
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 1)
  %67 = bitcast i8* %66 to i2*
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 2)
  %69 = bitcast i8* %68 to i2*
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %63, i64 3)
  %71 = bitcast i8* %70 to i2*
  store i2 %__qsVar9__y__, i2* %65
  store i2 %__qsVar9__y__, i2* %67
  store i2 %__qsVar8__x__, i2* %69
  store i2 %__qsVar9__y__, i2* %71
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to i2*
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 1)
  %76 = bitcast i8* %75 to i2*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 2)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 3)
  %80 = bitcast i8* %79 to i2*
  store i2 %__qsVar8__x__, i2* %74
  store i2 %__qsVar8__x__, i2* %76
  store i2 %__qsVar8__x__, i2* %78
  store i2 %__qsVar9__y__, i2* %80
  %81 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 0)
  %83 = bitcast i8* %82 to i2*
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 1)
  %85 = bitcast i8* %84 to i2*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 2)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 3)
  %89 = bitcast i8* %88 to i2*
  store i2 %__qsVar8__x__, i2* %83
  store i2 %__qsVar9__y__, i2* %85
  store i2 %__qsVar9__y__, i2* %87
  store i2 %__qsVar9__y__, i2* %89
  %90 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 0)
  %92 = bitcast i8* %91 to i2*
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 1)
  %94 = bitcast i8* %93 to i2*
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 2)
  %96 = bitcast i8* %95 to i2*
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 3)
  %98 = bitcast i8* %97 to i2*
  store i2 %__qsVar9__y__, i2* %92
  store i2 %__qsVar8__x__, i2* %94
  store i2 %__qsVar9__y__, i2* %96
  store i2 %__qsVar9__y__, i2* %98
  %99 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 0)
  %101 = bitcast i8* %100 to i2*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 1)
  %103 = bitcast i8* %102 to i2*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 2)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 3)
  %107 = bitcast i8* %106 to i2*
  store i2 %__qsVar8__x__, i2* %101
  store i2 %__qsVar9__y__, i2* %103
  store i2 %__qsVar8__x__, i2* %105
  store i2 %__qsVar8__x__, i2* %107
  %108 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 0)
  %110 = bitcast i8* %109 to i2*
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 1)
  %112 = bitcast i8* %111 to i2*
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 2)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 3)
  %116 = bitcast i8* %115 to i2*
  store i2 %__qsVar9__y__, i2* %110
  store i2 %__qsVar8__x__, i2* %112
  store i2 %__qsVar8__x__, i2* %114
  store i2 %__qsVar8__x__, i2* %116
  %117 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 0)
  %119 = bitcast i8* %118 to i2*
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 1)
  %121 = bitcast i8* %120 to i2*
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 2)
  %123 = bitcast i8* %122 to i2*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 3)
  %125 = bitcast i8* %124 to i2*
  store i2 %__qsVar9__y__, i2* %119
  store i2 %__qsVar9__y__, i2* %121
  store i2 %__qsVar9__y__, i2* %123
  store i2 %__qsVar8__x__, i2* %125
  %126 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 0)
  %128 = bitcast i8* %127 to i2*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 1)
  %130 = bitcast i8* %129 to i2*
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 2)
  %132 = bitcast i8* %131 to i2*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 3)
  %134 = bitcast i8* %133 to i2*
  store i2 %__qsVar8__x__, i2* %128
  store i2 %__qsVar8__x__, i2* %130
  store i2 %__qsVar9__y__, i2* %132
  store i2 %__qsVar8__x__, i2* %134
  store %Array* %63, %Array** %48
  store %Array* %72, %Array** %50
  store %Array* %81, %Array** %52
  store %Array* %90, %Array** %54
  store %Array* %99, %Array** %56
  store %Array* %108, %Array** %58
  store %Array* %117, %Array** %60
  store %Array* %126, %Array** %62
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %135 = phi i64 [ 0, %continue__1 ], [ %140, %exiting__1 ]
  %136 = icmp sle i64 %135, 7
  br i1 %136, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %135)
  %138 = bitcast i8* %137 to %Array**
  %139 = load %Array*, %Array** %138
  call void @__quantum__rt__array_add_access(%Array* %139)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %140 = add i64 %135, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %__qsVar10__ops__)
  %141 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 0)
  %143 = bitcast i8* %142 to i64*
  %144 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 1)
  %145 = bitcast i8* %144 to i64*
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 2)
  %147 = bitcast i8* %146 to i64*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %141, i64 3)
  %149 = bitcast i8* %148 to i64*
  store i64 %__qsVar3__p__, i64* %143
  store i64 %__qsVar4__q__, i64* %145
  store i64 %__qsVar5__r__, i64* %147
  store i64 %__qsVar6__s__, i64* %149
  %150 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %141)
  %151 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i64 0, i32 0
  %__qsVar11__sortedIndices__ = load %Array*, %Array** %151
  call void @__quantum__rt__array_add_access(%Array* %__qsVar11__sortedIndices__)
  %152 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i64 0, i32 1
  %__qsVar12__signs__ = load %Array*, %Array** %152
  call void @__quantum__rt__array_add_access(%Array* %__qsVar12__signs__)
  %153 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %150, i64 0, i32 2
  %__qsVar13__globalSign__ = load double, double* %153
  %154 = call %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %155 = call %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %156 = call i64 @__quantum__rt__array_get_size_1d(%Array* %155)
  %157 = sub i64 %156, 1
  %158 = load %Range, %Range* @EmptyRange
  %159 = insertvalue %Range %158, i64 %157, 0
  %160 = insertvalue %Range %159, i64 -1, 1
  %161 = insertvalue %Range %160, i64 0, 2
  %162 = call %Array* @__quantum__rt__array_slice_1d(%Array* %154, %Range %161, i1 false)
  %163 = call i64 @__quantum__rt__array_get_size_1d(%Array* %162)
  %164 = sub i64 %163, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %165 = phi i64 [ 0, %exit__1 ], [ %174, %exiting__2 ]
  %166 = icmp sle i64 %165, %164
  br i1 %166, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %167 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %162, i64 %165)
  %168 = bitcast i8* %167 to { %Array*, double }**
  %169 = load { %Array*, double }*, { %Array*, double }** %168
  %170 = getelementptr { %Array*, double }, { %Array*, double }* %169, i64 0, i32 0
  %__qsVar14__op__ = load %Array*, %Array** %170
  call void @__quantum__rt__array_add_access(%Array* %__qsVar14__op__)
  %171 = getelementptr { %Array*, double }, { %Array*, double }* %169, i64 0, i32 1
  %__qsVar15__sign__ = load double, double* %171
  %172 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar16__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %172, %Array* %__qsVar11__sortedIndices__, %Array* %__qsVar14__op__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar16__pauliString__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar16__pauliString__)
  %173 = fmul double %__qsVar13__globalSign__, %__qsVar15__sign__
  %theta__inline__1 = fmul double %173, %__qsVar7__angle__
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__qis__exp__adj(%Array* %__qsVar16__pauliString__, double %theta__inline__1, %Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar16__pauliString__)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar14__op__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar16__pauliString__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar16__pauliString__)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %174 = add i64 %165, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %175 = phi i64 [ 0, %exit__2 ], [ %180, %exiting__3 ]
  %176 = icmp sle i64 %175, 7
  br i1 %176, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %177 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %175)
  %178 = bitcast i8* %177 to %Array**
  %179 = load %Array*, %Array** %178
  call void @__quantum__rt__array_remove_access(%Array* %179)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %180 = add i64 %175, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar10__ops__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar11__sortedIndices__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar12__signs__)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %181 = phi i64 [ 0, %exit__3 ], [ %186, %exiting__4 ]
  %182 = icmp sle i64 %181, 7
  br i1 %182, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %183 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %181)
  %184 = bitcast i8* %183 to %Array**
  %185 = load %Array*, %Array** %184
  call void @__quantum__rt__array_unreference(%Array* %185)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %186 = add i64 %181, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %__qsVar10__ops__)
  call void @__quantum__rt__array_unreference(%Array* %141)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar11__sortedIndices__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar12__signs__)
  %187 = bitcast { %Array*, %Array*, double }* %150 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %187)
  %188 = call i64 @__quantum__rt__array_get_size_1d(%Array* %154)
  %189 = sub i64 %188, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %190 = phi i64 [ 0, %exit__4 ], [ %198, %exiting__5 ]
  %191 = icmp sle i64 %190, %189
  br i1 %191, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %154, i64 %190)
  %193 = bitcast i8* %192 to { %Array*, double }**
  %194 = load { %Array*, double }*, { %Array*, double }** %193
  %195 = getelementptr { %Array*, double }, { %Array*, double }* %194, i64 0, i32 0
  %196 = load %Array*, %Array** %195
  call void @__quantum__rt__array_unreference(%Array* %196)
  %197 = bitcast { %Array*, double }* %194 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %197)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %198 = add i64 %190, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %154)
  %199 = sub i64 %156, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %200 = phi i64 [ 0, %exit__5 ], [ %208, %exiting__6 ]
  %201 = icmp sle i64 %200, %199
  br i1 %201, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %202 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %155, i64 %200)
  %203 = bitcast i8* %202 to { %Array*, double }**
  %204 = load { %Array*, double }*, { %Array*, double }** %203
  %205 = getelementptr { %Array*, double }, { %Array*, double }* %204, i64 0, i32 0
  %206 = load %Array*, %Array** %205
  call void @__quantum__rt__array_unreference(%Array* %206)
  %207 = bitcast { %Array*, double }* %204 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %207)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %208 = add i64 %200, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_unreference(%Array* %155)
  %209 = sub i64 %163, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %210 = phi i64 [ 0, %exit__6 ], [ %218, %exiting__7 ]
  %211 = icmp sle i64 %210, %209
  br i1 %211, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %212 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %162, i64 %210)
  %213 = bitcast i8* %212 to { %Array*, double }**
  %214 = load { %Array*, double }*, { %Array*, double }** %213
  %215 = getelementptr { %Array*, double }, { %Array*, double }* %214, i64 0, i32 0
  %216 = load %Array*, %Array** %215
  call void @__quantum__rt__array_unreference(%Array* %216)
  %217 = bitcast { %Array*, double }* %214 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %217)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %218 = add i64 %210, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_unreference(%Array* %162)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %2 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %idxTermType = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %idxTermType)
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  %coeff = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %coeff)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %7
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %8)
  %9 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %9
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__array_add_access(%Array* %idxTermType)
  call void @__quantum__rt__array_add_access(%Array* %coeff)
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %p = load i64, i64* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %14 = bitcast i8* %13 to i64*
  %q = load i64, i64* %14
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %16 = bitcast i8* %15 to i64*
  %r = load i64, i64* %16
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %18 = bitcast i8* %17 to i64*
  %s = load i64, i64* %18
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %20 = bitcast i8* %19 to double*
  %21 = load double, double* %20
  %22 = fmul double 1.250000e-01, %21
  %angle = fmul double %22, %stepSize
  %23 = icmp eq i64 %p, %q
  %24 = icmp eq i64 %p, %r
  %25 = or i1 %23, %24
  %26 = icmp eq i64 %p, %s
  %27 = or i1 %25, %26
  %28 = icmp eq i64 %q, %r
  %29 = or i1 %27, %28
  %30 = icmp eq i64 %q, %s
  %31 = or i1 %29, %30
  %32 = icmp eq i64 %r, %s
  %33 = or i1 %31, %32
  br i1 %33, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %34 = call %String* @__quantum__rt__string_create(i32 45, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @39, i32 0, i32 0))
  %35 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_unreference(%String* %34)
  call void @__quantum__rt__string_unreference(%String* %35)
  %37 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @40, i32 0, i32 0))
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_unreference(%String* %36)
  call void @__quantum__rt__string_unreference(%String* %37)
  %39 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_unreference(%String* %38)
  call void @__quantum__rt__string_unreference(%String* %39)
  %41 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @41, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__string_concatenate(%String* %40, %String* %41)
  call void @__quantum__rt__string_unreference(%String* %40)
  call void @__quantum__rt__string_unreference(%String* %41)
  %43 = call %String* @__quantum__rt__int_to_string(i64 %r)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_unreference(%String* %42)
  call void @__quantum__rt__string_unreference(%String* %43)
  %45 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @42, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_unreference(%String* %44)
  call void @__quantum__rt__string_unreference(%String* %45)
  %47 = call %String* @__quantum__rt__int_to_string(i64 %s)
  %48 = call %String* @__quantum__rt__string_concatenate(%String* %46, %String* %47)
  call void @__quantum__rt__string_unreference(%String* %46)
  call void @__quantum__rt__string_unreference(%String* %47)
  %49 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @43, i32 0, i32 0))
  %50 = call %String* @__quantum__rt__string_concatenate(%String* %48, %String* %49)
  call void @__quantum__rt__string_unreference(%String* %48)
  call void @__quantum__rt__string_unreference(%String* %49)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %8)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__fail(%String* %50)
  unreachable

continue__1:                                      ; preds = %entry
  %x = load i2, i2* @PauliX
  %y = load i2, i2* @PauliY
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %52 = bitcast i8* %51 to %Array**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %54 = bitcast i8* %53 to %Array**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %56 = bitcast i8* %55 to %Array**
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %58 = bitcast i8* %57 to %Array**
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %60 = bitcast i8* %59 to %Array**
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %62 = bitcast i8* %61 to %Array**
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %64 = bitcast i8* %63 to %Array**
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %66 = bitcast i8* %65 to %Array**
  %67 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 0)
  %69 = bitcast i8* %68 to i2*
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 1)
  %71 = bitcast i8* %70 to i2*
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 2)
  %73 = bitcast i8* %72 to i2*
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 3)
  %75 = bitcast i8* %74 to i2*
  store i2 %y, i2* %69
  store i2 %y, i2* %71
  store i2 %x, i2* %73
  store i2 %y, i2* %75
  %76 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 0)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 1)
  %80 = bitcast i8* %79 to i2*
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 2)
  %82 = bitcast i8* %81 to i2*
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 3)
  %84 = bitcast i8* %83 to i2*
  store i2 %x, i2* %78
  store i2 %x, i2* %80
  store i2 %x, i2* %82
  store i2 %y, i2* %84
  %85 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 0)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 1)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 2)
  %91 = bitcast i8* %90 to i2*
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 3)
  %93 = bitcast i8* %92 to i2*
  store i2 %x, i2* %87
  store i2 %y, i2* %89
  store i2 %y, i2* %91
  store i2 %y, i2* %93
  %94 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 0)
  %96 = bitcast i8* %95 to i2*
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 1)
  %98 = bitcast i8* %97 to i2*
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 2)
  %100 = bitcast i8* %99 to i2*
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 3)
  %102 = bitcast i8* %101 to i2*
  store i2 %y, i2* %96
  store i2 %x, i2* %98
  store i2 %y, i2* %100
  store i2 %y, i2* %102
  %103 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 0)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 1)
  %107 = bitcast i8* %106 to i2*
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 2)
  %109 = bitcast i8* %108 to i2*
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 3)
  %111 = bitcast i8* %110 to i2*
  store i2 %x, i2* %105
  store i2 %y, i2* %107
  store i2 %x, i2* %109
  store i2 %x, i2* %111
  %112 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 0)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 1)
  %116 = bitcast i8* %115 to i2*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 2)
  %118 = bitcast i8* %117 to i2*
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 3)
  %120 = bitcast i8* %119 to i2*
  store i2 %y, i2* %114
  store i2 %x, i2* %116
  store i2 %x, i2* %118
  store i2 %x, i2* %120
  %121 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 0)
  %123 = bitcast i8* %122 to i2*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 1)
  %125 = bitcast i8* %124 to i2*
  %126 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 2)
  %127 = bitcast i8* %126 to i2*
  %128 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 3)
  %129 = bitcast i8* %128 to i2*
  store i2 %y, i2* %123
  store i2 %y, i2* %125
  store i2 %y, i2* %127
  store i2 %x, i2* %129
  %130 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 0)
  %132 = bitcast i8* %131 to i2*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 1)
  %134 = bitcast i8* %133 to i2*
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 2)
  %136 = bitcast i8* %135 to i2*
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 3)
  %138 = bitcast i8* %137 to i2*
  store i2 %x, i2* %132
  store i2 %x, i2* %134
  store i2 %y, i2* %136
  store i2 %x, i2* %138
  store %Array* %67, %Array** %52
  store %Array* %76, %Array** %54
  store %Array* %85, %Array** %56
  store %Array* %94, %Array** %58
  store %Array* %103, %Array** %60
  store %Array* %112, %Array** %62
  store %Array* %121, %Array** %64
  store %Array* %130, %Array** %66
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %139 = phi i64 [ 0, %continue__1 ], [ %144, %exiting__1 ]
  %140 = icmp sle i64 %139, 7
  br i1 %140, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %139)
  %142 = bitcast i8* %141 to %Array**
  %143 = load %Array*, %Array** %142
  call void @__quantum__rt__array_add_access(%Array* %143)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %144 = add i64 %139, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %ops)
  %145 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 0)
  %147 = bitcast i8* %146 to i64*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 1)
  %149 = bitcast i8* %148 to i64*
  %150 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 2)
  %151 = bitcast i8* %150 to i64*
  %152 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 3)
  %153 = bitcast i8* %152 to i64*
  store i64 %p, i64* %147
  store i64 %q, i64* %149
  store i64 %r, i64* %151
  store i64 %s, i64* %153
  %154 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %145)
  %155 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i64 0, i32 0
  %sortedIndices = load %Array*, %Array** %155
  call void @__quantum__rt__array_add_access(%Array* %sortedIndices)
  %156 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i64 0, i32 1
  %signs = load %Array*, %Array** %156
  call void @__quantum__rt__array_add_access(%Array* %signs)
  %157 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i64 0, i32 2
  %globalSign = load double, double* %157
  %158 = call %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %ops, %Array* %signs)
  %159 = call i64 @__quantum__rt__array_get_size_1d(%Array* %158)
  %160 = sub i64 %159, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %161 = phi i64 [ 0, %exit__1 ], [ %177, %exiting__2 ]
  %162 = icmp sle i64 %161, %160
  br i1 %162, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %163 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %161)
  %164 = bitcast i8* %163 to { %Array*, double }**
  %165 = load { %Array*, double }*, { %Array*, double }** %164
  %166 = getelementptr { %Array*, double }, { %Array*, double }* %165, i64 0, i32 0
  %op = load %Array*, %Array** %166
  call void @__quantum__rt__array_add_access(%Array* %op)
  %167 = getelementptr { %Array*, double }, { %Array*, double }* %165, i64 0, i32 1
  %sign = load double, double* %167
  %168 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %168, %Array* %sortedIndices, %Array* %op)
  call void @__quantum__rt__array_add_access(%Array* %pauliString)
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_add_access(%Array* %pauliString)
  %169 = fmul double %globalSign, %sign
  %theta__inline__1 = fmul double %169, %angle
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %170 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %171 = bitcast %Tuple* %170 to { %Array*, double, %Array* }*
  %172 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %171, i64 0, i32 0
  %173 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %171, i64 0, i32 1
  %174 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %171, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %pauliString)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store %Array* %pauliString, %Array** %172
  store double %theta__inline__1, double* %173
  store %Array* %qubits, %Array** %174
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %171)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %pauliString)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  %175 = load %Array*, %Array** %172
  call void @__quantum__rt__array_unreference(%Array* %175)
  %176 = load %Array*, %Array** %174
  call void @__quantum__rt__array_unreference(%Array* %176)
  call void @__quantum__rt__tuple_unreference(%Tuple* %170)
  call void @__quantum__rt__array_remove_access(%Array* %op)
  call void @__quantum__rt__array_remove_access(%Array* %pauliString)
  call void @__quantum__rt__array_unreference(%Array* %pauliString)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %177 = add i64 %161, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %8)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %178 = phi i64 [ 0, %exit__2 ], [ %183, %exiting__3 ]
  %179 = icmp sle i64 %178, 7
  br i1 %179, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %180 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %178)
  %181 = bitcast i8* %180 to %Array**
  %182 = load %Array*, %Array** %181
  call void @__quantum__rt__array_remove_access(%Array* %182)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %183 = add i64 %178, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %ops)
  call void @__quantum__rt__array_remove_access(%Array* %sortedIndices)
  call void @__quantum__rt__array_remove_access(%Array* %signs)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %184 = phi i64 [ 0, %exit__3 ], [ %189, %exiting__4 ]
  %185 = icmp sle i64 %184, 7
  br i1 %185, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %186 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %184)
  %187 = bitcast i8* %186 to %Array**
  %188 = load %Array*, %Array** %187
  call void @__quantum__rt__array_unreference(%Array* %188)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %189 = add i64 %184, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %ops)
  call void @__quantum__rt__array_unreference(%Array* %145)
  call void @__quantum__rt__array_unreference(%Array* %sortedIndices)
  call void @__quantum__rt__array_unreference(%Array* %signs)
  %190 = bitcast { %Array*, %Array*, double }* %154 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %190)
  %191 = sub i64 %159, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %192 = phi i64 [ 0, %exit__4 ], [ %200, %exiting__5 ]
  %193 = icmp sle i64 %192, %191
  br i1 %193, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %194 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %192)
  %195 = bitcast i8* %194 to { %Array*, double }**
  %196 = load { %Array*, double }*, { %Array*, double }** %195
  %197 = getelementptr { %Array*, double }, { %Array*, double }* %196, i64 0, i32 0
  %198 = load %Array*, %Array** %197
  call void @__quantum__rt__array_unreference(%Array* %198)
  %199 = bitcast { %Array*, double }* %196 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %199)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %200 = add i64 %192, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %158)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %2 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__idxTermType__)
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__coeff__)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__idxFermions__)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %8)
  %9 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %9
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__idxFermions__)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__p__ = load i64, i64* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %14 = bitcast i8* %13 to i64*
  %__qsVar4__q__ = load i64, i64* %14
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %16 = bitcast i8* %15 to i64*
  %__qsVar5__r__ = load i64, i64* %16
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %18 = bitcast i8* %17 to i64*
  %__qsVar6__s__ = load i64, i64* %18
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %20 = bitcast i8* %19 to double*
  %21 = load double, double* %20
  %22 = fmul double 1.250000e-01, %21
  %__qsVar7__angle__ = fmul double %22, %stepSize
  %23 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  %24 = icmp eq i64 %__qsVar3__p__, %__qsVar5__r__
  %25 = or i1 %23, %24
  %26 = icmp eq i64 %__qsVar3__p__, %__qsVar6__s__
  %27 = or i1 %25, %26
  %28 = icmp eq i64 %__qsVar4__q__, %__qsVar5__r__
  %29 = or i1 %27, %28
  %30 = icmp eq i64 %__qsVar4__q__, %__qsVar6__s__
  %31 = or i1 %29, %30
  %32 = icmp eq i64 %__qsVar5__r__, %__qsVar6__s__
  %33 = or i1 %31, %32
  br i1 %33, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %34 = call %String* @__quantum__rt__string_create(i32 45, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @44, i32 0, i32 0))
  %35 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %36 = call %String* @__quantum__rt__string_concatenate(%String* %34, %String* %35)
  call void @__quantum__rt__string_unreference(%String* %34)
  call void @__quantum__rt__string_unreference(%String* %35)
  %37 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @45, i32 0, i32 0))
  %38 = call %String* @__quantum__rt__string_concatenate(%String* %36, %String* %37)
  call void @__quantum__rt__string_unreference(%String* %36)
  call void @__quantum__rt__string_unreference(%String* %37)
  %39 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %40 = call %String* @__quantum__rt__string_concatenate(%String* %38, %String* %39)
  call void @__quantum__rt__string_unreference(%String* %38)
  call void @__quantum__rt__string_unreference(%String* %39)
  %41 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @46, i32 0, i32 0))
  %42 = call %String* @__quantum__rt__string_concatenate(%String* %40, %String* %41)
  call void @__quantum__rt__string_unreference(%String* %40)
  call void @__quantum__rt__string_unreference(%String* %41)
  %43 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar5__r__)
  %44 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %43)
  call void @__quantum__rt__string_unreference(%String* %42)
  call void @__quantum__rt__string_unreference(%String* %43)
  %45 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %46 = call %String* @__quantum__rt__string_concatenate(%String* %44, %String* %45)
  call void @__quantum__rt__string_unreference(%String* %44)
  call void @__quantum__rt__string_unreference(%String* %45)
  %47 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar6__s__)
  %48 = call %String* @__quantum__rt__string_concatenate(%String* %46, %String* %47)
  call void @__quantum__rt__string_unreference(%String* %46)
  call void @__quantum__rt__string_unreference(%String* %47)
  %49 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @48, i32 0, i32 0))
  %50 = call %String* @__quantum__rt__string_concatenate(%String* %48, %String* %49)
  call void @__quantum__rt__string_unreference(%String* %48)
  call void @__quantum__rt__string_unreference(%String* %49)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %8)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__fail(%String* %50)
  unreachable

continue__1:                                      ; preds = %entry
  %__qsVar8__x__ = load i2, i2* @PauliX
  %__qsVar9__y__ = load i2, i2* @PauliY
  %__qsVar10__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 0)
  %52 = bitcast i8* %51 to %Array**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 1)
  %54 = bitcast i8* %53 to %Array**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 2)
  %56 = bitcast i8* %55 to %Array**
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 3)
  %58 = bitcast i8* %57 to %Array**
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 4)
  %60 = bitcast i8* %59 to %Array**
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 5)
  %62 = bitcast i8* %61 to %Array**
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 6)
  %64 = bitcast i8* %63 to %Array**
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 7)
  %66 = bitcast i8* %65 to %Array**
  %67 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 0)
  %69 = bitcast i8* %68 to i2*
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 1)
  %71 = bitcast i8* %70 to i2*
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 2)
  %73 = bitcast i8* %72 to i2*
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %67, i64 3)
  %75 = bitcast i8* %74 to i2*
  store i2 %__qsVar9__y__, i2* %69
  store i2 %__qsVar9__y__, i2* %71
  store i2 %__qsVar8__x__, i2* %73
  store i2 %__qsVar9__y__, i2* %75
  %76 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 0)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 1)
  %80 = bitcast i8* %79 to i2*
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 2)
  %82 = bitcast i8* %81 to i2*
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 3)
  %84 = bitcast i8* %83 to i2*
  store i2 %__qsVar8__x__, i2* %78
  store i2 %__qsVar8__x__, i2* %80
  store i2 %__qsVar8__x__, i2* %82
  store i2 %__qsVar9__y__, i2* %84
  %85 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 0)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 1)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 2)
  %91 = bitcast i8* %90 to i2*
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 3)
  %93 = bitcast i8* %92 to i2*
  store i2 %__qsVar8__x__, i2* %87
  store i2 %__qsVar9__y__, i2* %89
  store i2 %__qsVar9__y__, i2* %91
  store i2 %__qsVar9__y__, i2* %93
  %94 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 0)
  %96 = bitcast i8* %95 to i2*
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 1)
  %98 = bitcast i8* %97 to i2*
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 2)
  %100 = bitcast i8* %99 to i2*
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 3)
  %102 = bitcast i8* %101 to i2*
  store i2 %__qsVar9__y__, i2* %96
  store i2 %__qsVar8__x__, i2* %98
  store i2 %__qsVar9__y__, i2* %100
  store i2 %__qsVar9__y__, i2* %102
  %103 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 0)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 1)
  %107 = bitcast i8* %106 to i2*
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 2)
  %109 = bitcast i8* %108 to i2*
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 3)
  %111 = bitcast i8* %110 to i2*
  store i2 %__qsVar8__x__, i2* %105
  store i2 %__qsVar9__y__, i2* %107
  store i2 %__qsVar8__x__, i2* %109
  store i2 %__qsVar8__x__, i2* %111
  %112 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 0)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 1)
  %116 = bitcast i8* %115 to i2*
  %117 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 2)
  %118 = bitcast i8* %117 to i2*
  %119 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %112, i64 3)
  %120 = bitcast i8* %119 to i2*
  store i2 %__qsVar9__y__, i2* %114
  store i2 %__qsVar8__x__, i2* %116
  store i2 %__qsVar8__x__, i2* %118
  store i2 %__qsVar8__x__, i2* %120
  %121 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 0)
  %123 = bitcast i8* %122 to i2*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 1)
  %125 = bitcast i8* %124 to i2*
  %126 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 2)
  %127 = bitcast i8* %126 to i2*
  %128 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 3)
  %129 = bitcast i8* %128 to i2*
  store i2 %__qsVar9__y__, i2* %123
  store i2 %__qsVar9__y__, i2* %125
  store i2 %__qsVar9__y__, i2* %127
  store i2 %__qsVar8__x__, i2* %129
  %130 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 0)
  %132 = bitcast i8* %131 to i2*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 1)
  %134 = bitcast i8* %133 to i2*
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 2)
  %136 = bitcast i8* %135 to i2*
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 3)
  %138 = bitcast i8* %137 to i2*
  store i2 %__qsVar8__x__, i2* %132
  store i2 %__qsVar8__x__, i2* %134
  store i2 %__qsVar9__y__, i2* %136
  store i2 %__qsVar8__x__, i2* %138
  store %Array* %67, %Array** %52
  store %Array* %76, %Array** %54
  store %Array* %85, %Array** %56
  store %Array* %94, %Array** %58
  store %Array* %103, %Array** %60
  store %Array* %112, %Array** %62
  store %Array* %121, %Array** %64
  store %Array* %130, %Array** %66
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %139 = phi i64 [ 0, %continue__1 ], [ %144, %exiting__1 ]
  %140 = icmp sle i64 %139, 7
  br i1 %140, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %139)
  %142 = bitcast i8* %141 to %Array**
  %143 = load %Array*, %Array** %142
  call void @__quantum__rt__array_add_access(%Array* %143)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %144 = add i64 %139, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %__qsVar10__ops__)
  %145 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 0)
  %147 = bitcast i8* %146 to i64*
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 1)
  %149 = bitcast i8* %148 to i64*
  %150 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 2)
  %151 = bitcast i8* %150 to i64*
  %152 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %145, i64 3)
  %153 = bitcast i8* %152 to i64*
  store i64 %__qsVar3__p__, i64* %147
  store i64 %__qsVar4__q__, i64* %149
  store i64 %__qsVar5__r__, i64* %151
  store i64 %__qsVar6__s__, i64* %153
  %154 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %145)
  %155 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i64 0, i32 0
  %__qsVar11__sortedIndices__ = load %Array*, %Array** %155
  call void @__quantum__rt__array_add_access(%Array* %__qsVar11__sortedIndices__)
  %156 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i64 0, i32 1
  %__qsVar12__signs__ = load %Array*, %Array** %156
  call void @__quantum__rt__array_add_access(%Array* %__qsVar12__signs__)
  %157 = getelementptr { %Array*, %Array*, double }, { %Array*, %Array*, double }* %154, i64 0, i32 2
  %__qsVar13__globalSign__ = load double, double* %157
  %158 = call %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %159 = call %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %160 = call i64 @__quantum__rt__array_get_size_1d(%Array* %159)
  %161 = sub i64 %160, 1
  %162 = load %Range, %Range* @EmptyRange
  %163 = insertvalue %Range %162, i64 %161, 0
  %164 = insertvalue %Range %163, i64 -1, 1
  %165 = insertvalue %Range %164, i64 0, 2
  %166 = call %Array* @__quantum__rt__array_slice_1d(%Array* %158, %Range %165, i1 false)
  %167 = call i64 @__quantum__rt__array_get_size_1d(%Array* %166)
  %168 = sub i64 %167, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %169 = phi i64 [ 0, %exit__1 ], [ %185, %exiting__2 ]
  %170 = icmp sle i64 %169, %168
  br i1 %170, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %171 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %166, i64 %169)
  %172 = bitcast i8* %171 to { %Array*, double }**
  %173 = load { %Array*, double }*, { %Array*, double }** %172
  %174 = getelementptr { %Array*, double }, { %Array*, double }* %173, i64 0, i32 0
  %__qsVar14__op__ = load %Array*, %Array** %174
  call void @__quantum__rt__array_add_access(%Array* %__qsVar14__op__)
  %175 = getelementptr { %Array*, double }, { %Array*, double }* %173, i64 0, i32 1
  %__qsVar15__sign__ = load double, double* %175
  %176 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar16__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %176, %Array* %__qsVar11__sortedIndices__, %Array* %__qsVar14__op__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar16__pauliString__)
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar16__pauliString__)
  %177 = fmul double %__qsVar13__globalSign__, %__qsVar15__sign__
  %theta__inline__1 = fmul double %177, %__qsVar7__angle__
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %178 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %179 = bitcast %Tuple* %178 to { %Array*, double, %Array* }*
  %180 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %179, i64 0, i32 0
  %181 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %179, i64 0, i32 1
  %182 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %179, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %__qsVar16__pauliString__)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store %Array* %__qsVar16__pauliString__, %Array** %180
  store double %theta__inline__1, double* %181
  store %Array* %qubits, %Array** %182
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %179)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar16__pauliString__)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  %183 = load %Array*, %Array** %180
  call void @__quantum__rt__array_unreference(%Array* %183)
  %184 = load %Array*, %Array** %182
  call void @__quantum__rt__array_unreference(%Array* %184)
  call void @__quantum__rt__tuple_unreference(%Tuple* %178)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar14__op__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar16__pauliString__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar16__pauliString__)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %185 = add i64 %169, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %8)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %186 = phi i64 [ 0, %exit__2 ], [ %191, %exiting__3 ]
  %187 = icmp sle i64 %186, 7
  br i1 %187, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %188 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %186)
  %189 = bitcast i8* %188 to %Array**
  %190 = load %Array*, %Array** %189
  call void @__quantum__rt__array_remove_access(%Array* %190)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %191 = add i64 %186, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar10__ops__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar11__sortedIndices__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar12__signs__)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %192 = phi i64 [ 0, %exit__3 ], [ %197, %exiting__4 ]
  %193 = icmp sle i64 %192, 7
  br i1 %193, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %194 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %192)
  %195 = bitcast i8* %194 to %Array**
  %196 = load %Array*, %Array** %195
  call void @__quantum__rt__array_unreference(%Array* %196)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %197 = add i64 %192, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %__qsVar10__ops__)
  call void @__quantum__rt__array_unreference(%Array* %145)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar11__sortedIndices__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar12__signs__)
  %198 = bitcast { %Array*, %Array*, double }* %154 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %198)
  %199 = call i64 @__quantum__rt__array_get_size_1d(%Array* %158)
  %200 = sub i64 %199, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %201 = phi i64 [ 0, %exit__4 ], [ %209, %exiting__5 ]
  %202 = icmp sle i64 %201, %200
  br i1 %202, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %203 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %158, i64 %201)
  %204 = bitcast i8* %203 to { %Array*, double }**
  %205 = load { %Array*, double }*, { %Array*, double }** %204
  %206 = getelementptr { %Array*, double }, { %Array*, double }* %205, i64 0, i32 0
  %207 = load %Array*, %Array** %206
  call void @__quantum__rt__array_unreference(%Array* %207)
  %208 = bitcast { %Array*, double }* %205 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %208)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %209 = add i64 %201, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %158)
  %210 = sub i64 %160, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %211 = phi i64 [ 0, %exit__5 ], [ %219, %exiting__6 ]
  %212 = icmp sle i64 %211, %210
  br i1 %212, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %213 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %159, i64 %211)
  %214 = bitcast i8* %213 to { %Array*, double }**
  %215 = load { %Array*, double }*, { %Array*, double }** %214
  %216 = getelementptr { %Array*, double }, { %Array*, double }* %215, i64 0, i32 0
  %217 = load %Array*, %Array** %216
  call void @__quantum__rt__array_unreference(%Array* %217)
  %218 = bitcast { %Array*, double }* %215 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %218)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %219 = add i64 %211, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_unreference(%Array* %159)
  %220 = sub i64 %167, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %221 = phi i64 [ 0, %exit__6 ], [ %229, %exiting__7 ]
  %222 = icmp sle i64 %221, %220
  br i1 %222, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %223 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %166, i64 %221)
  %224 = bitcast i8* %223 to { %Array*, double }**
  %225 = load { %Array*, double }*, { %Array*, double }** %224
  %226 = getelementptr { %Array*, double }, { %Array*, double }* %225, i64 0, i32 0
  %227 = load %Array*, %Array** %226
  call void @__quantum__rt__array_unreference(%Array* %227)
  %228 = bitcast { %Array*, double }* %225 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %228)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %229 = add i64 %221, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_unreference(%Array* %166)
  ret void
}

define %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliZString__body(i64 %nFermions, %Array* %idxFermions) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %bitString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerBitString__body(i64 %nFermions, %Array* %idxFermions)
  call void @__quantum__rt__array_add_access(%Array* %bitString)
  %0 = load i2, i2* @PauliZ
  %1 = call %Array* @Microsoft__Quantum__Convert__BoolArrayAsPauli__body(i2 %0, i1 true, %Array* %bitString)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__array_remove_access(%Array* %bitString)
  call void @__quantum__rt__array_unreference(%Array* %bitString)
  ret %Array* %1
}

define %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerBitString__body(i64 %nFermions, %Array* %idxFermions) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %1 = srem i64 %0, 2
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i32 85, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @62, i32 0, i32 0))
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nFermions)
  %zString = alloca %Array*
  store %Array* %4, %Array** %zString
  call void @__quantum__rt__array_add_access(%Array* %4)
  %5 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %6 = phi i64 [ 0, %continue__1 ], [ %17, %exiting__1 ]
  %7 = icmp sle i64 %6, %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 %6)
  %9 = bitcast i8* %8 to i64*
  %fermionIdx = load i64, i64* %9
  %10 = icmp sge i64 %fermionIdx, %nFermions
  br i1 %10, label %then0__2, label %continue__2

then0__2:                                         ; preds = %body__1
  %11 = call %String* @__quantum__rt__string_create(i32 45, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @63, i32 0, i32 0))
  %12 = call %String* @__quantum__rt__int_to_string(i64 %fermionIdx)
  %13 = call %String* @__quantum__rt__string_concatenate(%String* %11, %String* %12)
  call void @__quantum__rt__string_unreference(%String* %11)
  call void @__quantum__rt__string_unreference(%String* %12)
  %14 = call %String* @__quantum__rt__string_create(i32 14, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @64, i32 0, i32 0))
  %15 = call %String* @__quantum__rt__string_concatenate(%String* %13, %String* %14)
  call void @__quantum__rt__string_unreference(%String* %13)
  call void @__quantum__rt__string_unreference(%String* %14)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  %16 = load %Array*, %Array** %zString
  call void @__quantum__rt__array_remove_access(%Array* %16)
  call void @__quantum__rt__array_unreference(%Array* %4)
  call void @__quantum__rt__fail(%String* %15)
  unreachable

continue__2:                                      ; preds = %body__1
  br label %header__2

exiting__1:                                       ; preds = %exit__2
  %17 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %18 = sub i64 %0, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %continue__2
  %idx = phi i64 [ 0, %continue__2 ], [ %33, %exiting__2 ]
  %19 = icmp sge i64 %idx, %fermionIdx
  %20 = icmp sle i64 %idx, %fermionIdx
  %21 = select i1 true, i1 %20, i1 %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = load %Array*, %Array** %zString
  %23 = call %Array* @__quantum__rt__array_copy(%Array* %22, i1 false)
  %24 = load %Array*, %Array** %zString
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 %idx)
  %26 = bitcast i8* %25 to i1*
  %27 = load i1, i1* %26
  %28 = xor i1 %27, true
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %idx)
  %30 = bitcast i8* %29 to i1*
  %31 = load i1, i1* %30
  store i1 %28, i1* %30
  %32 = load %Array*, %Array** %zString
  call void @__quantum__rt__array_remove_access(%Array* %32)
  store %Array* %23, %Array** %zString
  call void @__quantum__rt__array_add_access(%Array* %23)
  call void @__quantum__rt__array_unreference(%Array* %23)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %33 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  br label %exiting__1

header__3:                                        ; preds = %exiting__3, %exit__1
  %34 = phi i64 [ 0, %exit__1 ], [ %44, %exiting__3 ]
  %35 = icmp sle i64 %34, %18
  br i1 %35, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 %34)
  %37 = bitcast i8* %36 to i64*
  %fermionIdx1 = load i64, i64* %37
  %38 = load %Array*, %Array** %zString
  %39 = call %Array* @__quantum__rt__array_copy(%Array* %38, i1 false)
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 %fermionIdx1)
  %41 = bitcast i8* %40 to i1*
  %42 = load i1, i1* %41
  store i1 false, i1* %41
  %43 = load %Array*, %Array** %zString
  call void @__quantum__rt__array_remove_access(%Array* %43)
  store %Array* %39, %Array** %zString
  call void @__quantum__rt__array_add_access(%Array* %39)
  call void @__quantum__rt__array_unreference(%Array* %39)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %34, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %45 = load %Array*, %Array** %zString
  call void @__quantum__rt__array_reference(%Array* %45)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__array_remove_access(%Array* %45)
  call void @__quantum__rt__array_unreference(%Array* %4)
  ret %Array* %45
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %idxTermType = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %idxTermType)
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %coeff = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %coeff)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %4)
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__array_add_access(%Array* %idxTermType)
  call void @__quantum__rt__array_add_access(%Array* %coeff)
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %8 = bitcast i8* %7 to i64*
  %p = load i64, i64* %8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %10 = bitcast i8* %9 to i64*
  %q = load i64, i64* %10
  %11 = icmp eq i64 %p, %q
  br i1 %11, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %12 = call %String* @__quantum__rt__string_create(i32 43, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @49, i32 0, i32 0))
  %13 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %14 = call %String* @__quantum__rt__string_concatenate(%String* %12, %String* %13)
  call void @__quantum__rt__string_unreference(%String* %12)
  call void @__quantum__rt__string_unreference(%String* %13)
  %15 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @50, i32 0, i32 0))
  %16 = call %String* @__quantum__rt__string_concatenate(%String* %14, %String* %15)
  call void @__quantum__rt__string_unreference(%String* %14)
  call void @__quantum__rt__string_unreference(%String* %15)
  %17 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_unreference(%String* %16)
  call void @__quantum__rt__string_unreference(%String* %17)
  %19 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @51, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_unreference(%String* %18)
  call void @__quantum__rt__string_unreference(%String* %19)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__fail(%String* %20)
  unreachable

continue__1:                                      ; preds = %entry
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %22 = bitcast i8* %21 to double*
  %23 = load double, double* %22
  %24 = fmul double 5.000000e-01, %23
  %angle = fmul double %24, %stepSize
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %26 = bitcast i8* %25 to %Array**
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %28 = bitcast i8* %27 to %Array**
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to i2*
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 1)
  %33 = bitcast i8* %32 to i2*
  %34 = load i2, i2* @PauliX
  %35 = load i2, i2* @PauliY
  store i2 %34, i2* %31
  store i2 %35, i2* %33
  %36 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 0)
  %38 = bitcast i8* %37 to i2*
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 1)
  %40 = bitcast i8* %39 to i2*
  %41 = load i2, i2* @PauliY
  %42 = load i2, i2* @PauliX
  store i2 %41, i2* %38
  store i2 %42, i2* %40
  store %Array* %29, %Array** %26
  store %Array* %36, %Array** %28
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %43 = phi i64 [ 0, %continue__1 ], [ %48, %exiting__1 ]
  %44 = icmp sle i64 %43, 1
  br i1 %44, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %43)
  %46 = bitcast i8* %45 to %Array**
  %47 = load %Array*, %Array** %46
  call void @__quantum__rt__array_add_access(%Array* %47)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %48 = add i64 %43, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %ops)
  %signs = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 0)
  %50 = bitcast i8* %49 to double*
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 1)
  %52 = bitcast i8* %51 to double*
  store double 1.000000e+00, double* %50
  store double -1.000000e+00, double* %52
  call void @__quantum__rt__array_add_access(%Array* %signs)
  %53 = call %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %ops, %Array* %signs)
  %54 = call i64 @__quantum__rt__array_get_size_1d(%Array* %53)
  %55 = sub i64 %54, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %56 = phi i64 [ 0, %exit__1 ], [ %64, %exiting__2 ]
  %57 = icmp sle i64 %56, %55
  br i1 %57, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %56)
  %59 = bitcast i8* %58 to { %Array*, double }**
  %60 = load { %Array*, double }*, { %Array*, double }** %59
  %61 = getelementptr { %Array*, double }, { %Array*, double }* %60, i64 0, i32 0
  %op = load %Array*, %Array** %61
  call void @__quantum__rt__array_add_access(%Array* %op)
  %62 = getelementptr { %Array*, double }, { %Array*, double }* %60, i64 0, i32 1
  %sign = load double, double* %62
  %63 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %63, %Array* %idxFermions, %Array* %op)
  call void @__quantum__rt__array_add_access(%Array* %pauliString)
  call void @__quantum__rt__array_add_access(%Array* %pauliString)
  %theta__inline__1 = fmul double %sign, %angle
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__qis__exp__body(%Array* %pauliString, double %theta__inline__1, %Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %pauliString)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %op)
  call void @__quantum__rt__array_remove_access(%Array* %pauliString)
  call void @__quantum__rt__array_unreference(%Array* %pauliString)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %64 = add i64 %56, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %65 = phi i64 [ 0, %exit__2 ], [ %70, %exiting__3 ]
  %66 = icmp sle i64 %65, 1
  br i1 %66, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %65)
  %68 = bitcast i8* %67 to %Array**
  %69 = load %Array*, %Array** %68
  call void @__quantum__rt__array_remove_access(%Array* %69)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %70 = add i64 %65, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %ops)
  call void @__quantum__rt__array_remove_access(%Array* %signs)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %71 = phi i64 [ 0, %exit__3 ], [ %76, %exiting__4 ]
  %72 = icmp sle i64 %71, 1
  br i1 %72, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %71)
  %74 = bitcast i8* %73 to %Array**
  %75 = load %Array*, %Array** %74
  call void @__quantum__rt__array_unreference(%Array* %75)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %76 = add i64 %71, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %ops)
  call void @__quantum__rt__array_unreference(%Array* %signs)
  %77 = sub i64 %54, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %78 = phi i64 [ 0, %exit__4 ], [ %86, %exiting__5 ]
  %79 = icmp sle i64 %78, %77
  br i1 %79, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %78)
  %81 = bitcast i8* %80 to { %Array*, double }**
  %82 = load { %Array*, double }*, { %Array*, double }** %81
  %83 = getelementptr { %Array*, double }, { %Array*, double }* %82, i64 0, i32 0
  %84 = load %Array*, %Array** %83
  call void @__quantum__rt__array_unreference(%Array* %84)
  %85 = bitcast { %Array*, double }* %82 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %85)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %86 = add i64 %78, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %53)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__idxTermType__)
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__coeff__)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %4)
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__idxFermions__)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__idxFermions__)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__p__ = load i64, i64* %8
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %10 = bitcast i8* %9 to i64*
  %__qsVar4__q__ = load i64, i64* %10
  %11 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  br i1 %11, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %12 = call %String* @__quantum__rt__string_create(i32 43, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @52, i32 0, i32 0))
  %13 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %14 = call %String* @__quantum__rt__string_concatenate(%String* %12, %String* %13)
  call void @__quantum__rt__string_unreference(%String* %12)
  call void @__quantum__rt__string_unreference(%String* %13)
  %15 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @53, i32 0, i32 0))
  %16 = call %String* @__quantum__rt__string_concatenate(%String* %14, %String* %15)
  call void @__quantum__rt__string_unreference(%String* %14)
  call void @__quantum__rt__string_unreference(%String* %15)
  %17 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_unreference(%String* %16)
  call void @__quantum__rt__string_unreference(%String* %17)
  %19 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @54, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_unreference(%String* %18)
  call void @__quantum__rt__string_unreference(%String* %19)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__fail(%String* %20)
  unreachable

continue__1:                                      ; preds = %entry
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %22 = bitcast i8* %21 to double*
  %23 = load double, double* %22
  %24 = fmul double 5.000000e-01, %23
  %__qsVar5__angle__ = fmul double %24, %stepSize
  %__qsVar6__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 0)
  %26 = bitcast i8* %25 to %Array**
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 1)
  %28 = bitcast i8* %27 to %Array**
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to i2*
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 1)
  %33 = bitcast i8* %32 to i2*
  %34 = load i2, i2* @PauliX
  %35 = load i2, i2* @PauliY
  store i2 %34, i2* %31
  store i2 %35, i2* %33
  %36 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 0)
  %38 = bitcast i8* %37 to i2*
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 1)
  %40 = bitcast i8* %39 to i2*
  %41 = load i2, i2* @PauliY
  %42 = load i2, i2* @PauliX
  store i2 %41, i2* %38
  store i2 %42, i2* %40
  store %Array* %29, %Array** %26
  store %Array* %36, %Array** %28
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %43 = phi i64 [ 0, %continue__1 ], [ %48, %exiting__1 ]
  %44 = icmp sle i64 %43, 1
  br i1 %44, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %43)
  %46 = bitcast i8* %45 to %Array**
  %47 = load %Array*, %Array** %46
  call void @__quantum__rt__array_add_access(%Array* %47)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %48 = add i64 %43, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %__qsVar6__ops__)
  %__qsVar7__signs__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 0)
  %50 = bitcast i8* %49 to double*
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 1)
  %52 = bitcast i8* %51 to double*
  store double 1.000000e+00, double* %50
  store double -1.000000e+00, double* %52
  call void @__quantum__rt__array_add_access(%Array* %__qsVar7__signs__)
  %53 = call %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %54 = call %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %55 = call i64 @__quantum__rt__array_get_size_1d(%Array* %54)
  %56 = sub i64 %55, 1
  %57 = load %Range, %Range* @EmptyRange
  %58 = insertvalue %Range %57, i64 %56, 0
  %59 = insertvalue %Range %58, i64 -1, 1
  %60 = insertvalue %Range %59, i64 0, 2
  %61 = call %Array* @__quantum__rt__array_slice_1d(%Array* %53, %Range %60, i1 false)
  %62 = call i64 @__quantum__rt__array_get_size_1d(%Array* %61)
  %63 = sub i64 %62, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %64 = phi i64 [ 0, %exit__1 ], [ %72, %exiting__2 ]
  %65 = icmp sle i64 %64, %63
  br i1 %65, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 %64)
  %67 = bitcast i8* %66 to { %Array*, double }**
  %68 = load { %Array*, double }*, { %Array*, double }** %67
  %69 = getelementptr { %Array*, double }, { %Array*, double }* %68, i64 0, i32 0
  %__qsVar8__op__ = load %Array*, %Array** %69
  call void @__quantum__rt__array_add_access(%Array* %__qsVar8__op__)
  %70 = getelementptr { %Array*, double }, { %Array*, double }* %68, i64 0, i32 1
  %__qsVar9__sign__ = load double, double* %70
  %71 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar10__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %71, %Array* %__qsVar2__idxFermions__, %Array* %__qsVar8__op__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar10__pauliString__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar10__pauliString__)
  %theta__inline__1 = fmul double %__qsVar9__sign__, %__qsVar5__angle__
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__qis__exp__adj(%Array* %__qsVar10__pauliString__, double %theta__inline__1, %Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar10__pauliString__)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar8__op__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar10__pauliString__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar10__pauliString__)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %72 = add i64 %64, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %73 = phi i64 [ 0, %exit__2 ], [ %78, %exiting__3 ]
  %74 = icmp sle i64 %73, 1
  br i1 %74, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %73)
  %76 = bitcast i8* %75 to %Array**
  %77 = load %Array*, %Array** %76
  call void @__quantum__rt__array_remove_access(%Array* %77)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %78 = add i64 %73, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar6__ops__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar7__signs__)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %79 = phi i64 [ 0, %exit__3 ], [ %84, %exiting__4 ]
  %80 = icmp sle i64 %79, 1
  br i1 %80, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %79)
  %82 = bitcast i8* %81 to %Array**
  %83 = load %Array*, %Array** %82
  call void @__quantum__rt__array_unreference(%Array* %83)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %84 = add i64 %79, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %__qsVar6__ops__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar7__signs__)
  %85 = call i64 @__quantum__rt__array_get_size_1d(%Array* %53)
  %86 = sub i64 %85, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %87 = phi i64 [ 0, %exit__4 ], [ %95, %exiting__5 ]
  %88 = icmp sle i64 %87, %86
  br i1 %88, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %87)
  %90 = bitcast i8* %89 to { %Array*, double }**
  %91 = load { %Array*, double }*, { %Array*, double }** %90
  %92 = getelementptr { %Array*, double }, { %Array*, double }* %91, i64 0, i32 0
  %93 = load %Array*, %Array** %92
  call void @__quantum__rt__array_unreference(%Array* %93)
  %94 = bitcast { %Array*, double }* %91 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %94)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %95 = add i64 %87, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %53)
  %96 = sub i64 %55, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %97 = phi i64 [ 0, %exit__5 ], [ %105, %exiting__6 ]
  %98 = icmp sle i64 %97, %96
  br i1 %98, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %54, i64 %97)
  %100 = bitcast i8* %99 to { %Array*, double }**
  %101 = load { %Array*, double }*, { %Array*, double }** %100
  %102 = getelementptr { %Array*, double }, { %Array*, double }* %101, i64 0, i32 0
  %103 = load %Array*, %Array** %102
  call void @__quantum__rt__array_unreference(%Array* %103)
  %104 = bitcast { %Array*, double }* %101 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %104)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %105 = add i64 %97, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_unreference(%Array* %54)
  %106 = sub i64 %62, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %107 = phi i64 [ 0, %exit__6 ], [ %115, %exiting__7 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 %107)
  %110 = bitcast i8* %109 to { %Array*, double }**
  %111 = load { %Array*, double }*, { %Array*, double }** %110
  %112 = getelementptr { %Array*, double }, { %Array*, double }* %111, i64 0, i32 0
  %113 = load %Array*, %Array** %112
  call void @__quantum__rt__array_unreference(%Array* %113)
  %114 = bitcast { %Array*, double }* %111 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %114)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %115 = add i64 %107, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_unreference(%Array* %61)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %2 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %idxTermType = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %idxTermType)
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  %coeff = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %coeff)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %7
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %8)
  %9 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %9
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__array_add_access(%Array* %idxTermType)
  call void @__quantum__rt__array_add_access(%Array* %coeff)
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %p = load i64, i64* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %14 = bitcast i8* %13 to i64*
  %q = load i64, i64* %14
  %15 = icmp eq i64 %p, %q
  br i1 %15, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %16 = call %String* @__quantum__rt__string_create(i32 43, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @55, i32 0, i32 0))
  %17 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_unreference(%String* %16)
  call void @__quantum__rt__string_unreference(%String* %17)
  %19 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @56, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_unreference(%String* %18)
  call void @__quantum__rt__string_unreference(%String* %19)
  %21 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_unreference(%String* %20)
  call void @__quantum__rt__string_unreference(%String* %21)
  %23 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @57, i32 0, i32 0))
  %24 = call %String* @__quantum__rt__string_concatenate(%String* %22, %String* %23)
  call void @__quantum__rt__string_unreference(%String* %22)
  call void @__quantum__rt__string_unreference(%String* %23)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %8)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__fail(%String* %24)
  unreachable

continue__1:                                      ; preds = %entry
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %26 = bitcast i8* %25 to double*
  %27 = load double, double* %26
  %28 = fmul double 5.000000e-01, %27
  %angle = fmul double %28, %stepSize
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %30 = bitcast i8* %29 to %Array**
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %32 = bitcast i8* %31 to %Array**
  %33 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 0)
  %35 = bitcast i8* %34 to i2*
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 1)
  %37 = bitcast i8* %36 to i2*
  %38 = load i2, i2* @PauliX
  %39 = load i2, i2* @PauliY
  store i2 %38, i2* %35
  store i2 %39, i2* %37
  %40 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 0)
  %42 = bitcast i8* %41 to i2*
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 1)
  %44 = bitcast i8* %43 to i2*
  %45 = load i2, i2* @PauliY
  %46 = load i2, i2* @PauliX
  store i2 %45, i2* %42
  store i2 %46, i2* %44
  store %Array* %33, %Array** %30
  store %Array* %40, %Array** %32
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %47 = phi i64 [ 0, %continue__1 ], [ %52, %exiting__1 ]
  %48 = icmp sle i64 %47, 1
  br i1 %48, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %47)
  %50 = bitcast i8* %49 to %Array**
  %51 = load %Array*, %Array** %50
  call void @__quantum__rt__array_add_access(%Array* %51)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %52 = add i64 %47, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %ops)
  %signs = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 0)
  %54 = bitcast i8* %53 to double*
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 1)
  %56 = bitcast i8* %55 to double*
  store double 1.000000e+00, double* %54
  store double -1.000000e+00, double* %56
  call void @__quantum__rt__array_add_access(%Array* %signs)
  %57 = call %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %ops, %Array* %signs)
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %57)
  %59 = sub i64 %58, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %60 = phi i64 [ 0, %exit__1 ], [ %75, %exiting__2 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %60)
  %63 = bitcast i8* %62 to { %Array*, double }**
  %64 = load { %Array*, double }*, { %Array*, double }** %63
  %65 = getelementptr { %Array*, double }, { %Array*, double }* %64, i64 0, i32 0
  %op = load %Array*, %Array** %65
  call void @__quantum__rt__array_add_access(%Array* %op)
  %66 = getelementptr { %Array*, double }, { %Array*, double }* %64, i64 0, i32 1
  %sign = load double, double* %66
  %67 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %67, %Array* %idxFermions, %Array* %op)
  call void @__quantum__rt__array_add_access(%Array* %pauliString)
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_add_access(%Array* %pauliString)
  %theta__inline__1 = fmul double %sign, %angle
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %68 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %69 = bitcast %Tuple* %68 to { %Array*, double, %Array* }*
  %70 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %69, i64 0, i32 0
  %71 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %69, i64 0, i32 1
  %72 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %69, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %pauliString)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store %Array* %pauliString, %Array** %70
  store double %theta__inline__1, double* %71
  store %Array* %qubits, %Array** %72
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %69)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %pauliString)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  %73 = load %Array*, %Array** %70
  call void @__quantum__rt__array_unreference(%Array* %73)
  %74 = load %Array*, %Array** %72
  call void @__quantum__rt__array_unreference(%Array* %74)
  call void @__quantum__rt__tuple_unreference(%Tuple* %68)
  call void @__quantum__rt__array_remove_access(%Array* %op)
  call void @__quantum__rt__array_remove_access(%Array* %pauliString)
  call void @__quantum__rt__array_unreference(%Array* %pauliString)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %75 = add i64 %60, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %8)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %coeff)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %76 = phi i64 [ 0, %exit__2 ], [ %81, %exiting__3 ]
  %77 = icmp sle i64 %76, 1
  br i1 %77, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %76)
  %79 = bitcast i8* %78 to %Array**
  %80 = load %Array*, %Array** %79
  call void @__quantum__rt__array_remove_access(%Array* %80)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %81 = add i64 %76, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %ops)
  call void @__quantum__rt__array_remove_access(%Array* %signs)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %82 = phi i64 [ 0, %exit__3 ], [ %87, %exiting__4 ]
  %83 = icmp sle i64 %82, 1
  br i1 %83, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %82)
  %85 = bitcast i8* %84 to %Array**
  %86 = load %Array*, %Array** %85
  call void @__quantum__rt__array_unreference(%Array* %86)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %87 = add i64 %82, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %ops)
  call void @__quantum__rt__array_unreference(%Array* %signs)
  %88 = sub i64 %58, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %89 = phi i64 [ 0, %exit__4 ], [ %97, %exiting__5 ]
  %90 = icmp sle i64 %89, %88
  br i1 %90, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %89)
  %92 = bitcast i8* %91 to { %Array*, double }**
  %93 = load { %Array*, double }*, { %Array*, double }** %92
  %94 = getelementptr { %Array*, double }, { %Array*, double }* %93, i64 0, i32 0
  %95 = load %Array*, %Array** %94
  call void @__quantum__rt__array_unreference(%Array* %95)
  %96 = bitcast { %Array*, double }* %93 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %96)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %97 = add i64 %89, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %57)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %2 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__idxTermType__)
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__coeff__)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i64 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__idxFermions__)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %8)
  %9 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %9
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__idxFermions__)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__p__ = load i64, i64* %12
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %14 = bitcast i8* %13 to i64*
  %__qsVar4__q__ = load i64, i64* %14
  %15 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  br i1 %15, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %16 = call %String* @__quantum__rt__string_create(i32 43, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @58, i32 0, i32 0))
  %17 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_unreference(%String* %16)
  call void @__quantum__rt__string_unreference(%String* %17)
  %19 = call %String* @__quantum__rt__string_create(i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @59, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_unreference(%String* %18)
  call void @__quantum__rt__string_unreference(%String* %19)
  %21 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_unreference(%String* %20)
  call void @__quantum__rt__string_unreference(%String* %21)
  %23 = call %String* @__quantum__rt__string_create(i32 17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @60, i32 0, i32 0))
  %24 = call %String* @__quantum__rt__string_concatenate(%String* %22, %String* %23)
  call void @__quantum__rt__string_unreference(%String* %22)
  call void @__quantum__rt__string_unreference(%String* %23)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %8)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__fail(%String* %24)
  unreachable

continue__1:                                      ; preds = %entry
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %26 = bitcast i8* %25 to double*
  %27 = load double, double* %26
  %28 = fmul double 5.000000e-01, %27
  %__qsVar5__angle__ = fmul double %28, %stepSize
  %__qsVar6__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 0)
  %30 = bitcast i8* %29 to %Array**
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 1)
  %32 = bitcast i8* %31 to %Array**
  %33 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 0)
  %35 = bitcast i8* %34 to i2*
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 1)
  %37 = bitcast i8* %36 to i2*
  %38 = load i2, i2* @PauliX
  %39 = load i2, i2* @PauliY
  store i2 %38, i2* %35
  store i2 %39, i2* %37
  %40 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 0)
  %42 = bitcast i8* %41 to i2*
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 1)
  %44 = bitcast i8* %43 to i2*
  %45 = load i2, i2* @PauliY
  %46 = load i2, i2* @PauliX
  store i2 %45, i2* %42
  store i2 %46, i2* %44
  store %Array* %33, %Array** %30
  store %Array* %40, %Array** %32
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %47 = phi i64 [ 0, %continue__1 ], [ %52, %exiting__1 ]
  %48 = icmp sle i64 %47, 1
  br i1 %48, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %47)
  %50 = bitcast i8* %49 to %Array**
  %51 = load %Array*, %Array** %50
  call void @__quantum__rt__array_add_access(%Array* %51)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %52 = add i64 %47, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %__qsVar6__ops__)
  %__qsVar7__signs__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 0)
  %54 = bitcast i8* %53 to double*
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 1)
  %56 = bitcast i8* %55 to double*
  store double 1.000000e+00, double* %54
  store double -1.000000e+00, double* %56
  call void @__quantum__rt__array_add_access(%Array* %__qsVar7__signs__)
  %57 = call %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %58 = call %Array* @Microsoft__Quantum__Arrays___a4e223bb9e82404697313e90f45f09af_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %59 = call i64 @__quantum__rt__array_get_size_1d(%Array* %58)
  %60 = sub i64 %59, 1
  %61 = load %Range, %Range* @EmptyRange
  %62 = insertvalue %Range %61, i64 %60, 0
  %63 = insertvalue %Range %62, i64 -1, 1
  %64 = insertvalue %Range %63, i64 0, 2
  %65 = call %Array* @__quantum__rt__array_slice_1d(%Array* %57, %Range %64, i1 false)
  %66 = call i64 @__quantum__rt__array_get_size_1d(%Array* %65)
  %67 = sub i64 %66, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %68 = phi i64 [ 0, %exit__1 ], [ %83, %exiting__2 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %68)
  %71 = bitcast i8* %70 to { %Array*, double }**
  %72 = load { %Array*, double }*, { %Array*, double }** %71
  %73 = getelementptr { %Array*, double }, { %Array*, double }* %72, i64 0, i32 0
  %__qsVar8__op__ = load %Array*, %Array** %73
  call void @__quantum__rt__array_add_access(%Array* %__qsVar8__op__)
  %74 = getelementptr { %Array*, double }, { %Array*, double }* %72, i64 0, i32 1
  %__qsVar9__sign__ = load double, double* %74
  %75 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar10__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %75, %Array* %__qsVar2__idxFermions__, %Array* %__qsVar8__op__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar10__pauliString__)
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar10__pauliString__)
  %theta__inline__1 = fmul double %__qsVar9__sign__, %__qsVar5__angle__
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %77 = bitcast %Tuple* %76 to { %Array*, double, %Array* }*
  %78 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %77, i64 0, i32 0
  %79 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %77, i64 0, i32 1
  %80 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %77, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %__qsVar10__pauliString__)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store %Array* %__qsVar10__pauliString__, %Array** %78
  store double %theta__inline__1, double* %79
  store %Array* %qubits, %Array** %80
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %77)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar10__pauliString__)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  %81 = load %Array*, %Array** %78
  call void @__quantum__rt__array_unreference(%Array* %81)
  %82 = load %Array*, %Array** %80
  call void @__quantum__rt__array_unreference(%Array* %82)
  call void @__quantum__rt__tuple_unreference(%Tuple* %76)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar8__op__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar10__pauliString__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar10__pauliString__)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %83 = add i64 %68, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %8)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__coeff__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %84 = phi i64 [ 0, %exit__2 ], [ %89, %exiting__3 ]
  %85 = icmp sle i64 %84, 1
  br i1 %85, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %84)
  %87 = bitcast i8* %86 to %Array**
  %88 = load %Array*, %Array** %87
  call void @__quantum__rt__array_remove_access(%Array* %88)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %89 = add i64 %84, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar6__ops__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar7__signs__)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %90 = phi i64 [ 0, %exit__3 ], [ %95, %exiting__4 ]
  %91 = icmp sle i64 %90, 1
  br i1 %91, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %90)
  %93 = bitcast i8* %92 to %Array**
  %94 = load %Array*, %Array** %93
  call void @__quantum__rt__array_unreference(%Array* %94)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %95 = add i64 %90, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_unreference(%Array* %__qsVar6__ops__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar7__signs__)
  %96 = call i64 @__quantum__rt__array_get_size_1d(%Array* %57)
  %97 = sub i64 %96, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %98 = phi i64 [ 0, %exit__4 ], [ %106, %exiting__5 ]
  %99 = icmp sle i64 %98, %97
  br i1 %99, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %98)
  %101 = bitcast i8* %100 to { %Array*, double }**
  %102 = load { %Array*, double }*, { %Array*, double }** %101
  %103 = getelementptr { %Array*, double }, { %Array*, double }* %102, i64 0, i32 0
  %104 = load %Array*, %Array** %103
  call void @__quantum__rt__array_unreference(%Array* %104)
  %105 = bitcast { %Array*, double }* %102 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %105)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %106 = add i64 %98, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_unreference(%Array* %57)
  %107 = sub i64 %59, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %108 = phi i64 [ 0, %exit__5 ], [ %116, %exiting__6 ]
  %109 = icmp sle i64 %108, %107
  br i1 %109, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %58, i64 %108)
  %111 = bitcast i8* %110 to { %Array*, double }**
  %112 = load { %Array*, double }*, { %Array*, double }** %111
  %113 = getelementptr { %Array*, double }, { %Array*, double }* %112, i64 0, i32 0
  %114 = load %Array*, %Array** %113
  call void @__quantum__rt__array_unreference(%Array* %114)
  %115 = bitcast { %Array*, double }* %112 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %115)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %116 = add i64 %108, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_unreference(%Array* %58)
  %117 = sub i64 %66, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %118 = phi i64 [ 0, %exit__6 ], [ %126, %exiting__7 ]
  %119 = icmp sle i64 %118, %117
  br i1 %119, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %118)
  %121 = bitcast i8* %120 to { %Array*, double }**
  %122 = load { %Array*, double }*, { %Array*, double }** %121
  %123 = getelementptr { %Array*, double }, { %Array*, double }* %122, i64 0, i32 0
  %124 = load %Array*, %Array** %123
  call void @__quantum__rt__array_unreference(%Array* %124)
  %125 = bitcast { %Array*, double }* %122 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %125)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %126 = add i64 %118, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_unreference(%Array* %65)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %idxTermType = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %idxTermType)
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %idxDoubles = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %idxDoubles)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %4)
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__array_add_access(%Array* %idxTermType)
  call void @__quantum__rt__array_add_access(%Array* %idxDoubles)
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxTermType, i64 0)
  %8 = bitcast i8* %7 to i64*
  %termType = load i64, i64* %8
  %9 = icmp eq i64 %termType, 0
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = icmp eq i64 %termType, 2
  br i1 %10, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %idxDoubles)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %idxDoubles)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__idxTermType__)
  %3 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %1, i64 0, i32 1
  %__qsVar1__idxDoubles__ = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__idxDoubles__)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %4)
  %5 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__idxFermions__)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__idxDoubles__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__idxFermions__)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__idxTermType__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__termType__ = load i64, i64* %8
  %9 = icmp eq i64 %__qsVar3__termType__, 0
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = icmp eq i64 %__qsVar3__termType__, 2
  br i1 %10, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__idxDoubles__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__idxDoubles__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %2 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %idxTermType = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %idxTermType)
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  %idxDoubles = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %idxDoubles)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %7
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %8)
  %9 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %9
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__array_add_access(%Array* %idxTermType)
  call void @__quantum__rt__array_add_access(%Array* %idxDoubles)
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxTermType, i64 0)
  %12 = bitcast i8* %11 to i64*
  %termType = load i64, i64* %12
  %13 = icmp eq i64 %termType, 0
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %16 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %idxTermType)
  call void @__quantum__rt__array_reference(%Array* %idxDoubles)
  call void @__quantum__rt__tuple_reference(%Tuple* %6)
  call void @__quantum__rt__array_reference(%Array* %idxFermions)
  call void @__quantum__rt__tuple_reference(%Tuple* %8)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %16
  store double %stepSize, double* %17
  store %Array* %qubits, %Array** %18
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15)
  call void @__quantum__rt__array_unreference(%Array* %idxTermType)
  call void @__quantum__rt__array_unreference(%Array* %idxDoubles)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  call void @__quantum__rt__array_unreference(%Array* %idxFermions)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  call void @__quantum__rt__array_unreference(%Array* %qubits)
  call void @__quantum__rt__tuple_unreference(%Tuple* %14)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %19 = icmp eq i64 %termType, 2
  br i1 %19, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %22 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %idxTermType)
  call void @__quantum__rt__array_reference(%Array* %idxDoubles)
  call void @__quantum__rt__tuple_reference(%Tuple* %6)
  call void @__quantum__rt__array_reference(%Array* %idxFermions)
  call void @__quantum__rt__tuple_reference(%Tuple* %8)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %22
  store double %stepSize, double* %23
  store %Array* %qubits, %Array** %24
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21)
  call void @__quantum__rt__array_unreference(%Array* %idxTermType)
  call void @__quantum__rt__array_unreference(%Array* %idxDoubles)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  call void @__quantum__rt__array_unreference(%Array* %idxFermions)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  call void @__quantum__rt__array_unreference(%Array* %qubits)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %idxDoubles)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %8)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %idxTermType)
  call void @__quantum__rt__array_remove_access(%Array* %idxDoubles)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorImpl__ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %2 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2
  %4 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__idxTermType__)
  %5 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %3, i64 0, i32 1
  %__qsVar1__idxDoubles__ = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__idxDoubles__)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %6)
  %7 = getelementptr { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i64 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__idxFermions__)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %8)
  %9 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 1
  %stepSize = load double, double* %9
  %10 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar1__idxDoubles__)
  call void @__quantum__rt__array_add_access(%Array* %__qsVar2__idxFermions__)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__idxTermType__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__termType__ = load i64, i64* %12
  %13 = icmp eq i64 %__qsVar3__termType__, 0
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %16 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i64 0, i32 1
  %18 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_reference(%Array* %__qsVar1__idxDoubles__)
  call void @__quantum__rt__tuple_reference(%Tuple* %6)
  call void @__quantum__rt__array_reference(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_reference(%Tuple* %8)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %16
  store double %stepSize, double* %17
  store %Array* %qubits, %Array** %18
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQTerm__ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar1__idxDoubles__)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  call void @__quantum__rt__array_unreference(%Array* %qubits)
  call void @__quantum__rt__tuple_unreference(%Tuple* %14)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %19 = icmp eq i64 %__qsVar3__termType__, 2
  br i1 %19, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %22 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i64 0, i32 0
  %23 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i64 0, i32 1
  %24 = getelementptr { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_reference(%Array* %__qsVar1__idxDoubles__)
  call void @__quantum__rt__tuple_reference(%Tuple* %6)
  call void @__quantum__rt__array_reference(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_reference(%Tuple* %8)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %22
  store double %stepSize, double* %23
  store %Array* %qubits, %Array** %24
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerClusterOperatorPQRSTerm__ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar1__idxDoubles__)
  call void @__quantum__rt__tuple_unreference(%Tuple* %6)
  call void @__quantum__rt__array_unreference(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_unreference(%Tuple* %8)
  call void @__quantum__rt__array_unreference(%Array* %qubits)
  call void @__quantum__rt__tuple_unreference(%Tuple* %20)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__idxDoubles__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %6)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %8)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar0__idxTermType__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar1__idxDoubles__)
  call void @__quantum__rt__array_remove_access(%Array* %__qsVar2__idxFermions__)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %qubitIndices, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %qubitIndices)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___4c64b1e5ac95475e8869a381e41d7056_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  call void @Microsoft__Quantum__Canon___adbacdb710fc408f8e17aafda2be5602_ApplyToEachCA__body(%Callable* %0, %Array* %1)
  call void @__quantum__rt__array_remove_access(%Array* %qubitIndices)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__callable_unreference(%Callable* %0)
  call void @__quantum__rt__array_unreference(%Array* %1)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr { %Qubit* }, { %Qubit* }* %0, i64 0, i32 0
  %2 = load %Qubit*, %Qubit** %1
  call void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %2)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr { %Qubit* }, { %Qubit* }* %0, i64 0, i32 0
  %2 = load %Qubit*, %Qubit** %1
  call void @Microsoft__Quantum__Intrinsic__X__adj(%Qubit* %2)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  call void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Qubit*, %Qubit** %2
  call void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj(%Array* %qubitIndices, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %qubitIndices)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___4c64b1e5ac95475e8869a381e41d7056_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  call void @Microsoft__Quantum__Canon___adbacdb710fc408f8e17aafda2be5602_ApplyToEachCA__adj(%Callable* %0, %Array* %1)
  call void @__quantum__rt__array_remove_access(%Array* %qubitIndices)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__callable_unreference(%Callable* %0)
  call void @__quantum__rt__array_unreference(%Array* %1)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %qubitIndices = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %qubitIndices)
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %qubits = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %4 = bitcast %Tuple* %3 to { %Callable*, %Array* }*
  %5 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i64 0, i32 0
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i64 0, i32 1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X, %Tuple* null)
  %8 = call %Array* @Microsoft__Quantum__Arrays___4c64b1e5ac95475e8869a381e41d7056_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  store %Callable* %7, %Callable** %5
  store %Array* %8, %Array** %6
  call void @Microsoft__Quantum__Canon___adbacdb710fc408f8e17aafda2be5602_ApplyToEachCA__ctl(%Array* %__controlQubits__, { %Callable*, %Array* }* %4)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %qubitIndices)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__callable_unreference(%Callable* %7)
  call void @__quantum__rt__array_unreference(%Array* %8)
  call void @__quantum__rt__tuple_unreference(%Tuple* %3)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %qubitIndices = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %qubitIndices)
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %qubits = load %Array*, %Array** %2
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %4 = bitcast %Tuple* %3 to { %Callable*, %Array* }*
  %5 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i64 0, i32 0
  %6 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i64 0, i32 1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X, %Tuple* null)
  %8 = call %Array* @Microsoft__Quantum__Arrays___4c64b1e5ac95475e8869a381e41d7056_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  store %Callable* %7, %Callable** %5
  store %Array* %8, %Array** %6
  call void @Microsoft__Quantum__Canon___adbacdb710fc408f8e17aafda2be5602_ApplyToEachCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Array* }* %4)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %qubitIndices)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__callable_unreference(%Callable* %7)
  call void @__quantum__rt__array_unreference(%Array* %8)
  call void @__quantum__rt__tuple_unreference(%Tuple* %3)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareUnitaryCoupledClusterState__body(%Callable* %initialStatePreparation, %Array* %clusterOperator, double %trotterStepSize, %Array* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %clusterOperator)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %clusterOperator, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5
  %7 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 0
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %9)
  %10 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %11)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %12)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %clusterOperator)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %clusterOperatorGeneratorSystem = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorGeneratorSystem__body(%Array* %clusterOperator)
  %14 = bitcast { i64, %Callable* }* %clusterOperatorGeneratorSystem to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %14)
  %15 = call { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorEvolutionSet__body()
  %evolutionGenerator = call { { %Callable* }*, { i64, %Callable* }* }* @Microsoft__Quantum__Simulation__EvolutionGenerator__body({ %Callable* }* %15, { i64, %Callable* }* %clusterOperatorGeneratorSystem)
  %16 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 0
  %17 = load { %Callable* }*, { %Callable* }** %16
  %18 = bitcast { %Callable* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %18)
  %19 = getelementptr { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 0, i32 1
  %20 = load { i64, %Callable* }*, { i64, %Callable* }** %19
  %21 = bitcast { i64, %Callable* }* %20 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %21)
  %22 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %22)
  %23 = call { %Callable* }* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithm__body(double %trotterStepSize, i64 1)
  %24 = getelementptr { %Callable* }, { %Callable* }* %23, i64 0, i32 0
  %simulationAlgorithm = load %Callable*, %Callable** %24
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* getelementptr ({ %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %27 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %26, i64 0, i32 0
  %28 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %26, i64 0, i32 1
  %29 = getelementptr { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %26, i64 0, i32 2
  call void @__quantum__rt__callable_reference(%Callable* %simulationAlgorithm)
  %30 = getelementptr { %Callable* }, { %Callable* }* %17, i64 0, i32 0
  %31 = load %Callable*, %Callable** %30
  call void @__quantum__rt__callable_reference(%Callable* %31)
  call void @__quantum__rt__tuple_reference(%Tuple* %18)
  %32 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %20, i64 0, i32 1
  %33 = load %Callable*, %Callable** %32
  call void @__quantum__rt__callable_reference(%Callable* %33)
  call void @__quantum__rt__tuple_reference(%Tuple* %21)
  call void @__quantum__rt__tuple_reference(%Tuple* %22)
  store %Callable* %simulationAlgorithm, %Callable** %27
  store double 1.000000e+00, double* %28
  store { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, { { %Callable* }*, { i64, %Callable* }* }** %29
  %oracle = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.36, %Tuple* %25)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { %Array* }*
  %36 = getelementptr { %Array* }, { %Array* }* %35, i64 0, i32 0
  store %Array* %qubits, %Array** %36
  call void @__quantum__rt__array_reference(%Array* %qubits)
  call void @__quantum__rt__callable_invoke(%Callable* %initialStatePreparation, %Tuple* %34, %Tuple* null)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %38 = bitcast %Tuple* %37 to { %Array* }*
  %39 = getelementptr { %Array* }, { %Array* }* %38, i64 0, i32 0
  store %Array* %qubits, %Array** %39
  call void @__quantum__rt__array_reference(%Array* %qubits)
  call void @__quantum__rt__callable_invoke(%Callable* %oracle, %Tuple* %37, %Tuple* null)
  %40 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %41 = phi i64 [ 0, %exit__1 ], [ %52, %exiting__2 ]
  %42 = icmp sle i64 %41, %40
  br i1 %42, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %clusterOperator, i64 %41)
  %44 = bitcast i8* %43 to { { double, double }*, %Array* }**
  %45 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %44
  %46 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %45, i64 0, i32 0
  %47 = load { double, double }*, { double, double }** %46
  %48 = bitcast { double, double }* %47 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %48)
  %49 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %45, i64 0, i32 1
  %50 = load %Array*, %Array** %49
  call void @__quantum__rt__array_remove_access(%Array* %50)
  %51 = bitcast { { double, double }*, %Array* }* %45 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %51)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %52 = add i64 %41, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %clusterOperator)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %14)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %18)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %21)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %22)
  %53 = getelementptr { i64, %Callable* }, { i64, %Callable* }* %clusterOperatorGeneratorSystem, i64 0, i32 1
  %54 = load %Callable*, %Callable** %53
  call void @__quantum__rt__callable_unreference(%Callable* %54)
  call void @__quantum__rt__tuple_unreference(%Tuple* %14)
  %55 = getelementptr { %Callable* }, { %Callable* }* %15, i64 0, i32 0
  %56 = load %Callable*, %Callable** %55
  call void @__quantum__rt__callable_unreference(%Callable* %56)
  %57 = bitcast { %Callable* }* %15 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %57)
  call void @__quantum__rt__callable_unreference(%Callable* %31)
  call void @__quantum__rt__tuple_unreference(%Tuple* %18)
  call void @__quantum__rt__callable_unreference(%Callable* %33)
  call void @__quantum__rt__tuple_unreference(%Tuple* %21)
  call void @__quantum__rt__tuple_unreference(%Tuple* %22)
  call void @__quantum__rt__callable_unreference(%Callable* %simulationAlgorithm)
  %58 = bitcast { %Callable* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %58)
  call void @__quantum__rt__callable_unreference(%Callable* %oracle)
  call void @__quantum__rt__array_unreference(%Array* %qubits)
  call void @__quantum__rt__tuple_unreference(%Tuple* %34)
  call void @__quantum__rt__array_unreference(%Array* %qubits)
  call void @__quantum__rt__tuple_unreference(%Tuple* %37)
  ret void
}

define { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorGeneratorSystem__body(%Array* %data) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %data)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5
  %7 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 0
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %9)
  %10 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %11)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %12)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %data)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %15 = bitcast %Tuple* %14 to { %Callable*, %Array* }*
  %16 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %15, i64 0, i32 0
  %17 = getelementptr { %Callable*, %Array* }, { %Callable*, %Array* }* %15, i64 0, i32 1
  %18 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorSystemImpl, %Tuple* null)
  %19 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %31, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %20)
  %23 = bitcast i8* %22 to { { double, double }*, %Array* }**
  %24 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %23
  %25 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %24, i64 0, i32 0
  %26 = load { double, double }*, { double, double }** %25
  %27 = bitcast { double, double }* %26 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %27)
  %28 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %24, i64 0, i32 1
  %29 = load %Array*, %Array** %28
  call void @__quantum__rt__array_reference(%Array* %29)
  %30 = bitcast { { double, double }*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %30)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_reference(%Array* %data)
  store %Callable* %18, %Callable** %16
  store %Array* %data, %Array** %17
  %32 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.38, %Tuple* %14)
  %33 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %0, %Callable* %32)
  %34 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %46, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %35)
  %38 = bitcast i8* %37 to { { double, double }*, %Array* }**
  %39 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %38
  %40 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %39, i64 0, i32 0
  %41 = load { double, double }*, { double, double }** %40
  %42 = bitcast { double, double }* %41 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %42)
  %43 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %39, i64 0, i32 1
  %44 = load %Array*, %Array** %43
  call void @__quantum__rt__array_remove_access(%Array* %44)
  %45 = bitcast { { double, double }*, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %45)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %46 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %data)
  call void @__quantum__rt__callable_unreference(%Callable* %32)
  ret { i64, %Callable* }* %33
}

define { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorEvolutionSet__body() {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr { %Callable* }, { %Callable* }* %1, i64 0, i32 0
  %3 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorFunction, %Tuple* null)
  store %Callable* %3, %Callable** %2
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1.37, %Tuple* %0)
  %5 = call { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionSet__body(%Callable* %4)
  call void @__quantum__rt__callable_unreference(%Callable* %4)
  ret { %Callable* }* %5
}

define { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorIndex__body({ { double, double }*, %Array* }* %data) {
entry:
  %0 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %data, i64 0, i32 0
  %1 = load { double, double }*, { double, double }** %0
  %2 = bitcast { double, double }* %1 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %2)
  %3 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %data, i64 0, i32 1
  %idxFermions = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %4 = bitcast { { double, double }*, %Array* }* %data to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %4)
  %5 = getelementptr { double, double }, { double, double }* %1, i64 0, i32 0
  %real = load double, double* %5
  %6 = getelementptr { double, double }, { double, double }* %1, i64 0, i32 1
  %imaginary = load double, double* %6
  call void @__quantum__rt__array_add_access(%Array* %idxFermions)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %8 = icmp eq i64 %7, 2
  br i1 %8, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %10 = bitcast %Tuple* %9 to { %Array*, %Array* }*
  %11 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %10, i64 0, i32 0
  %12 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %10, i64 0, i32 1
  %13 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 0)
  %15 = bitcast i8* %14 to i64*
  store i64 0, i64* %15
  %16 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 0)
  %18 = bitcast i8* %17 to double*
  store double %real, double* %18
  store %Array* %13, %Array** %11
  store %Array* %16, %Array** %12
  %19 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %10, %Array* %idxFermions)
  call void @__quantum__rt__array_unreference(%Array* %13)
  call void @__quantum__rt__array_unreference(%Array* %16)
  call void @__quantum__rt__tuple_unreference(%Tuple* %9)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  ret { { %Array*, %Array* }*, %Array* }* %19

test1__1:                                         ; preds = %entry
  %20 = icmp eq i64 %7, 4
  br i1 %20, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %22 = bitcast %Tuple* %21 to { %Array*, %Array* }*
  %23 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %22, i64 0, i32 0
  %24 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %22, i64 0, i32 1
  %25 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 0)
  %27 = bitcast i8* %26 to i64*
  store i64 2, i64* %27
  %28 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 0)
  %30 = bitcast i8* %29 to double*
  store double %real, double* %30
  store %Array* %25, %Array** %23
  store %Array* %28, %Array** %24
  %31 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %22, %Array* %idxFermions)
  call void @__quantum__rt__array_unreference(%Array* %25)
  call void @__quantum__rt__array_unreference(%Array* %28)
  call void @__quantum__rt__tuple_unreference(%Tuple* %21)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  ret { { %Array*, %Array* }*, %Array* }* %31

else__1:                                          ; preds = %test1__1
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %33 = bitcast %Tuple* %32 to { %Array*, %Array* }*
  %34 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %33, i64 0, i32 0
  %35 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %33, i64 0, i32 1
  %36 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 0)
  %38 = bitcast i8* %37 to i64*
  store i64 -1, i64* %38
  %39 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 0)
  %41 = bitcast i8* %40 to double*
  store double 0.000000e+00, double* %41
  store %Array* %36, %Array** %34
  store %Array* %39, %Array** %35
  %42 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 0)
  %44 = bitcast i8* %43 to i64*
  store i64 0, i64* %44
  %45 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %33, %Array* %42)
  call void @__quantum__rt__array_unreference(%Array* %36)
  call void @__quantum__rt__array_unreference(%Array* %39)
  call void @__quantum__rt__tuple_unreference(%Tuple* %32)
  call void @__quantum__rt__array_unreference(%Array* %42)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %2)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %4)
  call void @__quantum__rt__array_remove_access(%Array* %idxFermions)
  ret { { %Array*, %Array* }*, %Array* }* %45
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorFunction__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %0, i64 0, i32 0
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1
  %3 = call { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorFunction__body({ { %Array*, %Array* }*, %Array* }* %2)
  %4 = bitcast %Tuple* %result-tuple to { { %Callable* }* }*
  %5 = getelementptr { { %Callable* }* }, { { %Callable* }* }* %4, i64 0, i32 0
  store { %Callable* }* %3, { %Callable* }** %5
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSparseMultiConfigurationalState__body(%Callable* %initialStatePreparation, %Array* %excitations, %Array* %qubits) {
entry:
  %nExcitations = call i64 @__quantum__rt__array_get_size_1d(%Array* %excitations)
  %0 = sub i64 %nExcitations, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %excitations, i64 %1)
  %4 = bitcast i8* %3 to { { double, double }*, %Array* }**
  %5 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %4
  %6 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %5, i64 0, i32 0
  %7 = load { double, double }*, { double, double }** %6
  %8 = bitcast { double, double }* %7 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %8)
  %9 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %5, i64 0, i32 1
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_add_access(%Array* %10)
  %11 = bitcast { { double, double }*, %Array* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %11)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %excitations)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %13 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nExcitations)
  %coefficientsSqrtAbs = alloca %Array*
  store %Array* %13, %Array** %coefficientsSqrtAbs
  call void @__quantum__rt__array_add_access(%Array* %13)
  %14 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nExcitations)
  %coefficientsNewComplexPolar = alloca %Array*
  store %Array* %14, %Array** %coefficientsNewComplexPolar
  %15 = sub i64 %nExcitations, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %16)
  %19 = bitcast i8* %18 to { double, double }**
  %20 = load { double, double }*, { double, double }** %19
  %21 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %21)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %14)
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nExcitations)
  %applyFlips = alloca %Array*
  store %Array* %23, %Array** %applyFlips
  %24 = sub i64 %nExcitations, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %25 = phi i64 [ 0, %exit__2 ], [ %30, %exiting__3 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %25)
  %28 = bitcast i8* %27 to %Array**
  %29 = load %Array*, %Array** %28
  call void @__quantum__rt__array_add_access(%Array* %29)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %30 = add i64 %25, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_add_access(%Array* %23)
  %31 = sub i64 %nExcitations, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %idx = phi i64 [ 0, %exit__3 ], [ %60, %exiting__4 ]
  %32 = icmp sge i64 %idx, %31
  %33 = icmp sle i64 %idx, %31
  %34 = select i1 true, i1 %33, i1 %32
  br i1 %34, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %excitations, i64 %idx)
  %36 = bitcast i8* %35 to { { double, double }*, %Array* }**
  %37 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %36
  %38 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %37, i64 0, i32 0
  %x = load { double, double }*, { double, double }** %38
  %39 = bitcast { double, double }* %x to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %39)
  %40 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %37, i64 0, i32 1
  %excitation = load %Array*, %Array** %40
  call void @__quantum__rt__array_add_access(%Array* %excitation)
  %41 = load %Array*, %Array** %coefficientsSqrtAbs
  %42 = call %Array* @__quantum__rt__array_copy(%Array* %41, i1 false)
  %43 = getelementptr { double, double }, { double, double }* %x, i64 0, i32 0
  %44 = getelementptr { double, double }, { double, double }* %x, i64 0, i32 1
  %45 = load double, double* %43
  %46 = load double, double* %44
  %47 = call { double, double }* @Microsoft__Quantum__Math__Complex__body(double %45, double %46)
  %48 = call { double, double }* @Microsoft__Quantum__Math__ComplexAsComplexPolar__body({ double, double }* %47)
  %d__inline__1 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %48)
  %49 = call double @__quantum__qis__sqrt__body(double %d__inline__1)
  %50 = bitcast { double, double }* %47 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %50)
  %51 = bitcast { double, double }* %48 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %51)
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 %idx)
  %53 = bitcast i8* %52 to double*
  %54 = load double, double* %53
  store double %49, double* %53
  %55 = load %Array*, %Array** %coefficientsSqrtAbs
  call void @__quantum__rt__array_remove_access(%Array* %55)
  store %Array* %42, %Array** %coefficientsSqrtAbs
  call void @__quantum__rt__array_add_access(%Array* %42)
  %56 = load %Array*, %Array** %coefficientsNewComplexPolar
  %57 = call %Array* @__quantum__rt__array_copy(%Array* %56, i1 false)
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %57)
  %59 = sub i64 %58, 1
  br label %header__5

exiting__4:                                       ; preds = %exit__12
  %60 = add i64 %idx, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %61 = call double @__quantum__qis__intasdouble__body(i64 %nExcitations)
  %value__inline__2 = call double @Microsoft__Quantum__Math__Lg__body(double %61)
  %nBitsIndices = call i64 @__quantum__qis__ceiling__body(double %value__inline__2)
  br label %repeat__1

header__5:                                        ; preds = %exiting__5, %body__4
  %62 = phi i64 [ 0, %body__4 ], [ %68, %exiting__5 ]
  %63 = icmp sle i64 %62, %59
  br i1 %63, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %62)
  %65 = bitcast i8* %64 to { double, double }**
  %66 = load { double, double }*, { double, double }** %65
  %67 = bitcast { double, double }* %66 to %Tuple*
  call void @__quantum__rt__tuple_reference(%Tuple* %67)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %68 = add i64 %62, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %69 = load %Array*, %Array** %coefficientsSqrtAbs
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 %idx)
  %71 = bitcast i8* %70 to double*
  %72 = load double, double* %71
  %73 = load double, double* %43
  %74 = load double, double* %44
  %75 = call { double, double }* @Microsoft__Quantum__Math__Complex__body(double %73, double %74)
  %76 = call { double, double }* @Microsoft__Quantum__Math__ComplexAsComplexPolar__body({ double, double }* %75)
  %77 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %76)
  %78 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %72, double %77)
  %79 = bitcast { double, double }* %75 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %79)
  %80 = bitcast { double, double }* %76 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %80)
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %idx)
  %82 = bitcast i8* %81 to { double, double }**
  %83 = load { double, double }*, { double, double }** %82
  %84 = bitcast { double, double }* %83 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %84)
  store { double, double }* %78, { double, double }** %82
  %85 = load %Array*, %Array** %coefficientsNewComplexPolar
  %86 = call i64 @__quantum__rt__array_get_size_1d(%Array* %85)
  %87 = sub i64 %86, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %88 = phi i64 [ 0, %exit__5 ], [ %94, %exiting__6 ]
  %89 = icmp sle i64 %88, %87
  br i1 %89, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %85, i64 %88)
  %91 = bitcast i8* %90 to { double, double }**
  %92 = load { double, double }*, { double, double }** %91
  %93 = bitcast { double, double }* %92 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %93)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %94 = add i64 %88, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_remove_access(%Array* %85)
  store %Array* %57, %Array** %coefficientsNewComplexPolar
  %95 = sub i64 %58, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %96 = phi i64 [ 0, %exit__6 ], [ %102, %exiting__7 ]
  %97 = icmp sle i64 %96, %95
  br i1 %97, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %98 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %96)
  %99 = bitcast i8* %98 to { double, double }**
  %100 = load { double, double }*, { double, double }** %99
  %101 = bitcast { double, double }* %100 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %101)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %102 = add i64 %96, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_add_access(%Array* %57)
  %103 = load %Array*, %Array** %applyFlips
  %104 = call %Array* @__quantum__rt__array_copy(%Array* %103, i1 false)
  %105 = call i64 @__quantum__rt__array_get_size_1d(%Array* %104)
  %106 = sub i64 %105, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %107 = phi i64 [ 0, %exit__7 ], [ %112, %exiting__8 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 %107)
  %110 = bitcast i8* %109 to %Array**
  %111 = load %Array*, %Array** %110
  call void @__quantum__rt__array_reference(%Array* %111)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %112 = add i64 %107, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_reference(%Array* %excitation)
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 %idx)
  %114 = bitcast i8* %113 to %Array**
  %115 = load %Array*, %Array** %114
  call void @__quantum__rt__array_unreference(%Array* %115)
  store %Array* %excitation, %Array** %114
  %116 = load %Array*, %Array** %applyFlips
  %117 = call i64 @__quantum__rt__array_get_size_1d(%Array* %116)
  %118 = sub i64 %117, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %119 = phi i64 [ 0, %exit__8 ], [ %124, %exiting__9 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %116, i64 %119)
  %122 = bitcast i8* %121 to %Array**
  %123 = load %Array*, %Array** %122
  call void @__quantum__rt__array_remove_access(%Array* %123)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %124 = add i64 %119, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_remove_access(%Array* %116)
  store %Array* %104, %Array** %applyFlips
  %125 = sub i64 %105, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %126 = phi i64 [ 0, %exit__9 ], [ %131, %exiting__10 ]
  %127 = icmp sle i64 %126, %125
  br i1 %127, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %128 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 %126)
  %129 = bitcast i8* %128 to %Array**
  %130 = load %Array*, %Array** %129
  call void @__quantum__rt__array_add_access(%Array* %130)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %131 = add i64 %126, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_add_access(%Array* %104)
  call void @__quantum__rt__tuple_remove_access(%Tuple* %39)
  call void @__quantum__rt__array_remove_access(%Array* %excitation)
  call void @__quantum__rt__array_unreference(%Array* %42)
  %132 = sub i64 %58, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %133 = phi i64 [ 0, %exit__10 ], [ %139, %exiting__11 ]
  %134 = icmp sle i64 %133, %132
  br i1 %134, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %133)
  %136 = bitcast i8* %135 to { double, double }**
  %137 = load { double, double }*, { double, double }** %136
  %138 = bitcast { double, double }* %137 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %138)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %139 = add i64 %133, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_unreference(%Array* %57)
  %140 = sub i64 %105, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %141 = phi i64 [ 0, %exit__11 ], [ %146, %exiting__12 ]
  %142 = icmp sle i64 %141, %140
  br i1 %142, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %143 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 %141)
  %144 = bitcast i8* %143 to %Array**
  %145 = load %Array*, %Array** %144
  call void @__quantum__rt__array_unreference(%Array* %145)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %146 = add i64 %141, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_unreference(%Array* %104)
  br label %exiting__4

repeat__1:                                        ; preds = %fixup__1, %exit__4
  %success = alloca i1
  store i1 false, i1* %success
  %147 = add i64 %nBitsIndices, 1
  %auxillary = call %Array* @__quantum__rt__qubit_allocate_array(i64 %147)
  call void @__quantum__rt__array_add_access(%Array* %auxillary)
  %flag = call %Array* @__quantum__rt__qubit_allocate_array(i64 1)
  call void @__quantum__rt__array_add_access(%Array* %flag)
  %148 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner___PrepareSingleConfigurationalStateSingleSiteOccupation, %Tuple* null)
  %149 = load %Array*, %Array** %applyFlips
  %150 = call %Array* @Microsoft__Quantum__Arrays___4063d2935eab4622841632c408d7f9cf_Mapped__body(%Callable* %148, %Array* %149)
  %151 = call %Callable* @Microsoft__Quantum__Arrays___7a34755bdf704d7bbf3847f0b3d9aba1_LookupFunction__body(%Array* %150)
  %multiplexer = call %Callable* @Microsoft__Quantum__Canon__MultiplexerBruteForceFromGenerator__body(i64 %nExcitations, %Callable* %151)
  %152 = load %Array*, %Array** %coefficientsNewComplexPolar
  %153 = call %Callable* @Microsoft__Quantum__Preparation__StatePreparationComplexCoefficients__body(%Array* %152)
  %154 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxillary)
  %155 = bitcast { %Array* }* %154 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %153, %Tuple* %155, %Tuple* null)
  %156 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %157 = bitcast %Tuple* %156 to { { %Array* }*, %Array* }*
  %158 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %157, i64 0, i32 0
  %159 = getelementptr { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %157, i64 0, i32 1
  %160 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxillary)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store { %Array* }* %160, { %Array* }** %158
  store %Array* %qubits, %Array** %159
  call void @__quantum__rt__callable_invoke(%Callable* %multiplexer, %Tuple* %156, %Tuple* null)
  %161 = load %Array*, %Array** %coefficientsSqrtAbs
  %162 = call %Callable* @Microsoft__Quantum__Preparation__StatePreparationPositiveCoefficients__body(%Array* %161)
  %163 = call %Callable* @__quantum__rt__callable_copy(%Callable* %162, i1 true)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %163)
  %164 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxillary)
  %165 = bitcast { %Array* }* %164 to %Tuple*
  call void @__quantum__rt__callable_invoke(%Callable* %163, %Tuple* %165, %Tuple* null)
  %166 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X, %Tuple* null)
  %167 = call %Callable* @Microsoft__Quantum__Canon___c4b8d488ccbc4155b9b01e21f87d5903_ControlledOnInt__body(i64 0, %Callable* %166)
  %168 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %169 = bitcast %Tuple* %168 to { %Array*, %Qubit* }*
  %170 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %169, i64 0, i32 0
  %171 = getelementptr { %Array*, %Qubit* }, { %Array*, %Qubit* }* %169, i64 0, i32 1
  call void @__quantum__rt__array_reference(%Array* %auxillary)
  %172 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %flag, i64 0)
  %173 = bitcast i8* %172 to %Qubit**
  %174 = load %Qubit*, %Qubit** %173
  store %Array* %auxillary, %Array** %170
  store %Qubit* %174, %Qubit** %171
  call void @__quantum__rt__callable_invoke(%Callable* %167, %Tuple* %168, %Tuple* null)
  %bases__inline__4 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %175 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bases__inline__4, i64 0)
  %176 = bitcast i8* %175 to i2*
  %177 = load i2, i2* @PauliZ
  store i2 %177, i2* %176
  call void @__quantum__rt__array_add_access(%Array* %bases__inline__4)
  call void @__quantum__rt__array_add_access(%Array* %flag)
  %outcome = call %Result* @__quantum__qis__measure__body(%Array* %bases__inline__4, %Array* %flag)
  call void @__quantum__rt__array_remove_access(%Array* %bases__inline__4)
  call void @__quantum__rt__array_remove_access(%Array* %flag)
  call void @__quantum__rt__array_unreference(%Array* %bases__inline__4)
  %178 = load %Result*, %Result** @ResultOne
  %179 = call i1 @__quantum__rt__result_equal(%Result* %outcome, %Result* %178)
  store i1 %179, i1* %success
  call void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %auxillary)
  call void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %flag)
  call void @__quantum__rt__qubit_release_array(%Array* %flag)
  call void @__quantum__rt__array_remove_access(%Array* %flag)
  call void @__quantum__rt__array_unreference(%Array* %flag)
  call void @__quantum__rt__callable_unreference(%Callable* %148)
  %180 = call i64 @__quantum__rt__array_get_size_1d(%Array* %150)
  %181 = sub i64 %180, 1
  br label %header__13

until__1:                                         ; preds = %exit__13
  %182 = load i1, i1* %success
  br i1 %182, label %rend__1, label %fixup__1

fixup__1:                                         ; preds = %until__1
  call void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %qubits)
  br label %repeat__1

rend__1:                                          ; preds = %until__1
  %183 = sub i64 %nExcitations, 1
  br label %header__14

header__13:                                       ; preds = %exiting__13, %repeat__1
  %184 = phi i64 [ 0, %repeat__1 ], [ %189, %exiting__13 ]
  %185 = icmp sle i64 %184, %181
  br i1 %185, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %186 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %150, i64 %184)
  %187 = bitcast i8* %186 to %Callable**
  %188 = load %Callable*, %Callable** %187
  call void @__quantum__rt__callable_unreference(%Callable* %188)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %189 = add i64 %184, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_unreference(%Array* %150)
  call void @__quantum__rt__callable_unreference(%Callable* %151)
  call void @__quantum__rt__callable_unreference(%Callable* %multiplexer)
  call void @__quantum__rt__callable_unreference(%Callable* %153)
  %190 = getelementptr { %Array* }, { %Array* }* %154, i64 0, i32 0
  %191 = load %Array*, %Array** %190
  call void @__quantum__rt__array_unreference(%Array* %191)
  call void @__quantum__rt__tuple_unreference(%Tuple* %155)
  %192 = load { %Array* }*, { %Array* }** %158
  %193 = getelementptr { %Array* }, { %Array* }* %192, i64 0, i32 0
  %194 = load %Array*, %Array** %193
  call void @__quantum__rt__array_unreference(%Array* %194)
  %195 = bitcast { %Array* }* %192 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %195)
  %196 = load %Array*, %Array** %159
  call void @__quantum__rt__array_unreference(%Array* %196)
  call void @__quantum__rt__tuple_unreference(%Tuple* %156)
  call void @__quantum__rt__callable_unreference(%Callable* %162)
  call void @__quantum__rt__callable_unreference(%Callable* %163)
  %197 = getelementptr { %Array* }, { %Array* }* %164, i64 0, i32 0
  %198 = load %Array*, %Array** %197
  call void @__quantum__rt__array_unreference(%Array* %198)
  call void @__quantum__rt__tuple_unreference(%Tuple* %165)
  call void @__quantum__rt__callable_unreference(%Callable* %166)
  call void @__quantum__rt__callable_unreference(%Callable* %167)
  %199 = load %Array*, %Array** %170
  call void @__quantum__rt__array_unreference(%Array* %199)
  call void @__quantum__rt__tuple_unreference(%Tuple* %168)
  call void @__quantum__rt__result_unreference(%Result* %outcome)
  call void @__quantum__rt__qubit_release_array(%Array* %auxillary)
  call void @__quantum__rt__array_remove_access(%Array* %auxillary)
  call void @__quantum__rt__array_unreference(%Array* %auxillary)
  br label %until__1

header__14:                                       ; preds = %exiting__14, %rend__1
  %200 = phi i64 [ 0, %rend__1 ], [ %211, %exiting__14 ]
  %201 = icmp sle i64 %200, %183
  br i1 %201, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %202 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %excitations, i64 %200)
  %203 = bitcast i8* %202 to { { double, double }*, %Array* }**
  %204 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %203
  %205 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %204, i64 0, i32 0
  %206 = load { double, double }*, { double, double }** %205
  %207 = bitcast { double, double }* %206 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %207)
  %208 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %204, i64 0, i32 1
  %209 = load %Array*, %Array** %208
  call void @__quantum__rt__array_remove_access(%Array* %209)
  %210 = bitcast { { double, double }*, %Array* }* %204 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %210)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %211 = add i64 %200, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_remove_access(%Array* %excitations)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  %212 = load %Array*, %Array** %coefficientsSqrtAbs
  call void @__quantum__rt__array_remove_access(%Array* %212)
  %213 = load %Array*, %Array** %coefficientsNewComplexPolar
  %214 = call i64 @__quantum__rt__array_get_size_1d(%Array* %213)
  %215 = sub i64 %214, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %216 = phi i64 [ 0, %exit__14 ], [ %222, %exiting__15 ]
  %217 = icmp sle i64 %216, %215
  br i1 %217, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %218 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %213, i64 %216)
  %219 = bitcast i8* %218 to { double, double }**
  %220 = load { double, double }*, { double, double }** %219
  %221 = bitcast { double, double }* %220 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %221)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %222 = add i64 %216, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_remove_access(%Array* %213)
  %223 = load %Array*, %Array** %applyFlips
  %224 = call i64 @__quantum__rt__array_get_size_1d(%Array* %223)
  %225 = sub i64 %224, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %226 = phi i64 [ 0, %exit__15 ], [ %231, %exiting__16 ]
  %227 = icmp sle i64 %226, %225
  br i1 %227, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %228 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %223, i64 %226)
  %229 = bitcast i8* %228 to %Array**
  %230 = load %Array*, %Array** %229
  call void @__quantum__rt__array_remove_access(%Array* %230)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %231 = add i64 %226, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_remove_access(%Array* %223)
  call void @__quantum__rt__array_unreference(%Array* %13)
  %232 = sub i64 %nExcitations, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %233 = phi i64 [ 0, %exit__16 ], [ %239, %exiting__17 ]
  %234 = icmp sle i64 %233, %232
  br i1 %234, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %235 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %233)
  %236 = bitcast i8* %235 to { double, double }**
  %237 = load { double, double }*, { double, double }** %236
  %238 = bitcast { double, double }* %237 to %Tuple*
  call void @__quantum__rt__tuple_unreference(%Tuple* %238)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %239 = add i64 %233, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_unreference(%Array* %14)
  %240 = sub i64 %nExcitations, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %241 = phi i64 [ 0, %exit__17 ], [ %246, %exiting__18 ]
  %242 = icmp sle i64 %241, %240
  br i1 %242, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %243 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %241)
  %244 = bitcast i8* %243 to %Array**
  %245 = load %Array*, %Array** %244
  call void @__quantum__rt__array_unreference(%Array* %245)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %246 = add i64 %241, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_unreference(%Array* %23)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___PrepareSingleConfigurationalStateSingleSiteOccupation__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr { %Array* }, { %Array* }* %0, i64 0, i32 0
  %2 = load %Array*, %Array** %1
  %3 = call %Callable* @Microsoft__Quantum__Chemistry__JordanWigner___PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %2)
  %4 = bitcast %Tuple* %result-tuple to { %Callable* }*
  %5 = getelementptr { %Callable* }, { %Callable* }* %4, i64 0, i32 0
  store %Callable* %3, %Callable** %5
  ret void
}

declare %Result* @__quantum__qis__measure__body(%Array*, %Array*)

define void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %2)
  %5 = bitcast i8* %4 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %5
  call void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %qubit)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorSystemImpl__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, i64 }*
  %1 = getelementptr { %Array*, i64 }, { %Array*, i64 }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, i64 }, { %Array*, i64 }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load i64, i64* %2
  %5 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorSystemImpl__body(%Array* %3, i64 %4)
  %6 = bitcast %Tuple* %result-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %7 = getelementptr { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %6, i64 0, i32 0
  store { { %Array*, %Array* }*, %Array* }* %5, { { %Array*, %Array* }*, %Array* }** %7
  ret void
}

define { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorSystemImpl__body(%Array* %data, i64 %idx) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %data)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5
  %7 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 0
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %9)
  %10 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %11)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %12)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %data)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %idx)
  %15 = bitcast i8* %14 to { { double, double }*, %Array* }**
  %16 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %15
  %17 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorGeneratorIndex__body({ { double, double }*, %Array* }* %16)
  %18 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %19)
  %22 = bitcast i8* %21 to { { double, double }*, %Array* }**
  %23 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %22
  %24 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %23, i64 0, i32 0
  %25 = load { double, double }*, { double, double }** %24
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %26)
  %27 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %23, i64 0, i32 1
  %28 = load %Array*, %Array** %27
  call void @__quantum__rt__array_remove_access(%Array* %28)
  %29 = bitcast { { double, double }*, %Array* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %29)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %data)
  ret { { %Array*, %Array* }*, %Array* }* %17
}

define void @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr { %Array* }, { %Array* }* %0, i64 0, i32 0
  %2 = load %Array*, %Array** %1
  call void @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__body(%Array* %2)
  ret void
}

define void @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr { %Array* }, { %Array* }* %0, i64 0, i32 0
  %2 = load %Array*, %Array** %1
  call void @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__adj(%Array* %2)
  ret void
}

define void @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__ctl(%Array* %3, %Array* %4)
  ret void
}

define void @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %0, i64 0, i32 1
  %3 = load %Array*, %Array** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Canon___df52efa5cea14eb6bd7164fe3e1e63b7_NoOp__ctladj(%Array* %3, %Array* %4)
  ret void
}

define void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Array* }*, %Array* }*
  %1 = getelementptr { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %0, i64 0, i32 0
  %2 = getelementptr { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %0, i64 0, i32 1
  %3 = load { i64, %Array* }*, { i64, %Array* }** %1
  %4 = load %Array*, %Array** %2
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body({ i64, %Array* }* %3, %Array* %4)
  ret void
}

define %Range @Microsoft__Quantum__Core__RangeReverse__body(%Range %r) {
entry:
  %0 = call %Range @__quantum__qis__rangereverse__body(%Range %r)
  ret %Range %0
}

declare %Range @__quantum__qis__rangereverse__body(%Range)

define i64 @Microsoft__Quantum__Core__RangeStep__body(%Range %range) {
entry:
  %0 = call i64 @__quantum__qis__rangestep__body(%Range %range)
  ret i64 %0
}

declare i64 @__quantum__qis__rangestep__body(%Range)

define i64 @Microsoft__Quantum__Core__RangeStart__body(%Range %range) {
entry:
  %0 = call i64 @__quantum__qis__rangestart__body(%Range %range)
  ret i64 %0
}

declare i64 @__quantum__qis__rangestart__body(%Range)

define i64 @Microsoft__Quantum__Core__RangeEnd__body(%Range %range) {
entry:
  %0 = call i64 @__quantum__qis__rangeend__body(%Range %range)
  ret i64 %0
}

define i64 @Microsoft__Quantum__Core___b2c3429521e6447aae8ccffe5c835aab_Length__body(%Array* %a) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %a)
  %0 = call i64 @__quantum__qis___b2c3429521e6447aae8ccffe5c835aab_length__body(%Array* %a)
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %0
}

declare i64 @__quantum__qis___b2c3429521e6447aae8ccffe5c835aab_length__body(%Array*)

define i64 @Microsoft__Quantum__Core___7f1b7d74d2ce4af5a0448750963e0125_Length__body(%Array* %a) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %a)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %2)
  %5 = bitcast i8* %4 to { %Array*, %Array* }**
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5
  %7 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %6, i64 0, i32 0
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_add_access(%Array* %8)
  %9 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %6, i64 0, i32 1
  %10 = load %Array*, %Array** %9
  call void @__quantum__rt__array_add_access(%Array* %10)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %11)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %a)
  %13 = call i64 @__quantum__qis___7f1b7d74d2ce4af5a0448750963e0125_length__body(%Array* %a)
  %14 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %15)
  %18 = bitcast i8* %17 to { %Array*, %Array* }**
  %19 = load { %Array*, %Array* }*, { %Array*, %Array* }** %18
  %20 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 0
  %21 = load %Array*, %Array** %20
  call void @__quantum__rt__array_remove_access(%Array* %21)
  %22 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %19, i64 0, i32 1
  %23 = load %Array*, %Array** %22
  call void @__quantum__rt__array_remove_access(%Array* %23)
  %24 = bitcast { %Array*, %Array* }* %19 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %24)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %13
}

declare i64 @__quantum__qis___7f1b7d74d2ce4af5a0448750963e0125_length__body(%Array*)

define i64 @Microsoft__Quantum__Core___cf68096b90664c979c730c61adcbf0d9_Length__body(%Array* %a) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %a)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__2

exiting__1:                                       ; preds = %exit__2
  %9 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %a)
  %10 = call i64 @__quantum__qis___cf68096b90664c979c730c61adcbf0d9_length__body(%Array* %a)
  %11 = sub i64 %0, 1
  br label %header__3

header__2:                                        ; preds = %exiting__2, %body__1
  %12 = phi i64 [ 0, %body__1 ], [ %22, %exiting__2 ]
  %13 = icmp sle i64 %12, %8
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %12)
  %15 = bitcast i8* %14 to { %Array*, %Array* }**
  %16 = load { %Array*, %Array* }*, { %Array*, %Array* }** %15
  %17 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %16, i64 0, i32 0
  %18 = load %Array*, %Array** %17
  call void @__quantum__rt__array_add_access(%Array* %18)
  %19 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %16, i64 0, i32 1
  %20 = load %Array*, %Array** %19
  call void @__quantum__rt__array_add_access(%Array* %20)
  %21 = bitcast { %Array*, %Array* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %21)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_add_access(%Array* %6)
  br label %exiting__1

header__3:                                        ; preds = %exiting__3, %exit__1
  %23 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__3 ]
  %24 = icmp sle i64 %23, %11
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %23)
  %26 = bitcast i8* %25 to %Array**
  %27 = load %Array*, %Array** %26
  %28 = call i64 @__quantum__rt__array_get_size_1d(%Array* %27)
  %29 = sub i64 %28, 1
  br label %header__4

exiting__3:                                       ; preds = %exit__4
  %30 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %10

header__4:                                        ; preds = %exiting__4, %body__3
  %31 = phi i64 [ 0, %body__3 ], [ %41, %exiting__4 ]
  %32 = icmp sle i64 %31, %29
  br i1 %32, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %31)
  %34 = bitcast i8* %33 to { %Array*, %Array* }**
  %35 = load { %Array*, %Array* }*, { %Array*, %Array* }** %34
  %36 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %35, i64 0, i32 0
  %37 = load %Array*, %Array** %36
  call void @__quantum__rt__array_remove_access(%Array* %37)
  %38 = getelementptr { %Array*, %Array* }, { %Array*, %Array* }* %35, i64 0, i32 1
  %39 = load %Array*, %Array** %38
  call void @__quantum__rt__array_remove_access(%Array* %39)
  %40 = bitcast { %Array*, %Array* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %40)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %41 = add i64 %31, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_remove_access(%Array* %27)
  br label %exiting__3
}

declare i64 @__quantum__qis___cf68096b90664c979c730c61adcbf0d9_length__body(%Array*)

define i64 @Microsoft__Quantum__Core___4b294adb1e2e4cad8ca13f3327e27c04_Length__body(%Array* %a) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %a)
  %0 = call i64 @__quantum__qis___4b294adb1e2e4cad8ca13f3327e27c04_length__body(%Array* %a)
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %0
}

declare i64 @__quantum__qis___4b294adb1e2e4cad8ca13f3327e27c04_length__body(%Array*)

define i64 @Microsoft__Quantum__Core___c22c37fc25fe48b9aca14018db25bf84_Length__body(%Array* %a) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %a)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5
  %7 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 0
  %8 = load { double, double }*, { double, double }** %7
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %9)
  %10 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i64 0, i32 1
  %11 = load %Array*, %Array** %10
  call void @__quantum__rt__array_add_access(%Array* %11)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %12)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %a)
  %14 = call i64 @__quantum__qis___c22c37fc25fe48b9aca14018db25bf84_length__body(%Array* %a)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %16)
  %19 = bitcast i8* %18 to { { double, double }*, %Array* }**
  %20 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %19
  %21 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %20, i64 0, i32 0
  %22 = load { double, double }*, { double, double }** %21
  %23 = bitcast { double, double }* %22 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %23)
  %24 = getelementptr { { double, double }*, %Array* }, { { double, double }*, %Array* }* %20, i64 0, i32 1
  %25 = load %Array*, %Array** %24
  call void @__quantum__rt__array_remove_access(%Array* %25)
  %26 = bitcast { { double, double }*, %Array* }* %20 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %26)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %14
}

declare i64 @__quantum__qis___c22c37fc25fe48b9aca14018db25bf84_length__body(%Array*)

define i64 @Microsoft__Quantum__Core___fc1b859f43c44589a344fc864458afc6_Length__body(%Array* %a) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %a)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %2)
  %5 = bitcast i8* %4 to { %Array*, double }**
  %6 = load { %Array*, double }*, { %Array*, double }** %5
  %7 = getelementptr { %Array*, double }, { %Array*, double }* %6, i64 0, i32 0
  %8 = load %Array*, %Array** %7
  call void @__quantum__rt__array_add_access(%Array* %8)
  %9 = bitcast { %Array*, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %9)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %a)
  %11 = call i64 @__quantum__qis___fc1b859f43c44589a344fc864458afc6_length__body(%Array* %a)
  %12 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %13)
  %16 = bitcast i8* %15 to { %Array*, double }**
  %17 = load { %Array*, double }*, { %Array*, double }** %16
  %18 = getelementptr { %Array*, double }, { %Array*, double }* %17, i64 0, i32 0
  %19 = load %Array*, %Array** %18
  call void @__quantum__rt__array_remove_access(%Array* %19)
  %20 = bitcast { %Array*, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %20)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %11
}

declare i64 @__quantum__qis___fc1b859f43c44589a344fc864458afc6_length__body(%Array*)

define i64 @Microsoft__Quantum__Core___563d80b2631d43dda09a7907598eb704_Length__body(%Array* %a) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %a)
  %0 = call i64 @__quantum__qis___563d80b2631d43dda09a7907598eb704_length__body(%Array* %a)
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %0
}

declare i64 @__quantum__qis___563d80b2631d43dda09a7907598eb704_length__body(%Array*)

define i64 @Microsoft__Quantum__Core___63c38a0bb8bf420099e4d1465552433e_Length__body(%Array* %a) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %a)
  %0 = call i64 @__quantum__qis___63c38a0bb8bf420099e4d1465552433e_length__body(%Array* %a)
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %0
}

declare i64 @__quantum__qis___63c38a0bb8bf420099e4d1465552433e_length__body(%Array*)

define i64 @Microsoft__Quantum__Core___0fd0589cbfab4253b9c5cac79649d4ad_Length__body(%Array* %a) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %a)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %6)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %a)
  %8 = call i64 @__quantum__qis___0fd0589cbfab4253b9c5cac79649d4ad_length__body(%Array* %a)
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %10)
  %13 = bitcast i8* %12 to %Array**
  %14 = load %Array*, %Array** %13
  call void @__quantum__rt__array_remove_access(%Array* %14)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %8
}

declare i64 @__quantum__qis___0fd0589cbfab4253b9c5cac79649d4ad_length__body(%Array*)

define i64 @Microsoft__Quantum__Core___52c74fad25364bb9a18c92e117235d4b_Length__body(%Array* %a) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %a)
  %0 = call i64 @__quantum__qis___52c74fad25364bb9a18c92e117235d4b_length__body(%Array* %a)
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %0
}

declare i64 @__quantum__qis___52c74fad25364bb9a18c92e117235d4b_length__body(%Array*)

define i64 @Microsoft__Quantum__Core___7261730ce32e4d6b9be5febbf5e500ea_Length__body(%Array* %a) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %a)
  %0 = call i64 @__quantum__qis___7261730ce32e4d6b9be5febbf5e500ea_length__body(%Array* %a)
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %0
}

declare i64 @__quantum__qis___7261730ce32e4d6b9be5febbf5e500ea_length__body(%Array*)

define i64 @Microsoft__Quantum__Core___af3dd4cca37b44f3bd87fb010bd30e97_Length__body(%Array* %a) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %a)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_add_access(%Tuple* %7)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %a)
  %9 = call i64 @__quantum__qis___af3dd4cca37b44f3bd87fb010bd30e97_length__body(%Array* %a)
  %10 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %11 = phi i64 [ 0, %exit__1 ], [ %17, %exiting__2 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %11)
  %14 = bitcast i8* %13 to { double, double }**
  %15 = load { double, double }*, { double, double }** %14
  %16 = bitcast { double, double }* %15 to %Tuple*
  call void @__quantum__rt__tuple_remove_access(%Tuple* %16)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %17 = add i64 %11, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %9
}

declare i64 @__quantum__qis___af3dd4cca37b44f3bd87fb010bd30e97_length__body(%Array*)

define i64 @Microsoft__Quantum__Core___f48070e7acab4798bd92b18631b8b9e2_Length__body(%Array* %a) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %a)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5
  call void @__quantum__rt__array_add_access(%Array* %6)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_add_access(%Array* %a)
  %8 = call i64 @__quantum__qis___f48070e7acab4798bd92b18631b8b9e2_length__body(%Array* %a)
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %a, i64 %10)
  %13 = bitcast i8* %12 to %Array**
  %14 = load %Array*, %Array** %13
  call void @__quantum__rt__array_remove_access(%Array* %14)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_remove_access(%Array* %a)
  ret i64 %8
}

declare i64 @__quantum__qis___f48070e7acab4798bd92b18631b8b9e2_length__body(%Array*)

define void @Microsoft__Quantum__Intrinsic__CNOT__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i64 0, i32 0
  %control = load %Qubit*, %Qubit** %1
  %2 = getelementptr { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i64 0, i32 1
  %target = load %Qubit*, %Qubit** %2
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  store %Qubit* %control, %Qubit** %5
  %__controlQubits____inline__1 = call %Array* @__quantum__rt__array_concatenate(%Array* %__controlQubits__, %Array* %3)
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits____inline__1)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits____inline__1, %Qubit* %target)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits____inline__1)
  call void @__quantum__rt__array_unreference(%Array* %3)
  call void @__quantum__rt__array_unreference(%Array* %__controlQubits____inline__1)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__CNOT__ctladj(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i64 0, i32 0
  %control = load %Qubit*, %Qubit** %1
  %2 = getelementptr { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i64 0, i32 1
  %target = load %Qubit*, %Qubit** %2
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 mul nuw (i64 ptrtoint (i1** getelementptr (i1*, i1** null, i32 1) to i64), i64 2))
  %4 = bitcast %Tuple* %3 to { %Qubit*, %Qubit* }*
  %5 = getelementptr { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i64 0, i32 0
  %6 = getelementptr { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i64 0, i32 1
  store %Qubit* %control, %Qubit** %5
  store %Qubit* %target, %Qubit** %6
  call void @Microsoft__Quantum__Intrinsic__CNOT__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %4)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__tuple_unreference(%Tuple* %3)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %target) {
entry:
  %0 = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %target)
  %1 = load %Result*, %Result** @ResultOne
  %2 = call i1 @__quantum__rt__result_equal(%Result* %0, %Result* %1)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__qis__x__body(%Qubit* %target)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__result_unreference(%Result* %0)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Z__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__z__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Z__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__z__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Z__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Z__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__z__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__s__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__s__adj(%Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__s__adj(%Qubit*)

define void @Microsoft__Quantum__Intrinsic__S__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__s__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  ret void
}

declare void @__quantum__qis__s__ctl(%Array*, %Qubit*)

define void @Microsoft__Quantum__Intrinsic__S__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__s__ctladj(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  ret void
}

declare void @__quantum__qis__s__ctladj(%Array*, %Qubit*)

define void @Microsoft__Quantum__Intrinsic__Y__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__y__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Y__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__y__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Y__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__y__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Y__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__y__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %paulis, double %theta, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %paulis)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__qis__exp__body(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %paulis)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %paulis, double %theta, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %paulis)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  call void @__quantum__qis__exp__adj(%Array* %paulis, double %theta, %Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %paulis)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i64 0, i32 0
  %paulis = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %paulis)
  %2 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i64 0, i32 1
  %theta = load double, double* %2
  %3 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array*, double, %Array* }*
  %6 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i64 0, i32 0
  %7 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i64 0, i32 1
  %8 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %paulis)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store %Array* %paulis, %Array** %6
  store double %theta, double* %7
  store %Array* %qubits, %Array** %8
  call void @__quantum__qis__exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %5)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %paulis)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_unreference(%Array* %paulis)
  call void @__quantum__rt__array_unreference(%Array* %qubits)
  call void @__quantum__rt__tuple_unreference(%Tuple* %4)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  %1 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i64 0, i32 0
  %paulis = load %Array*, %Array** %1
  call void @__quantum__rt__array_add_access(%Array* %paulis)
  %2 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i64 0, i32 1
  %theta = load double, double* %2
  %3 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i64 0, i32 2
  %qubits = load %Array*, %Array** %3
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array*, double, %Array* }*
  %6 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i64 0, i32 0
  %7 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i64 0, i32 1
  %8 = getelementptr { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i64 0, i32 2
  call void @__quantum__rt__array_reference(%Array* %paulis)
  call void @__quantum__rt__array_reference(%Array* %qubits)
  store %Array* %paulis, %Array** %6
  store double %theta, double* %7
  store %Array* %qubits, %Array** %8
  call void @__quantum__qis__exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %5)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  call void @__quantum__rt__array_remove_access(%Array* %paulis)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  call void @__quantum__rt__array_unreference(%Array* %paulis)
  call void @__quantum__rt__array_unreference(%Array* %qubits)
  call void @__quantum__rt__tuple_unreference(%Tuple* %4)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__h__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__h__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__H__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__h__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  ret void
}

declare void @__quantum__qis__h__ctl(%Array*, %Qubit*)

define void @Microsoft__Quantum__Intrinsic__H__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__h__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  ret void
}

define void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %__controlQubits__)
  call void @__quantum__qis__x__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_remove_access(%Array* %__controlQubits__)
  ret void
}

define %Result* @Microsoft__Quantum__Intrinsic__Measure__body(%Array* %bases, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_add_access(%Array* %bases)
  call void @__quantum__rt__array_add_access(%Array* %qubits)
  %0 = call %Result* @__quantum__qis__measure__body(%Array* %bases, %Array* %qubits)
  call void @__quantum__rt__array_remove_access(%Array* %bases)
  call void @__quantum__rt__array_remove_access(%Array* %qubits)
  ret %Result* %0
}

attributes #0 = { "EntryPoint" }
